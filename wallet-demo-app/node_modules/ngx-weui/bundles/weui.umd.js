(function (global, factory) {
	typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('@angular/common'), require('@angular/forms'), require('@angular/platform-browser'), require('@angular/animations'), require('rxjs/Observable'), require('rxjs/Subscription'), require('rxjs/Subject'), require('rxjs/operators'), require('rxjs/observable/FromEventObservable')) :
	typeof define === 'function' && define.amd ? define(['exports', '@angular/core', '@angular/common', '@angular/forms', '@angular/platform-browser', '@angular/animations', 'rxjs/Observable', 'rxjs/Subscription', 'rxjs/Subject', 'rxjs/operators', 'rxjs/observable/FromEventObservable'], factory) :
	(factory((global.ngxWeUI = {}),global.ng.core,global.ng.common,global.ng.forms,global.ng.platformBrowser,global.ng.animations,global.Rx,global.Rx,global.Rx,global.Rx.Observable.prototype,global.Rx.Observable));
}(this, (function (exports,core,common,forms,platformBrowser,animations,Observable,Subscription,Subject,operators,FromEventObservable) { 'use strict';

/*! *****************************************************************************
Copyright (c) Microsoft Corporation. All rights reserved.
Licensed under the Apache License, Version 2.0 (the "License"); you may not use
this file except in compliance with the License. You may obtain a copy of the
License at http://www.apache.org/licenses/LICENSE-2.0

THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
MERCHANTABLITY OR NON-INFRINGEMENT.

See the Apache Version 2.0 License for specific language governing permissions
and limitations under the License.
***************************************************************************** */
/* global Reflect, Promise */

var extendStatics = Object.setPrototypeOf ||
    ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
    function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };

function __extends(d, b) {
    extendStatics(d, b);
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * 单元格滑块
 */
var SwipeDirective = /** @class */ (function () {
    function SwipeDirective(el) {
        this.el = el;
        this.curX = 0;
        this.opend = false;
        /**
         * 右边滑动宽度（单位：px），默认：`68`
         */
        this.width = 68;
    }
    /**
     * @return {?}
     */
    SwipeDirective.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        var /** @type {?} */ el = this.el.nativeElement;
        this.swipeEl = el.querySelector('.weui-cell__bd');
        if (!this.swipeEl)
            this.width = 0;
        else {
            this.setPos(0);
            this.swipeEl.style.transition = 'transform .3s';
        }
    };
    /**
     * @param {?} x
     * @return {?}
     */
    SwipeDirective.prototype.setPos = /**
     * @param {?} x
     * @return {?}
     */
    function (x) {
        this.swipeEl.style.transform = "translateX(-" + x + "px)";
    };
    /**
     * @param {?} $event
     * @return {?}
     */
    SwipeDirective.prototype.onTouchStart = /**
     * @param {?} $event
     * @return {?}
     */
    function ($event) {
        this.curX = ($event.touches[0] || $event.changedTouches[0]).pageX;
    };
    /**
     * @param {?} $event
     * @return {?}
     */
    SwipeDirective.prototype.onTouchMove = /**
     * @param {?} $event
     * @return {?}
     */
    function ($event) {
        var /** @type {?} */ touch = $event.touches[0] || $event.changedTouches[0];
        var /** @type {?} */ newX = this.curX - touch.pageX;
        if (this.opend) {
            newX = newX > 0 ? this.width : this.width - Math.abs(newX);
        }
        else {
            newX = newX > this.width ? this.width : newX;
        }
        this.setPos(newX <= 0 ? 0 : newX);
    };
    /**
     * @param {?} $event
     * @return {?}
     */
    SwipeDirective.prototype.onTouchEnd = /**
     * @param {?} $event
     * @return {?}
     */
    function ($event) {
        var /** @type {?} */ touch = $event.touches[0] || $event.changedTouches[0];
        var /** @type {?} */ newX = Math.abs(this.curX - touch.pageX);
        if (newX === 0)
            return;
        if (this.opend)
            newX = this.width - newX;
        // 当移动超过一半都视为打开
        if (newX > 0 && newX > (+this.width / 2)) {
            this.opend = true;
            this.setPos(this.width);
        }
        else {
            this.opend = false;
            this.setPos(0);
        }
    };
    SwipeDirective.decorators = [
        { type: core.Directive, args: [{
                    selector: '[weui-swipe]'
                },] },
    ];
    /** @nocollapse */
    SwipeDirective.ctorParameters = function () { return [
        { type: core.ElementRef, },
    ]; };
    SwipeDirective.propDecorators = {
        "width": [{ type: core.Input, args: ['weui-width',] },],
        "onTouchStart": [{ type: core.HostListener, args: ['touchstart', ['$event'],] },],
        "onTouchMove": [{ type: core.HostListener, args: ['touchmove', ['$event'],] },],
        "onTouchEnd": [{ type: core.HostListener, args: ['touchend', ['$event'],] }, { type: core.HostListener, args: ['touchcancel', ['$event'],] },],
    };
    return SwipeDirective;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
var CellModule = /** @class */ (function () {
    function CellModule() {
    }
    /**
     * @return {?}
     */
    CellModule.forRoot = /**
     * @return {?}
     */
    function () {
        return { ngModule: CellModule, providers: [] };
    };
    CellModule.decorators = [
        { type: core.NgModule, args: [{
                    imports: [common.CommonModule],
                    declarations: [
                        SwipeDirective
                    ],
                    exports: [
                        SwipeDirective
                    ]
                },] },
    ];
    /** @nocollapse */
    CellModule.ctorParameters = function () { return []; };
    return CellModule;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
var ButtonConfig = /** @class */ (function () {
    function ButtonConfig() {
        /**
         * 操作场景：primary、default、warn
         */
        this.type = 'primary';
        /**
         * disabled状态，默认：`false`
         */
        this.disabled = false;
        /**
         * 是否加载状态，默认：`false`
         */
        this.loading = false;
        /**
         * 镂空按钮，默认：`false`
         */
        this.plain = false;
        /**
         * 是否小号，默认：`false`
         */
        this.mini = false;
    }
    ButtonConfig.decorators = [
        { type: core.Injectable },
    ];
    /** @nocollapse */
    ButtonConfig.ctorParameters = function () { return []; };
    return ButtonConfig;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * @param {?} value
 * @return {?}
 */
function toBoolean(value) {
    return value != null && "" + value !== 'false';
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
var ButtonComponent = /** @class */ (function () {
    function ButtonComponent(_config) {
        /**
         * 操作场景：primary、default、warn，默认：`primary`
         */
        this.type = 'primary';
        this._loading = false;
        this._mini = false;
        this._plain = false;
        this._disabled = false;
        Object.assign(this, _config);
    }
    Object.defineProperty(ButtonComponent.prototype, "loading", {
        get: /**
         * 是否加载状态
         * @return {?}
         */
        function () { return this._loading; },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) { this._loading = toBoolean(value); },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ButtonComponent.prototype, "mini", {
        get: /**
         * 是否小号
         * @return {?}
         */
        function () { return this._mini; },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) { this._mini = toBoolean(value); },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ButtonComponent.prototype, "plain", {
        get: /**
         * 镂空按钮
         * @return {?}
         */
        function () { return this._plain; },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) { this._plain = toBoolean(value); },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ButtonComponent.prototype, "disabled", {
        get: /**
         * 禁用状态
         * @return {?}
         */
        function () { return this._disabled; },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) { this._disabled = toBoolean(value); },
        enumerable: true,
        configurable: true
    });
    ButtonComponent.decorators = [
        { type: core.Component, args: [{
                    selector: 'weui-button, button[weui-button], a[weui-button]',
                    host: {
                        'class': 'weui-btn',
                        '[class.weui-btn_primary]': '!plain && type==="primary"',
                        '[class.weui-btn_default]': '!plain && type==="default"',
                        '[class.weui-btn_warn]': '!plain && type==="warn"',
                        '[class.weui-btn_plain-primary]': 'plain && type==="primary"',
                        '[class.weui-btn_plain-default]': 'plain && type==="default"',
                        '[class.weui-btn_plain-warn]': 'plain && type==="warn"',
                        '[class.weui-btn_disabled]': '!plain && disabled',
                        '[class.weui-btn_plain-disabled]': 'plain && disabled',
                        '[attr.disabled]': 'disabled ? "disabled" : null'
                    },
                    exportAs: 'weuiButton',
                    template: '<i class="weui-loading" *ngIf="loading"></i><ng-content></ng-content>'
                },] },
    ];
    /** @nocollapse */
    ButtonComponent.ctorParameters = function () { return [
        { type: ButtonConfig, },
    ]; };
    ButtonComponent.propDecorators = {
        "type": [{ type: core.Input, args: ['weui-type',] },],
        "loading": [{ type: core.HostBinding, args: ['class.weui-btn_loading',] }, { type: core.Input, args: ['weui-loading',] },],
        "mini": [{ type: core.HostBinding, args: ['class.weui-btn_mini',] }, { type: core.Input, args: ['weui-mini',] },],
        "plain": [{ type: core.Input, args: ['weui-plain',] },],
        "disabled": [{ type: core.Input },],
    };
    return ButtonComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
var ButtonModule = /** @class */ (function () {
    function ButtonModule() {
    }
    /**
     * @return {?}
     */
    ButtonModule.forRoot = /**
     * @return {?}
     */
    function () {
        return { ngModule: ButtonModule, providers: [ButtonConfig] };
    };
    ButtonModule.decorators = [
        { type: core.NgModule, args: [{
                    imports: [common.CommonModule],
                    declarations: [ButtonComponent],
                    exports: [ButtonComponent]
                },] },
    ];
    /** @nocollapse */
    ButtonModule.ctorParameters = function () { return []; };
    return ButtonModule;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * 向上查找父节点
 * @param {?} el
 * @param {?} selector
 * @return {?}
 */
function findParent(el, selector) {
    var /** @type {?} */ retEl = null;
    while (el) {
        if (el.matches(selector)) {
            retEl = el;
            break;
        }
        el = el.parentElement;
    }
    return retEl;
}
/**
 * 查找并创建
 * @param {?} el
 * @param {?=} selector
 * @param {?=} tagName
 * @param {?=} className
 * @param {?=} cssText
 * @return {?}
 */
function add(el, selector, tagName, className, cssText) {
    if (selector === void 0) { selector = '.weui-cell__ft'; }
    if (tagName === void 0) { tagName = 'div'; }
    if (className === void 0) { className = 'weui-cell__ft'; }
    if (cssText === void 0) { cssText = ''; }
    var /** @type {?} */ ret = el.querySelector(selector);
    if (!ret) {
        ret = document.createElement(tagName);
        ret.className = className;
        if (cssText)
            ret.style.cssText = cssText;
        el.appendChild(ret);
    }
    return ret;
}
/**
 * 移除
 * @param {?} el
 * @param {?} selector
 * @return {?}
 */
function remove(el, selector) {
    var /** @type {?} */ ret = el.querySelector(selector);
    if (ret) {
        el.removeChild(ret);
    }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * 文本框，指令是对文本框格式校验（邮箱、手机、身份证等）、视觉效果的增强而已
 */
var InputDirective = /** @class */ (function () {
    function InputDirective(el) {
        this.el = el;
        /**
         * 是否必填项，**等同于** <intpu required> 的值，当值必填时会有视觉效果
         */
        this.required = 'warn';
        /**
         * 是否自动清除内容中的空格
         */
        this.cleaner = false;
    }
    /**
     * @return {?}
     */
    InputDirective.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        this.parentEl = findParent(this.el.nativeElement, '.weui-cell');
        if (!this.parentEl)
            throw new Error('父DOM结构至少必须包含一个.weui-cell');
        // 检查是否有 weui-cell__ft
        this.ftEl = add(this.parentEl);
    };
    /**
     * @param {?} changes
     * @return {?}
     */
    InputDirective.prototype.ngOnChanges = /**
     * @param {?} changes
     * @return {?}
     */
    function (changes) {
        this._createValidator();
        if (this._onChange)
            this._onChange();
    };
    /**
     * @return {?}
     */
    InputDirective.prototype._createValidator = /**
     * @return {?}
     */
    function () {
        var _this = this;
        var /** @type {?} */ regex = null;
        if (this.inputRegex) {
            if (typeof this.inputRegex === 'string') {
                regex = new RegExp("^" + this.inputRegex + "$");
            }
            else {
                regex = this.inputRegex;
            }
        }
        else {
            // 默认行为
            if (this.inputType) {
                switch (this.inputType) {
                    case 'qq':
                    case 'number':
                        regex = /^[0-9]+$/;
                        break;
                    case 'digit':
                        regex = /^[.0-9]+$/;
                        break;
                    case 'tel':
                        regex = /^[-.0-9]+$/;
                        break;
                    case 'email':
                        regex = /^(([^<>()\[\]\\.,;:\s@"]+(\.[^<>()\[\]\\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/;
                        this.cleaner = true;
                        break;
                    case 'mobile':
                        regex = /^1[0-9]{10}$/;
                        this.cleaner = true;
                        break;
                    case 'idcard':
                        // 身份证
                        regex = /^[X0-9]{15,18}$/;
                        this.cleaner = true;
                        break;
                }
            }
        }
        this._validator = function (control) {
            var /** @type {?} */ value = control.value;
            if (value == null || value.length === 0) {
                if (_this.required !== undefined)
                    return { 'icon': _this.required, 'type': 'required', 'actualValue': value };
                return null;
            }
            if (_this.cleaner && value.includes(' ')) {
                value = value.replace(/ /g, '');
                control.setValue(value);
            }
            return regex === null || regex.test(value) ? null : { 'icon': 'warn', 'type': 'regex', 'actualValue': value };
        };
    };
    /**
     * @param {?} fn
     * @return {?}
     */
    InputDirective.prototype.registerOnValidatorChange = /**
     * @param {?} fn
     * @return {?}
     */
    function (fn) { this._onChange = fn; };
    /**
     * @param {?} c
     * @return {?}
     */
    InputDirective.prototype.validate = /**
     * @param {?} c
     * @return {?}
     */
    function (c) {
        var /** @type {?} */ ret = this._validator(c);
        if (ret === null) {
            this.parentEl.classList.remove('weui-cell_warn');
            remove(this.ftEl, 'i');
        }
        else {
            remove(this.ftEl, 'i');
            this.parentEl.classList.add('weui-cell_warn');
            var /** @type {?} */ icon = "weui-icon-" + ret["icon"];
            add(this.ftEl, '.' + icon, 'i', icon);
        }
        return ret;
    };
    InputDirective.decorators = [
        { type: core.Directive, args: [{
                    selector: '[weui-input]',
                    providers: [{
                            provide: forms.NG_VALIDATORS,
                            useExisting: core.forwardRef(function () { return InputDirective; }),
                            multi: true
                        }]
                },] },
    ];
    /** @nocollapse */
    InputDirective.ctorParameters = function () { return [
        { type: core.ElementRef, },
    ]; };
    InputDirective.propDecorators = {
        "inputType": [{ type: core.Input, args: ['weui-input',] },],
        "inputRegex": [{ type: core.Input, args: ['weui-regex',] },],
        "required": [{ type: core.Input, args: ['weui-required',] },],
        "cleaner": [{ type: core.Input, args: ['weui-cleaner',] },],
    };
    return InputDirective;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * 获取验证码
 */
var VCodeDirective = /** @class */ (function () {
    function VCodeDirective(el) {
        this.el = el;
        /**
         * 时长（单位：秒），默认：`60`
         */
        this.seconds = 60;
        /**
         * 倒计时模板，使用 `${num}` 表示当前秒数
         */
        this.tpl = '${num} 秒';
        /**
         * 重新发送提醒文本
         */
        this.error = '重新发送';
        this._disabled = false;
    }
    /**
     * @return {?}
     */
    VCodeDirective.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        if (!this.onSend)
            throw new Error('weui-vcode必须传递一个返回值为 `Observable<boolean>` 函数');
        this._cur = this.el.nativeElement.innerHTML;
    };
    /**
     * @return {?}
     */
    VCodeDirective.prototype._onClick = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this._disabled = true;
        this.onSend().subscribe(function (res) {
            res ? _this.tick() : _this.err();
        });
    };
    /**
     * @return {?}
     */
    VCodeDirective.prototype.err = /**
     * @return {?}
     */
    function () {
        this._disabled = false;
        this.el.nativeElement.innerHTML = this.error;
    };
    /**
     * @return {?}
     */
    VCodeDirective.prototype.tick = /**
     * @return {?}
     */
    function () {
        var _this = this;
        var /** @type {?} */ count = this.seconds < 1 ? 1 : this.seconds;
        this.setText(count);
        this._t = setInterval(function () {
            if (--count <= 0) {
                _this._disabled = false;
                _this.el.nativeElement.innerHTML = _this._cur;
                _this.destroy();
            }
            else
                _this.setText(count);
        }, 1000);
    };
    /**
     * @param {?} num
     * @return {?}
     */
    VCodeDirective.prototype.setText = /**
     * @param {?} num
     * @return {?}
     */
    function (num) {
        this.el.nativeElement.innerHTML = this.tpl.replace(/\${num}/, num.toString());
    };
    /**
     * @return {?}
     */
    VCodeDirective.prototype.destroy = /**
     * @return {?}
     */
    function () {
        if (this._t) {
            clearInterval(this._t);
            this._t = null;
        }
    };
    /**
     * @return {?}
     */
    VCodeDirective.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        this.destroy();
    };
    VCodeDirective.decorators = [
        { type: core.Directive, args: [{
                    selector: '[weui-vcode]',
                    host: {
                        '(click)': '_onClick()',
                        '[disabled]': '_disabled'
                    }
                },] },
    ];
    /** @nocollapse */
    VCodeDirective.ctorParameters = function () { return [
        { type: core.ElementRef, },
    ]; };
    VCodeDirective.propDecorators = {
        "onSend": [{ type: core.Input, args: ['weui-vcode',] },],
        "seconds": [{ type: core.Input, args: ['weui-seconds',] },],
        "tpl": [{ type: core.Input, args: ['weui-tpl',] },],
        "error": [{ type: core.Input, args: ['weui-error',] },],
    };
    return VCodeDirective;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * 文本域字数统计
 */
var TextareaDirective = /** @class */ (function () {
    function TextareaDirective(el) {
        this.el = el;
        /**
         * 最大长度，0表示不受限
         */
        this.maxlength = 0;
        /**
         * 中文部分应该算多少个字符，使用 `/[^\x00-\xff]/g` 正则表达式统计中文部分（默认：1个字符）
         */
        this.cn = 1;
    }
    /**
     * @return {?}
     */
    TextareaDirective.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        this.init();
    };
    /**
     * @param {?} changes
     * @return {?}
     */
    TextareaDirective.prototype.ngOnChanges = /**
     * @param {?} changes
     * @return {?}
     */
    function (changes) {
        if ('maxlength' in changes) {
            this.init()._onChange(this._value);
        }
    };
    /**
     * @return {?}
     */
    TextareaDirective.prototype.init = /**
     * @return {?}
     */
    function () {
        var /** @type {?} */ clsName = "weui-textarea-counter";
        var /** @type {?} */ pel = this.el.nativeElement.parentElement;
        this.maxlength = +this.maxlength;
        if (this.maxlength <= 0) {
            remove(pel, '.' + clsName);
            this._count = null;
        }
        else {
            this._count = add(pel, '.' + clsName, 'div', clsName);
        }
        return this;
    };
    /**
     * @param {?} value
     * @return {?}
     */
    TextareaDirective.prototype._onChange = /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        if (!this._count)
            return;
        value = value || '';
        if (this.cn > 1) {
            value = value.replace(/[^\x00-\xff]/g, '**');
        }
        this._value = value;
        this._count.innerHTML = value.length + " / " + this.maxlength;
    };
    TextareaDirective.decorators = [
        { type: core.Directive, args: [{
                    selector: '[weui-textarea]',
                    host: {
                        '(ngModelChange)': '_onChange($event)'
                    }
                },] },
    ];
    /** @nocollapse */
    TextareaDirective.ctorParameters = function () { return [
        { type: core.ElementRef, },
    ]; };
    TextareaDirective.propDecorators = {
        "maxlength": [{ type: core.Input },],
        "cn": [{ type: core.Input, args: ['weui-cn',] },],
    };
    return TextareaDirective;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
var ChecklistDirective = /** @class */ (function () {
    function ChecklistDirective() {
        this.checked = false;
    }
    Object.defineProperty(ChecklistDirective.prototype, "value", {
        set: /**
         * @param {?} val
         * @return {?}
         */
        function (val) {
            this._value = val;
            this.checked = this.targetArray.indexOf(val) !== -1;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @param {?} $event
     * @return {?}
     */
    ChecklistDirective.prototype._change = /**
     * @param {?} $event
     * @return {?}
     */
    function ($event) {
        if ($event.target.checked) {
            this.targetArray.push(this._value);
        }
        else {
            this.targetArray.splice(this.targetArray.indexOf(this._value), 1);
        }
    };
    ChecklistDirective.decorators = [
        { type: core.Directive, args: [{
                    selector: '[weui-checklist]',
                    host: {
                        '(change)': '_change($event)',
                        '[checked]': 'checked'
                    }
                },] },
    ];
    /** @nocollapse */
    ChecklistDirective.ctorParameters = function () { return []; };
    ChecklistDirective.propDecorators = {
        "targetArray": [{ type: core.Input, args: ['weui-checklist',] },],
        "value": [{ type: core.Input, args: ['weui-value',] },],
    };
    return ChecklistDirective;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
var FormModule = /** @class */ (function () {
    function FormModule() {
    }
    /**
     * @return {?}
     */
    FormModule.forRoot = /**
     * @return {?}
     */
    function () {
        return { ngModule: FormModule, providers: [] };
    };
    FormModule.decorators = [
        { type: core.NgModule, args: [{
                    imports: [common.CommonModule, forms.FormsModule],
                    declarations: [
                        InputDirective,
                        VCodeDirective,
                        TextareaDirective,
                        ChecklistDirective
                    ],
                    exports: [
                        InputDirective,
                        VCodeDirective,
                        TextareaDirective,
                        ChecklistDirective
                    ]
                },] },
    ];
    /** @nocollapse */
    FormModule.ctorParameters = function () { return []; };
    return FormModule;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * 滑块指令，支持[(ngModel)]
 */
var SliderDirective = /** @class */ (function () {
    function SliderDirective(el) {
        this.el = el;
        this._state = null;
        this._value = 0;
        this.isInit = false;
        /**
         * 允许的最小值，默认：`0`
         */
        this.min = 0;
        /**
         * 允许的最大值，默认：`100`
         */
        this.max = 100;
        /**
         * 步长，默认：`1`
         */
        this.step = 1;
        /**
         * 是否可用
         */
        this.enabled = true;
        /**
         * 值改变时触发
         */
        this.change = new core.EventEmitter();
        this.onChange = Function.prototype;
        this.onTouched = Function.prototype;
    }
    /**
     * @return {?}
     */
    SliderDirective.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        this.isInit = true;
        this.trackEl = this.el.nativeElement.querySelector('.weui-slider__track');
        this.handlerEl = this.el.nativeElement.querySelector('.weui-slider__handler');
        if (this.trackEl === null || this.handlerEl === null)
            throw new Error('失效DOM结构');
        this.onTouchStart = this.startHandle.bind(this);
        this.onTouchMove = this.moveHandle.bind(this);
        this.handlerEl.addEventListener('touchstart', this.onTouchStart, false);
        this.handlerEl.addEventListener('touchmove', this.onTouchMove, false);
    };
    /**
     * @return {?}
     */
    SliderDirective.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        this.handlerEl.removeEventListener('touchstart', this.onTouchStart, false);
        this.handlerEl.removeEventListener('touchmove', this.onTouchMove, false);
    };
    /**
     * @return {?}
     */
    SliderDirective.prototype.refresh = /**
     * @return {?}
     */
    function () {
        var /** @type {?} */ el = this.el.nativeElement;
        this._state = {
            enabled: this.enabled,
            left: el.getBoundingClientRect().left,
            size: el.querySelector('.weui-slider__inner').offsetWidth,
            percentage: [0, 0, 0],
            x: 0
        };
        this.max = +this.max;
        this.min = +this.min;
        this.step = +this.step;
        this.setValue(this._value);
        this.layout();
    };
    /**
     * @param {?} value
     * @return {?}
     */
    SliderDirective.prototype.setValue = /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        if (this.max > this.min) {
            this._state.percentage = [100 * (value - this.min) / (this.max - this.min), 0, this.step * 100 / (this.max - this.min)];
        }
        else {
            this._state.percentage = [0, 0, 100];
        }
    };
    /**
     * @return {?}
     */
    SliderDirective.prototype.layout = /**
     * @return {?}
     */
    function () {
        this.trackEl.style.width = this._state.percentage[0] + '%';
        this.handlerEl.style.left = this._state.percentage[0] + '%';
    };
    /**
     * @param {?} $event
     * @return {?}
     */
    SliderDirective.prototype.startHandle = /**
     * @param {?} $event
     * @return {?}
     */
    function ($event) {
        if (this._state === null)
            this.refresh();
        this._state.x = ($event.touches[0] || $event.changedTouches[0]).pageX;
    };
    /**
     * @param {?} $event
     * @return {?}
     */
    SliderDirective.prototype.moveHandle = /**
     * @param {?} $event
     * @return {?}
     */
    function ($event) {
        if (!this._state.enabled)
            return false;
        var /** @type {?} */ pageX = ($event.touches[0] || $event.changedTouches[0]).pageX;
        var /** @type {?} */ xDiff = pageX - this._state.x;
        if (xDiff >= 15 || xDiff <= 15) {
            this._state.percentage[0] = this.getPercentage(pageX, $event);
            this.layout();
            this.calculateValue(this._state.percentage[0]);
        }
    };
    /**
     * @param {?} pageX
     * @param {?} $event
     * @return {?}
     */
    SliderDirective.prototype.getPercentage = /**
     * @param {?} pageX
     * @param {?} $event
     * @return {?}
     */
    function (pageX, $event) {
        var /** @type {?} */ distanceToSlide = pageX - this._state.left;
        var /** @type {?} */ percentage = distanceToSlide / this._state.size * 100;
        percentage = Math.round(percentage / this._state.percentage[2]) * this._state.percentage[2];
        return Math.max(0, Math.min(100, percentage));
    };
    /**
     * @param {?} percentage
     * @return {?}
     */
    SliderDirective.prototype.calculateValue = /**
     * @param {?} percentage
     * @return {?}
     */
    function (percentage) {
        var /** @type {?} */ rawValue = percentage / 100 * (this.max - this.min);
        // adjustment = this.min
        var /** @type {?} */ value = this.min + Math.round(rawValue / this.step) * this.step;
        if (value < this.min)
            value = this.min;
        else if (value > this.max)
            value = this.max;
        this._value = value;
        this.onChange(this._value);
        this.onTouched();
        this.change.emit(this._value);
    };
    /**
     * @param {?} changes
     * @return {?}
     */
    SliderDirective.prototype.ngOnChanges = /**
     * @param {?} changes
     * @return {?}
     */
    function (changes) {
        if (this.isInit)
            this.refresh();
    };
    /**
     * @param {?} value
     * @return {?}
     */
    SliderDirective.prototype.writeValue = /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        if (value) {
            this._value = +value;
            this.refresh();
            this.calculateValue(this._state.percentage[0]);
        }
    };
    /**
     * @param {?} fn
     * @return {?}
     */
    SliderDirective.prototype.registerOnChange = /**
     * @param {?} fn
     * @return {?}
     */
    function (fn) { this.onChange = fn; };
    /**
     * @param {?} fn
     * @return {?}
     */
    SliderDirective.prototype.registerOnTouched = /**
     * @param {?} fn
     * @return {?}
     */
    function (fn) { this.onTouched = fn; };
    /**
     * @param {?} isDisabled
     * @return {?}
     */
    SliderDirective.prototype.setDisabledState = /**
     * @param {?} isDisabled
     * @return {?}
     */
    function (isDisabled) {
    };
    SliderDirective.decorators = [
        { type: core.Directive, args: [{
                    selector: '[weui-slider]',
                    providers: [{
                            provide: forms.NG_VALUE_ACCESSOR,
                            useExisting: core.forwardRef(function () { return SliderDirective; }),
                            multi: true
                        }]
                },] },
    ];
    /** @nocollapse */
    SliderDirective.ctorParameters = function () { return [
        { type: core.ElementRef, },
    ]; };
    SliderDirective.propDecorators = {
        "min": [{ type: core.Input, args: ['weui-min',] },],
        "max": [{ type: core.Input, args: ['weui-max',] },],
        "step": [{ type: core.Input, args: ['weui-step',] },],
        "enabled": [{ type: core.Input, args: ['weui-enabled',] },],
        "change": [{ type: core.Output, args: ['weui-change',] },],
    };
    return SliderDirective;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
var SliderModule = /** @class */ (function () {
    function SliderModule() {
    }
    /**
     * @return {?}
     */
    SliderModule.forRoot = /**
     * @return {?}
     */
    function () {
        return { ngModule: SliderModule, providers: [] };
    };
    SliderModule.decorators = [
        { type: core.NgModule, args: [{
                    imports: [common.CommonModule],
                    declarations: [
                        SliderDirective
                    ],
                    exports: [
                        SliderDirective
                    ]
                },] },
    ];
    /** @nocollapse */
    SliderModule.ctorParameters = function () { return []; };
    return SliderModule;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * @param {?} node
 * @return {?}
 */
function isElement(node) {
    return !!(node && (node.nodeName || node.prop && node.attr && node.find));
}
/**
 * \@docs-private
 */
var FileLikeObject = /** @class */ (function () {
    function FileLikeObject(fileOrInput) {
        var /** @type {?} */ isInput = isElement(fileOrInput);
        var /** @type {?} */ fakePathOrObject = isInput ? fileOrInput.value : fileOrInput;
        var /** @type {?} */ postfix = typeof fakePathOrObject === 'string' ? 'FakePath' : 'Object';
        var /** @type {?} */ method = '_createFrom' + postfix;
        (/** @type {?} */ (this))[method](fakePathOrObject);
    }
    /**
     * @param {?} path
     * @return {?}
     */
    FileLikeObject.prototype._createFromFakePath = /**
     * @param {?} path
     * @return {?}
     */
    function (path) {
        this.lastModifiedDate = void 0;
        this.size = void 0;
        this.type = 'like/' + path.slice(path.lastIndexOf('.') + 1).toLowerCase();
        this.name = path.slice(path.lastIndexOf('/') + path.lastIndexOf('\\') + 2);
    };
    /**
     * @param {?} object
     * @return {?}
     */
    FileLikeObject.prototype._createFromObject = /**
     * @param {?} object
     * @return {?}
     */
    function (object) {
        // this.lastModifiedDate = copy(object.lastModifiedDate);
        this.size = object.size;
        this.type = object.type;
        this.name = object.name;
    };
    return FileLikeObject;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * 文件对象
 */
var FileItem = /** @class */ (function () {
    function FileItem(uploader, file, options) {
        /**
         * 索引
         */
        this.index = 0;
        /**
         * 上传进度
         */
        this.progress = 0;
        /**
         * 准备上传就绪
         */
        this.isReady = false;
        /**
         * 上传中
         */
        this.isUploading = false;
        /**
         * 已上传（不管错误与否都是true）
         */
        this.isUploaded = false;
        /**
         * 上传成功
         */
        this.isSuccess = false;
        /**
         * 用户取消上传
         */
        this.isCancel = false;
        /**
         * 上传失败
         */
        this.isError = false;
        this.uploader = uploader;
        this.setOptions(options);
        this.id = Math.random().toString(36).substring(7);
        this.file = new FileLikeObject(file);
        this._file = file;
    }
    /**
     * @param {?} options
     * @return {?}
     */
    FileItem.prototype.setOptions = /**
     * @param {?} options
     * @return {?}
     */
    function (options) {
        this.options = Object.assign({}, this.uploader.options, options);
    };
    /**
     * 上传
     */
    /**
     * 上传
     * @return {?}
     */
    FileItem.prototype.upload = /**
     * 上传
     * @return {?}
     */
    function () {
        try {
            this.uploader.uploadItem(this);
        }
        catch (/** @type {?} */ e) {
            this.uploader._onCompleteItem(this, '', 0, {});
            this.uploader._onErrorItem(this, '', 0, {});
        }
    };
    /**
     * 取消上传
     */
    /**
     * 取消上传
     * @return {?}
     */
    FileItem.prototype.cancel = /**
     * 取消上传
     * @return {?}
     */
    function () {
        this.uploader.cancelItem(this);
    };
    /**
     * 从队列中移除，当文件正在上传中时会先取消
     */
    /**
     * 从队列中移除，当文件正在上传中时会先取消
     * @return {?}
     */
    FileItem.prototype.remove = /**
     * 从队列中移除，当文件正在上传中时会先取消
     * @return {?}
     */
    function () {
        this.uploader.removeFromQueue(this);
    };
    /**
     * @return {?}
     */
    FileItem.prototype._prepareToUploading = /**
     * @return {?}
     */
    function () {
        this.index = this.index || this.uploader._getNextIndex();
        this.isReady = true;
    };
    /**
     * @return {?}
     */
    FileItem.prototype._onBeforeUpload = /**
     * @return {?}
     */
    function () {
        this.isReady = true;
        this.isUploading = true;
        this.isUploaded = false;
        this.isSuccess = false;
        this.isCancel = false;
        this.isError = false;
        this.progress = 0;
        if (this.options.onUploadStart)
            this.options.onUploadStart(this);
    };
    /**
     * @param {?} progress
     * @return {?}
     */
    FileItem.prototype._onProgress = /**
     * @param {?} progress
     * @return {?}
     */
    function (progress) {
        this.progress = progress;
        if (this.options.onUploadProgress)
            this.options.onUploadProgress(this, progress, this.uploader.progress);
    };
    /**
     * @param {?} response
     * @param {?} status
     * @param {?} headers
     * @return {?}
     */
    FileItem.prototype._onSuccess = /**
     * @param {?} response
     * @param {?} status
     * @param {?} headers
     * @return {?}
     */
    function (response, status, headers) {
        this.isReady = false;
        this.isUploading = false;
        this.isUploaded = true;
        this.isSuccess = true;
        this.isCancel = false;
        this.isError = false;
        this.progress = 100;
        this.index = void 0;
        if (this.options.onUploadSuccess)
            this.options.onUploadSuccess(this, response, status, headers);
    };
    /**
     * @param {?} response
     * @param {?} status
     * @param {?} headers
     * @return {?}
     */
    FileItem.prototype._onError = /**
     * @param {?} response
     * @param {?} status
     * @param {?} headers
     * @return {?}
     */
    function (response, status, headers) {
        this.isReady = false;
        this.isUploading = false;
        this.isUploaded = true;
        this.isSuccess = false;
        this.isCancel = false;
        this.isError = true;
        this.progress = 0;
        this.index = void 0;
        if (this.options.onUploadError)
            this.options.onUploadError(this, response, status, headers);
    };
    /**
     * @param {?} response
     * @param {?} status
     * @param {?} headers
     * @return {?}
     */
    FileItem.prototype._onComplete = /**
     * @param {?} response
     * @param {?} status
     * @param {?} headers
     * @return {?}
     */
    function (response, status, headers) {
        if (this.uploader.options.removeAfterUpload) {
            this.remove();
        }
        if (this.options.onUploadComplete)
            this.options.onUploadComplete(this, response, status, headers);
    };
    /**
     * @param {?} response
     * @param {?} status
     * @param {?} headers
     * @return {?}
     */
    FileItem.prototype._onCancel = /**
     * @param {?} response
     * @param {?} status
     * @param {?} headers
     * @return {?}
     */
    function (response, status, headers) {
        this.isReady = false;
        this.isUploading = false;
        this.isUploaded = false;
        this.isSuccess = false;
        this.isCancel = true;
        this.isError = false;
        this.progress = 0;
        this.index = void 0;
        if (this.options.onUploadCancel)
            this.options.onUploadCancel(this);
    };
    return FileItem;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
var UploaderConfig = /** @class */ (function () {
    function UploaderConfig() {
        /**
         * 发送凭据，默认：`true`
         */
        this.withCredentials = true;
        /**
         * 是否自动上传，默认：`false`
         * 设置为 true 后，不需要手动调用 `upload`，有文件选择即开始上传。
         */
        this.auto = false;
        /**
         * 允许最多上传数量，-1 表示不受限，默认：`-1`
         */
        this.limit = -1;
        /**
         * 限定文件大小（单位：字节），-1 表示不受限，默认：`-1`
         */
        this.size = -1;
    }
    UploaderConfig.decorators = [
        { type: core.Injectable },
    ];
    /** @nocollapse */
    UploaderConfig.ctorParameters = function () { return []; };
    return UploaderConfig;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * \@docs-private
 */
var FileType = /** @class */ (function () {
    function FileType() {
    }
    /**
     * @param {?} file
     * @return {?}
     */
    FileType.getMimeClass = /**
     * @param {?} file
     * @return {?}
     */
    function (file) {
        var /** @type {?} */ mimeClass = 'application';
        if (this.mime_psd.indexOf(file.type) !== -1) {
            mimeClass = 'image';
        }
        else if (file.type.match('image.*')) {
            mimeClass = 'image';
        }
        else if (file.type.match('video.*')) {
            mimeClass = 'video';
        }
        else if (file.type.match('audio.*')) {
            mimeClass = 'audio';
        }
        else if (file.type === 'application/pdf') {
            mimeClass = 'pdf';
        }
        else if (this.mime_compress.indexOf(file.type) !== -1) {
            mimeClass = 'compress';
        }
        else if (this.mime_doc.indexOf(file.type) !== -1) {
            mimeClass = 'doc';
        }
        else if (this.mime_xsl.indexOf(file.type) !== -1) {
            mimeClass = 'xls';
        }
        else if (this.mime_ppt.indexOf(file.type) !== -1) {
            mimeClass = 'ppt';
        }
        if (mimeClass === 'application') {
            mimeClass = this.fileTypeDetection(file.name);
        }
        return mimeClass;
    };
    /**
     * @param {?} inputFilename
     * @return {?}
     */
    FileType.fileTypeDetection = /**
     * @param {?} inputFilename
     * @return {?}
     */
    function (inputFilename) {
        var /** @type {?} */ types = {
            'jpg': 'image',
            'jpeg': 'image',
            'tif': 'image',
            'psd': 'image',
            'bmp': 'image',
            'png': 'image',
            'nef': 'image',
            'tiff': 'image',
            'cr2': 'image',
            'dwg': 'image',
            'cdr': 'image',
            'ai': 'image',
            'indd': 'image',
            'pin': 'image',
            'cdp': 'image',
            'skp': 'image',
            'stp': 'image',
            '3dm': 'image',
            'mp3': 'audio',
            'wav': 'audio',
            'wma': 'audio',
            'mod': 'audio',
            'm4a': 'audio',
            'compress': 'compress',
            'rar': 'compress',
            '7z': 'compress',
            'lz': 'compress',
            'z01': 'compress',
            'pdf': 'pdf',
            'xls': 'xls',
            'xlsx': 'xls',
            'ods': 'xls',
            'mp4': 'video',
            'avi': 'video',
            'wmv': 'video',
            'mpg': 'video',
            'mts': 'video',
            'flv': 'video',
            '3gp': 'video',
            'vob': 'video',
            'm4v': 'video',
            'mpeg': 'video',
            'm2ts': 'video',
            'mov': 'video',
            'doc': 'doc',
            'docx': 'doc',
            'eps': 'doc',
            'txt': 'doc',
            'odt': 'doc',
            'rtf': 'doc',
            'ppt': 'ppt',
            'pptx': 'ppt',
            'pps': 'ppt',
            'ppsx': 'ppt',
            'odp': 'ppt'
        };
        var /** @type {?} */ chunks = inputFilename.split('.');
        if (chunks.length < 2) {
            return 'application';
        }
        var /** @type {?} */ extension = chunks[chunks.length - 1].toLowerCase();
        if (types[extension] === undefined) {
            return 'application';
        }
        else {
            return types[extension];
        }
    };
    FileType.mime_doc = [
        'application/msword',
        'application/msword',
        'application/vnd.openxmlformats-officedocument.wordprocessingml.document',
        'application/vnd.openxmlformats-officedocument.wordprocessingml.template',
        'application/vnd.ms-word.document.macroEnabled.12',
        'application/vnd.ms-word.template.macroEnabled.12'
    ];
    FileType.mime_xsl = [
        'application/vnd.ms-excel',
        'application/vnd.ms-excel',
        'application/vnd.ms-excel',
        'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet',
        'application/vnd.openxmlformats-officedocument.spreadsheetml.template',
        'application/vnd.ms-excel.sheet.macroEnabled.12',
        'application/vnd.ms-excel.template.macroEnabled.12',
        'application/vnd.ms-excel.addin.macroEnabled.12',
        'application/vnd.ms-excel.sheet.binary.macroEnabled.12'
    ];
    FileType.mime_ppt = [
        'application/vnd.ms-powerpoint',
        'application/vnd.ms-powerpoint',
        'application/vnd.ms-powerpoint',
        'application/vnd.ms-powerpoint',
        'application/vnd.openxmlformats-officedocument.presentationml.presentation',
        'application/vnd.openxmlformats-officedocument.presentationml.template',
        'application/vnd.openxmlformats-officedocument.presentationml.slideshow',
        'application/vnd.ms-powerpoint.addin.macroEnabled.12',
        'application/vnd.ms-powerpoint.presentation.macroEnabled.12',
        'application/vnd.ms-powerpoint.presentation.macroEnabled.12',
        'application/vnd.ms-powerpoint.slideshow.macroEnabled.12'
    ];
    FileType.mime_psd = [
        'image/photoshop',
        'image/x-photoshop',
        'image/psd',
        'application/photoshop',
        'application/psd',
        'zz-application/zz-winassoc-psd'
    ];
    FileType.mime_compress = [
        'application/x-gtar',
        'application/x-gcompress',
        'application/compress',
        'application/x-tar',
        'application/x-rar-compressed',
        'application/octet-stream'
    ];
    return FileType;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * 内置HTML5上传组件
 */
var Uploader = /** @class */ (function () {
    /**
     * Creates an instance of Uploader.
     */
    function Uploader(options, globalConfig) {
        this.globalConfig = globalConfig;
        this._queue = [];
        this._progress = 0;
        this._isUploading = false;
        this._nextIndex = 0;
        this.setOptions(options);
    }
    Object.defineProperty(Uploader.prototype, "options", {
        /**
         * 获取当前上传组件配置项
         */
        get: /**
         * 获取当前上传组件配置项
         * @return {?}
         */
        function () {
            return this._options;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Uploader.prototype, "queue", {
        /**
         * 获取队列中所有文件对象
         */
        get: /**
         * 获取队列中所有文件对象
         * @return {?}
         */
        function () {
            return this._queue;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Uploader.prototype, "progress", {
        /**
         * 获取当前总进度
         */
        get: /**
         * 获取当前总进度
         * @return {?}
         */
        function () {
            return this._progress;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Uploader.prototype, "isUploading", {
        /**
         * 是否上传中
         */
        get: /**
         * 是否上传中
         * @return {?}
         */
        function () {
            return this._isUploading;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Uploader.prototype, "notUploadedCount", {
        /**
         * 获取未上传数量
         */
        get: /**
         * 获取未上传数量
         * @return {?}
         */
        function () {
            return this.getNotUploadedItems().length;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Uploader.prototype, "uploadedCount", {
        /**
         * 获取已上传数量
         */
        get: /**
         * 获取已上传数量
         * @return {?}
         */
        function () {
            return this._queue.filter(function (item) { return item.isUploaded; }).length;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    Uploader.prototype._getNextIndex = /**
     * @return {?}
     */
    function () {
        return ++this._nextIndex;
    };
    /**
     * 重置选项
     *
     * @param options
     * @param includeOldQueue 是否包括已存在队列中的文件
     */
    /**
     * 重置选项
     *
     * @param {?} options
     * @param {?=} includeOldQueue 是否包括已存在队列中的文件
     * @return {?}
     */
    Uploader.prototype.setOptions = /**
     * 重置选项
     *
     * @param {?} options
     * @param {?=} includeOldQueue 是否包括已存在队列中的文件
     * @return {?}
     */
    function (options, includeOldQueue) {
        if (includeOldQueue === void 0) { includeOldQueue = true; }
        this._options = Object.assign({
            filters: [],
            disableMultipart: false,
            method: 'POST',
            alias: 'file',
            withCredentials: true,
            auto: false,
            limit: -1,
            size: -1,
            removeAfterUpload: false
        }, this.globalConfig, this._options, options);
        // 数量
        if (this._options.limit !== -1)
            this._options.filters.unshift({ name: 'queueLimit', fn: this._queueLimitFilter });
        // 大小
        if (this._options.size !== -1)
            this._options.filters.unshift({ name: 'fileSize', fn: this._fileSizeFilter });
        // 类型
        if (this._options.types)
            this._options.filters.unshift({ name: 'fileType', fn: this._fileTypeFilter });
        // mime类型
        if (this._options.mimes)
            this._options.filters.unshift({ name: 'mimeType', fn: this._mimeTypeFilter });
        // 对已经存在的队列重置所有配置信息
        if (includeOldQueue) {
            for (var /** @type {?} */ i = 0; i < this._queue.length; i++) {
                this._queue[i].setOptions(this._options);
            }
        }
    };
    /**
     * @return {?}
     */
    Uploader.prototype._queueLimitFilter = /**
     * @return {?}
     */
    function () {
        return this._options.limit === undefined || this._queue.length < this._options.limit;
    };
    /**
     * @param {?} item
     * @return {?}
     */
    Uploader.prototype._fileSizeFilter = /**
     * @param {?} item
     * @return {?}
     */
    function (item) {
        return !(this._options.size && item.size > this._options.size);
    };
    /**
     * @param {?} item
     * @return {?}
     */
    Uploader.prototype._mimeTypeFilter = /**
     * @param {?} item
     * @return {?}
     */
    function (item) {
        return !(this._options.mimes && this._options.mimes.indexOf(item.type) === -1);
    };
    /**
     * @param {?} item
     * @return {?}
     */
    Uploader.prototype._fileTypeFilter = /**
     * @param {?} item
     * @return {?}
     */
    function (item) {
        return !(this._options.types && this._options.types.indexOf(FileType.getMimeClass(item)) === -1);
    };
    /**
     * @param {?} file
     * @param {?} filters
     * @param {?} options
     * @return {?}
     */
    Uploader.prototype._isValidFile = /**
     * @param {?} file
     * @param {?} filters
     * @param {?} options
     * @return {?}
     */
    function (file, filters, options) {
        var _this = this;
        this._failFilterIndex = -1;
        return !filters.length ? true : filters.every(function (filter) {
            _this._failFilterIndex++;
            return filter.fn.call(_this, file, options);
        });
    };
    /**
     * 过滤器，如果未指定采用内置
     * @param {?} filters
     * @return {?}
     */
    Uploader.prototype._getFilters = /**
     * 过滤器，如果未指定采用内置
     * @param {?} filters
     * @return {?}
     */
    function (filters) {
        if (!filters)
            return this._options.filters;
        if (Array.isArray(filters))
            return filters;
        if (typeof filters === 'string') {
            var /** @type {?} */ names_1 = filters.match(/[^\s,]+/g);
            return this._options.filters
                .filter(function (filter) { return names_1.indexOf(filter.name) !== -1; });
        }
        return this._options.filters;
    };
    /**
     * @param {?} value
     * @return {?}
     */
    Uploader.prototype._getIndexOfItem = /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        return typeof value === 'number' ? value : this._queue.indexOf(value);
    };
    /**
     * 获取未上传过列表
     * @return {?}
     */
    Uploader.prototype.getNotUploadedItems = /**
     * 获取未上传过列表
     * @return {?}
     */
    function () {
        return this._queue.filter(function (item) { return !item.isUploaded; });
    };
    Object.defineProperty(Uploader.prototype, "getReadyItems", {
        /** 获取待上传文件 */
        get: /**
         * 获取待上传文件
         * @return {?}
         */
        function () {
            return this._queue
                .filter(function (item) { return (item.isReady && !item.isUploading); })
                .sort(function (item1, item2) { return item1.index - item2.index; });
        },
        enumerable: true,
        configurable: true
    });
    /**
     * 将文件放入队列中
     *
     * @param files 文件列表
     * @param options 强制重新指定新 `options` 内容
     * @param filters 强制重新指定新 `filters` 内容
     */
    /**
     * 将文件放入队列中
     *
     * @param {?} files 文件列表
     * @param {?=} options 强制重新指定新 `options` 内容
     * @param {?=} filters 强制重新指定新 `filters` 内容
     * @return {?}
     */
    Uploader.prototype.addToQueue = /**
     * 将文件放入队列中
     *
     * @param {?} files 文件列表
     * @param {?=} options 强制重新指定新 `options` 内容
     * @param {?=} filters 强制重新指定新 `filters` 内容
     * @return {?}
     */
    function (files, options, filters) {
        var _this = this;
        var /** @type {?} */ list = [];
        for (var _i = 0, files_1 = files; _i < files_1.length; _i++) {
            var file = files_1[_i];
            list.push(file);
        }
        var /** @type {?} */ arrayOfFilters = this._getFilters(filters);
        var /** @type {?} */ count = this._queue.length;
        var /** @type {?} */ addedFileItems = [];
        if (!options) {
            options = this._options;
        }
        list.map(function (some) {
            var /** @type {?} */ temp = new FileLikeObject(some);
            if (_this._isValidFile(temp, arrayOfFilters, options)) {
                var /** @type {?} */ fileItem = new FileItem(_this, some, options);
                addedFileItems.push(fileItem);
                _this._queue.push(fileItem);
                if (_this._options.onFileQueued)
                    _this._options.onFileQueued(fileItem);
            }
            else {
                var /** @type {?} */ filter = arrayOfFilters[_this._failFilterIndex];
                if (_this._options.onError)
                    _this._options.onError(temp, filter, options);
            }
        });
        if (this.queue.length !== count) {
            this._progress = this._getTotalProgress();
        }
        if (this.options.auto) {
            this.uploadAll();
        }
    };
    /**
     * 从队列中移除一个文件
     *
     * @param value FileItem对象或下标
     */
    /**
     * 从队列中移除一个文件
     *
     * @param {?} value FileItem对象或下标
     * @return {?}
     */
    Uploader.prototype.removeFromQueue = /**
     * 从队列中移除一个文件
     *
     * @param {?} value FileItem对象或下标
     * @return {?}
     */
    function (value) {
        var /** @type {?} */ index = this._getIndexOfItem(value);
        var /** @type {?} */ item = this._queue[index];
        if (item.isUploading) {
            item.cancel();
        }
        this._queue.splice(index, 1);
        this._progress = this._getTotalProgress();
        if (this._options.onFileDequeued)
            this._options.onFileDequeued(item);
    };
    /**
     * 清空队列
     */
    /**
     * 清空队列
     * @return {?}
     */
    Uploader.prototype.clearQueue = /**
     * 清空队列
     * @return {?}
     */
    function () {
        while (this._queue.length) {
            this._queue[0].remove();
        }
        this._progress = 0;
        if (this._options.onFileDequeued)
            this._options.onFileDequeued();
    };
    /**
     * 上传某个文件
     */
    /**
     * 上传某个文件
     * @param {?} value
     * @return {?}
     */
    Uploader.prototype.uploadItem = /**
     * 上传某个文件
     * @param {?} value
     * @return {?}
     */
    function (value) {
        var /** @type {?} */ index = this._getIndexOfItem(value);
        var /** @type {?} */ item = this._queue[index];
        item._prepareToUploading();
        if (this._isUploading) {
            return;
        }
        this._isUploading = true;
        this._xhrTransport(item);
    };
    /**
     * 取消某个文件
     */
    /**
     * 取消某个文件
     * @param {?} value
     * @return {?}
     */
    Uploader.prototype.cancelItem = /**
     * 取消某个文件
     * @param {?} value
     * @return {?}
     */
    function (value) {
        var /** @type {?} */ index = this._getIndexOfItem(value);
        var /** @type {?} */ item = this._queue[index];
        if (item && item.isUploading) {
            if (item.options.abortTransport) {
                this._onCancelItem(item, null, null, null);
                this._onCompleteItem(item, null, null, null);
                item.options.abortTransport(item);
            }
            else {
                if (item._xhr)
                    item._xhr.abort();
            }
        }
    };
    /**
     * 上传队列中所有未上传的文件
     */
    /**
     * 上传队列中所有未上传的文件
     * @return {?}
     */
    Uploader.prototype.uploadAll = /**
     * 上传队列中所有未上传的文件
     * @return {?}
     */
    function () {
        var /** @type {?} */ items = this.getNotUploadedItems().filter(function (item) { return !item.isUploading; });
        if (!items.length) {
            return;
        }
        items.map(function (item) { return item._prepareToUploading(); });
        if (this._options.onStart)
            this._options.onStart(items[0]);
        items[0].upload();
    };
    /**
     * 取消所有上传中文件
     */
    /**
     * 取消所有上传中文件
     * @return {?}
     */
    Uploader.prototype.cancelAll = /**
     * 取消所有上传中文件
     * @return {?}
     */
    function () {
        var /** @type {?} */ items = this.getNotUploadedItems();
        items.map(function (item) { return item.cancel(); });
        if (this._options.onCancel)
            this._options.onCancel();
    };
    /**
     * @return {?}
     */
    Uploader.prototype._destroy = /**
     * @return {?}
     */
    function () {
        return void 0;
    };
    /**
     * @param {?} item
     * @return {?}
     */
    Uploader.prototype._xhrTransport = /**
     * @param {?} item
     * @return {?}
     */
    function (item) {
        var _this = this;
        item._onBeforeUpload();
        // 自实现
        if (item.options.uploadTransport) {
            item.options.uploadTransport.apply(this, [item]).subscribe(function (response) {
                _this._onSuccessItem(item, response, 0, null);
                _this._onCompleteItem(item, response, 0, null);
            });
            return this;
        }
        var /** @type {?} */ xhr = item._xhr = new XMLHttpRequest();
        var /** @type {?} */ sendable;
        if (typeof item._file.size !== 'number') {
            throw new TypeError('The file specified is no longer valid');
        }
        if (!this._options.disableMultipart) {
            sendable = new FormData();
            sendable.append(item.options.alias, item._file, item.file.name);
            if (this._options.params !== undefined) {
                Object.keys(this._options.params).forEach(function (key) {
                    sendable.append(key, _this._options.params[key]);
                });
            }
        }
        else {
            sendable = item._file;
        }
        xhr.upload.onprogress = function (event) {
            var /** @type {?} */ progress = Math.round(event.lengthComputable ? event.loaded * 100 / event.total : 0);
            _this._onProgressItem(item, progress);
        };
        xhr.onload = function () {
            var /** @type {?} */ headers = _this._parseHeaders(xhr.getAllResponseHeaders());
            var /** @type {?} */ response = _this._transformResponse(xhr.response, headers);
            var /** @type {?} */ gist = _this._isSuccessCode(xhr.status) ? 'Success' : 'Error';
            var /** @type {?} */ method = '_on' + gist + 'Item';
            (/** @type {?} */ (_this))[method](item, response, xhr.status, headers);
            _this._onCompleteItem(item, response, xhr.status, headers);
        };
        xhr.onerror = function () {
            var /** @type {?} */ headers = _this._parseHeaders(xhr.getAllResponseHeaders());
            var /** @type {?} */ response = _this._transformResponse(xhr.response, headers);
            _this._onErrorItem(item, response, xhr.status, headers);
            _this._onCompleteItem(item, response, xhr.status, headers);
        };
        xhr.onabort = function () {
            var /** @type {?} */ headers = _this._parseHeaders(xhr.getAllResponseHeaders());
            var /** @type {?} */ response = _this._transformResponse(xhr.response, headers);
            _this._onCancelItem(item, response, xhr.status, headers);
            _this._onCompleteItem(item, response, xhr.status, headers);
        };
        xhr.open(item.options.method, item.options.url, true);
        xhr.withCredentials = item.options.withCredentials;
        if (item.options.headers && item.options.headers.length > 0) {
            for (var _i = 0, _a = item.options.headers; _i < _a.length; _i++) {
                var header = _a[_i];
                xhr.setRequestHeader(header.name, header.value);
            }
        }
        xhr.send(sendable);
        return this;
    };
    /**
     * @param {?=} value
     * @return {?}
     */
    Uploader.prototype._getTotalProgress = /**
     * @param {?=} value
     * @return {?}
     */
    function (value) {
        if (value === void 0) { value = 0; }
        if (this._options.removeAfterUpload) {
            return value;
        }
        var /** @type {?} */ notUploaded = this.getNotUploadedItems().length;
        var /** @type {?} */ uploaded = notUploaded ? this._queue.length - notUploaded : this._queue.length;
        var /** @type {?} */ ratio = 100 / this._queue.length;
        var /** @type {?} */ current = value * ratio / 100;
        return Math.round(uploaded * ratio + current);
    };
    /**
     * @param {?} headers
     * @return {?}
     */
    Uploader.prototype._parseHeaders = /**
     * @param {?} headers
     * @return {?}
     */
    function (headers) {
        var /** @type {?} */ parsed = {};
        var /** @type {?} */ key;
        var /** @type {?} */ val;
        var /** @type {?} */ i;
        if (!headers) {
            return parsed;
        }
        headers.split('\n').map(function (line) {
            i = line.indexOf(':');
            key = line.slice(0, i).trim().toLowerCase();
            val = line.slice(i + 1).trim();
            if (key) {
                parsed[key] = parsed[key] ? parsed[key] + ', ' + val : val;
            }
        });
        return parsed;
    };
    /**
     * @param {?} response
     * @param {?} headers
     * @return {?}
     */
    Uploader.prototype._transformResponse = /**
     * @param {?} response
     * @param {?} headers
     * @return {?}
     */
    function (response, headers) {
        return response;
    };
    /**
     * @param {?} status
     * @return {?}
     */
    Uploader.prototype._isSuccessCode = /**
     * @param {?} status
     * @return {?}
     */
    function (status) {
        return (status >= 200 && status < 300) || status === 304;
    };
    /**
     * @param {?} item
     * @param {?} progress
     * @return {?}
     */
    Uploader.prototype._onProgressItem = /**
     * @param {?} item
     * @param {?} progress
     * @return {?}
     */
    function (item, progress) {
        var /** @type {?} */ total = this._getTotalProgress(progress);
        this._progress = total;
        item._onProgress(progress);
    };
    /**
     * @param {?} item
     * @param {?} response
     * @param {?} status
     * @param {?} headers
     * @return {?}
     */
    Uploader.prototype._onErrorItem = /**
     * @param {?} item
     * @param {?} response
     * @param {?} status
     * @param {?} headers
     * @return {?}
     */
    function (item, response, status, headers) {
        item._onError(response, status, headers);
    };
    /**
     * @param {?} item
     * @param {?} response
     * @param {?} status
     * @param {?} headers
     * @return {?}
     */
    Uploader.prototype._onSuccessItem = /**
     * @param {?} item
     * @param {?} response
     * @param {?} status
     * @param {?} headers
     * @return {?}
     */
    function (item, response, status, headers) {
        item._onSuccess(response, status, headers);
    };
    /**
     * @param {?} item
     * @param {?} response
     * @param {?} status
     * @param {?} headers
     * @return {?}
     */
    Uploader.prototype._onCancelItem = /**
     * @param {?} item
     * @param {?} response
     * @param {?} status
     * @param {?} headers
     * @return {?}
     */
    function (item, response, status, headers) {
        item._onCancel(response, status, headers);
    };
    /**
     * @param {?} item
     * @param {?} response
     * @param {?} status
     * @param {?} headers
     * @return {?}
     */
    Uploader.prototype._onCompleteItem = /**
     * @param {?} item
     * @param {?} response
     * @param {?} status
     * @param {?} headers
     * @return {?}
     */
    function (item, response, status, headers) {
        item._onComplete(response, status, headers);
        var /** @type {?} */ nextItem = this.getReadyItems[0];
        this._isUploading = false;
        if (nextItem) {
            nextItem.upload();
            return;
        }
        this._progress = this._getTotalProgress();
        if (this._options.onFinished)
            this._options.onFinished();
    };
    /** @nocollapse */
    Uploader.ctorParameters = function () { return [
        null,
        { type: UploaderConfig, decorators: [{ type: core.Inject, args: [UploaderConfig,] }, { type: core.Optional },] },
    ]; };
    return Uploader;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
var UploaderFileDirective = /** @class */ (function () {
    function UploaderFileDirective(element) {
        this.element = element;
    }
    Object.defineProperty(UploaderFileDirective.prototype, "_options", {
        get: /**
         * @return {?}
         */
        function () {
            return this.uploader.options;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(UploaderFileDirective.prototype, "_isEmptyAfterSelection", {
        get: /**
         * @return {?}
         */
        function () {
            return !!this.element.nativeElement.attributes.multiple;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    UploaderFileDirective.prototype._onChange = /**
     * @return {?}
     */
    function () {
        var /** @type {?} */ files = this.element.nativeElement.files;
        this.uploader.addToQueue(files, this._options);
        if (this._isEmptyAfterSelection) {
            this.element.nativeElement.value = '';
        }
    };
    UploaderFileDirective.decorators = [
        { type: core.Directive, args: [{
                    selector: '[weui-uploader-file]'
                },] },
    ];
    /** @nocollapse */
    UploaderFileDirective.ctorParameters = function () { return [
        { type: core.ElementRef, },
    ]; };
    UploaderFileDirective.propDecorators = {
        "uploader": [{ type: core.Input, args: ['weui-uploader-file',] },],
        "_onChange": [{ type: core.HostListener, args: ['change',] },],
    };
    return UploaderFileDirective;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * 检查是否安卓系统
 * @return {?}
 */
function isAndroid() {
    return /android (\d+)/.test(platformBrowser.ɵgetDOM().getUserAgent().toLowerCase());
}
/**
 * 检查是否IOS系统
 * @return {?}
 */
function isIOS() {
    return /iPad|iPhone|iPod/.test(platformBrowser.ɵgetDOM().getUserAgent());
}
/**
 * 检查File是否为图像文件
 * @param {?} file
 * @return {?}
 */
function isImage(file) {
    if (!(file instanceof window.File))
        return false;
    var /** @type {?} */ type = '|' + file.type.slice(file.type.lastIndexOf('/') + 1) + '|';
    return '|jpg|png|jpeg|bmp|gif|'.indexOf(type) !== -1;
}
/**
 * 生成可预览的图像地址
 * @param {?} file
 * @return {?}
 */
function genImageUrl(file) {
    if (isImage(file))
        return window.URL.createObjectURL(file);
    return '';
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * 创建缩略图
 */
var FileThumbDirective = /** @class */ (function () {
    function FileThumbDirective(el) {
        this.el = el;
    }
    /**
     * @return {?}
     */
    FileThumbDirective.prototype.render = /**
     * @return {?}
     */
    function () {
        var /** @type {?} */ url = genImageUrl(this.file);
        if (!url)
            return;
        this.el.nativeElement.style.backgroundImage = "url(" + url + ")";
    };
    /**
     * @param {?} changes
     * @return {?}
     */
    FileThumbDirective.prototype.ngOnChanges = /**
     * @param {?} changes
     * @return {?}
     */
    function (changes) {
        this.render();
    };
    FileThumbDirective.decorators = [
        { type: core.Directive, args: [{ selector: '[weui-thumb]' },] },
    ];
    /** @nocollapse */
    FileThumbDirective.ctorParameters = function () { return [
        { type: core.ElementRef, },
    ]; };
    FileThumbDirective.propDecorators = {
        "file": [{ type: core.Input, args: ['weui-thumb',] },],
    };
    return FileThumbDirective;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
var UploaderModule = /** @class */ (function () {
    function UploaderModule() {
    }
    /**
     * @return {?}
     */
    UploaderModule.forRoot = /**
     * @return {?}
     */
    function () {
        return { ngModule: UploaderModule, providers: [UploaderConfig] };
    };
    UploaderModule.decorators = [
        { type: core.NgModule, args: [{
                    imports: [common.CommonModule],
                    declarations: [
                        UploaderFileDirective, FileThumbDirective
                    ],
                    exports: [
                        UploaderFileDirective, FileThumbDirective
                    ]
                },] },
    ];
    /** @nocollapse */
    UploaderModule.ctorParameters = function () { return []; };
    return UploaderModule;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
var ActionSheetConfig = /** @class */ (function () {
    function ActionSheetConfig() {
        /**
         * 样式，默认：`ios`
         */
        this.skin = 'ios';
        /**
         * 取消文本，默认：`取消`
         */
        this.cancel = '取消';
        /**
         * 允许点击背景关闭，默认：`true`
         */
        this.backdrop = true;
    }
    ActionSheetConfig.decorators = [
        { type: core.Injectable },
    ];
    /** @nocollapse */
    ActionSheetConfig.ctorParameters = function () { return []; };
    return ActionSheetConfig;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
var ActionSheetComponent = /** @class */ (function () {
    function ActionSheetComponent(DEF) {
        this.DEF = DEF;
        /**
         * 关闭回调
         */
        this.close = new core.EventEmitter();
        this._shown = false;
        /**
         * 动画状态码
         */
        this._shownAnt = false;
    }
    Object.defineProperty(ActionSheetComponent.prototype, "_visibility", {
        get: /**
         * @return {?}
         */
        function () {
            return this._shownAnt ? 'show' : 'hide';
        },
        enumerable: true,
        configurable: true
    });
    /**
     * 显示，组件载入页面后并不会显示，显示调用 `show()` 并订阅结果。
     */
    /**
     * 显示，组件载入页面后并不会显示，显示调用 `show()` 并订阅结果。
     * @return {?}
     */
    ActionSheetComponent.prototype.show = /**
     * 显示，组件载入页面后并不会显示，显示调用 `show()` 并订阅结果。
     * @return {?}
     */
    function () {
        var _this = this;
        this.config = Object.assign({
            backdrop: true,
            skin: 'auto'
        }, this.DEF, this.config);
        if (this.config.skin === 'auto') {
            this.config.skin = isAndroid() ? 'android' : 'ios';
        }
        this._shown = true;
        setTimeout(function () { _this._shownAnt = true; }, 10);
        return Observable.Observable.create(function (observer) {
            _this.observer = observer;
        });
    };
    /**
     * 隐藏
     *
     * @param is_backdrop 是否从背景上点击
     */
    /**
     * 隐藏
     *
     * @param {?=} is_backdrop 是否从背景上点击
     * @return {?}
     */
    ActionSheetComponent.prototype.hide = /**
     * 隐藏
     *
     * @param {?=} is_backdrop 是否从背景上点击
     * @return {?}
     */
    function (is_backdrop) {
        var _this = this;
        if (is_backdrop === true && this.config.backdrop === false)
            return false;
        this._shownAnt = false;
        setTimeout(function () {
            _this._shown = false;
            _this.close.emit();
        }, this.config.skin === 'android' ? 200 : 300);
    };
    /**
     * 选择动作
     */
    /**
     * 选择动作
     * @param {?} menu
     * @return {?}
     */
    ActionSheetComponent.prototype._onSelect = /**
     * 选择动作
     * @param {?} menu
     * @return {?}
     */
    function (menu) {
        this.observer.next(menu);
        this.observer.complete();
        this.hide();
    };
    /**
     * @return {?}
     */
    ActionSheetComponent.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        if (this.observer && this.observer instanceof Subscription.Subscription) {
            (/** @type {?} */ (this.observer)).unsubscribe();
        }
    };
    ActionSheetComponent.decorators = [
        { type: core.Component, args: [{
                    selector: 'weui-actionsheet',
                    template: "\n        <div class=\"weui-mask\" [@visibility]=\"_visibility\" (click)=\"hide(true)\"></div>\n        <div class=\"weui-actionsheet\" [ngClass]=\"{'weui-actionsheet_toggle': _shownAnt && config.skin === 'ios'}\">\n            <div class=\"weui-actionsheet__title\" *ngIf=\"config.skin === 'ios' && config.title\">\n                <p class=\"weui-actionsheet__title-text\">{{config.title}}</p>\n            </div>\n            <div class=\"weui-actionsheet__menu\">\n                <div class=\"weui-actionsheet__cell\" *ngFor=\"let item of menus\" (click)=\"_onSelect(item)\">{{item.text}}</div>\n            </div>\n            <div class=\"weui-actionsheet__action\" *ngIf=\"config.skin === 'ios' && config.cancel\">\n                <div class=\"weui-actionsheet__cell\" (click)=\"hide()\">{{config.cancel}}</div>\n            </div>\n        </div>\n    ",
                    animations: [animations.trigger('visibility', [
                            animations.state('show', animations.style({ opacity: 1 })),
                            animations.state('hide', animations.style({ opacity: 0 })),
                            animations.transition('hide <=> show', [animations.animate(200)])
                        ])],
                    host: {
                        '[hidden]': '!_shown',
                        '[class.weui-skin_android]': 'config.skin === "android"'
                    }
                },] },
    ];
    /** @nocollapse */
    ActionSheetComponent.ctorParameters = function () { return [
        { type: ActionSheetConfig, },
    ]; };
    ActionSheetComponent.propDecorators = {
        "config": [{ type: core.Input },],
        "menus": [{ type: core.Input },],
        "close": [{ type: core.Output },],
    };
    return ActionSheetComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * @abstract
 */
var BaseService = /** @class */ (function () {
    function BaseService(resolver, applicationRef, injector) {
        this.resolver = resolver;
        this.applicationRef = applicationRef;
        this.injector = injector;
        this.list = [];
    }
    /**
     * 销毁
     *
     * @param component 下标（从0开始或组件引用对象），或不指定时，销毁最新一个
     */
    /**
     * 销毁
     *
     * @param {?=} component 下标（从0开始或组件引用对象），或不指定时，销毁最新一个
     * @return {?}
     */
    BaseService.prototype.destroy = /**
     * 销毁
     *
     * @param {?=} component 下标（从0开始或组件引用对象），或不指定时，销毁最新一个
     * @return {?}
     */
    function (component) {
        if (typeof component === 'number')
            component = this.list[/** @type {?} */ (component)];
        if (!component)
            component = this.list.pop();
        if (component)
            (/** @type {?} */ (component)).destroy();
    };
    /**
     * 销毁所有
     */
    /**
     * 销毁所有
     * @return {?}
     */
    BaseService.prototype.destroyAll = /**
     * 销毁所有
     * @return {?}
     */
    function () {
        for (var _i = 0, _a = this.list; _i < _a.length; _i++) {
            var component = _a[_i];
            this.destroy(component);
        }
    };
    /** 动态构建组件 */
    /**
     * 动态构建组件
     * @template T
     * @param {?} component
     * @return {?}
     */
    BaseService.prototype.build = /**
     * 动态构建组件
     * @template T
     * @param {?} component
     * @return {?}
     */
    function (component) {
        var _this = this;
        var /** @type {?} */ componentFactory = this.resolver.resolveComponentFactory(component);
        var /** @type {?} */ componentRef = componentFactory.create(this.injector);
        this.list.push(componentRef);
        var /** @type {?} */ componentRootNode = /** @type {?} */ ((/** @type {?} */ (componentRef.hostView)).rootNodes[0]);
        this.applicationRef.attachView(componentRef.hostView);
        componentRef.onDestroy(function () {
            _this.applicationRef.detachView(componentRef.hostView);
        });
        document.body.appendChild(componentRootNode);
        return componentRef;
    };
    return BaseService;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
var ActionSheetService = /** @class */ (function (_super) {
    __extends(ActionSheetService, _super);
    function ActionSheetService(resolver, applicationRef, injector) {
        return _super.call(this, resolver, applicationRef, injector) || this;
    }
    /**
     * 创建一个弹出式菜单并显示
     *
     * @param menus 菜单内容
     * @param config 配置性（可选）
     * @returns 可订阅来获取结果
     */
    /**
     * 创建一个弹出式菜单并显示
     *
     * @param {?} menus 菜单内容
     * @param {?=} config 配置性（可选）
     * @return {?} 可订阅来获取结果
     */
    ActionSheetService.prototype.show = /**
     * 创建一个弹出式菜单并显示
     *
     * @param {?} menus 菜单内容
     * @param {?=} config 配置性（可选）
     * @return {?} 可订阅来获取结果
     */
    function (menus, config) {
        var _this = this;
        if (config === void 0) { config = {}; }
        var /** @type {?} */ componentRef = this.build(ActionSheetComponent);
        componentRef.instance.menus = menus;
        if (config)
            componentRef.instance.config = config;
        componentRef.instance.close.subscribe(function () {
            setTimeout(function () {
                _this.destroy(componentRef);
            }, 100);
        });
        return componentRef.instance.show();
    };
    ActionSheetService.decorators = [
        { type: core.Injectable },
    ];
    /** @nocollapse */
    ActionSheetService.ctorParameters = function () { return [
        { type: core.ComponentFactoryResolver, },
        { type: core.ApplicationRef, },
        { type: core.Injector, },
    ]; };
    return ActionSheetService;
}(BaseService));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
var ActionSheetModule = /** @class */ (function () {
    function ActionSheetModule() {
    }
    /**
     * @return {?}
     */
    ActionSheetModule.forRoot = /**
     * @return {?}
     */
    function () {
        return { ngModule: ActionSheetModule, providers: [ActionSheetConfig] };
    };
    ActionSheetModule.decorators = [
        { type: core.NgModule, args: [{
                    imports: [common.CommonModule],
                    declarations: [ActionSheetComponent],
                    exports: [ActionSheetComponent],
                    providers: [ActionSheetService],
                    entryComponents: [ActionSheetComponent]
                },] },
    ];
    /** @nocollapse */
    ActionSheetModule.ctorParameters = function () { return []; };
    return ActionSheetModule;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
var MaskComponent = /** @class */ (function () {
    function MaskComponent() {
        /**
         * 点击是否允许关闭（默认：`false`）
         */
        this.backdrop = false;
        /**
         * 内容方向（默认：`vertical`）
         * + `top`: 顶部居中
         * + `bottom`: 底部居中
         * + `vertical-left`: 垂直居左
         * + `vertical`: 垂直居中
         * + `vertical-right`: 垂直居右
         * + `none`: 无
         */
        this.placement = 'vertical';
        /**
         * 内容背景色
         */
        this.bg = '';
        /**
         * 内容为Loading效果（默认：`false`）
         */
        this.loading = false;
        /**
         * 关闭回调
         */
        this.close = new core.EventEmitter();
        this._shown = false;
    }
    /**
     * 显示，并返回一个Observable
     */
    /**
     * 显示，并返回一个Observable
     * @return {?}
     */
    MaskComponent.prototype.show = /**
     * 显示，并返回一个Observable
     * @return {?}
     */
    function () {
        var _this = this;
        setTimeout(function () {
            _this._shown = true;
        });
        return Observable.Observable.create(function (observer) {
            _this.observer = observer;
        });
    };
    /**
     * 隐藏
     *
     * @param is_backdrop 是否手动点击关闭（默认：false）
     */
    /**
     * 隐藏
     *
     * @param {?=} is_backdrop 是否手动点击关闭（默认：false）
     * @return {?}
     */
    MaskComponent.prototype.hide = /**
     * 隐藏
     *
     * @param {?=} is_backdrop 是否手动点击关闭（默认：false）
     * @return {?}
     */
    function (is_backdrop) {
        if (is_backdrop === void 0) { is_backdrop = false; }
        if (is_backdrop === true && this.backdrop === false)
            return false;
        this._shown = false;
        this.close.emit();
    };
    /**
     * @return {?}
     */
    MaskComponent.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        if (this.observer && this.observer instanceof Subscription.Subscription) {
            (/** @type {?} */ (this.observer)).unsubscribe();
        }
    };
    MaskComponent.decorators = [
        { type: core.Component, args: [{
                    selector: 'weui-mask',
                    template: "\n    <div class=\"weui-mask\" [ngClass]=\"{'weui-mask__visible': _shown }\" (click)=\"hide(true)\">\n        <div class=\"weui-mask__content\" [ngClass]=\"placement !== 'none' ? 'weui-mask__' + placement : ''\">\n            <div [ngStyle]=\"{'background-color':bg}\">\n                <div *ngIf=\"loading\"><i class=\"weui-loading weui-icon_toast\"></i></div>\n                <ng-content></ng-content>\n            </div>\n        </div>\n    </div>"
                },] },
    ];
    /** @nocollapse */
    MaskComponent.ctorParameters = function () { return []; };
    MaskComponent.propDecorators = {
        "backdrop": [{ type: core.Input },],
        "placement": [{ type: core.Input },],
        "bg": [{ type: core.Input },],
        "loading": [{ type: core.Input },],
        "close": [{ type: core.Output },],
    };
    return MaskComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
var MaskModule = /** @class */ (function () {
    function MaskModule() {
    }
    /**
     * @return {?}
     */
    MaskModule.forRoot = /**
     * @return {?}
     */
    function () {
        return { ngModule: MaskModule, providers: [] };
    };
    MaskModule.decorators = [
        { type: core.NgModule, args: [{
                    imports: [common.CommonModule],
                    declarations: [MaskComponent],
                    exports: [MaskComponent],
                    entryComponents: [MaskComponent]
                },] },
    ];
    /** @nocollapse */
    MaskModule.ctorParameters = function () { return []; };
    return MaskModule;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
var DialogConfig = /** @class */ (function () {
    function DialogConfig() {
        /**
         * 对话框类型，默认：`default`
         * default：默认文本或HTML格式
         * prompt：可输入对话框
         */
        this.type = 'default';
        /**
         * 样式，默认：`auto`
         */
        this.skin = 'auto';
        /**
         * 取消，返回false，默认：`取消`
         */
        this.cancel = '取消';
        /**
         * 取消按钮类型，默认：`default`
         */
        this.cancelType = 'default';
        /**
         * 确认，返回true，默认：`确认`
         */
        this.confirm = '确认';
        /**
         * 确认按钮类型，默认：`primary`
         */
        this.confirmType = 'primary';
        /**
         * 允许点击背景关闭，默认：`false`
         */
        this.backdrop = false;
    }
    DialogConfig.decorators = [
        { type: core.Injectable },
    ];
    /** @nocollapse */
    DialogConfig.ctorParameters = function () { return []; };
    return DialogConfig;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * 对话框，依赖于 `weui-textarea`、`weui-slider`
 *
 * 关于 `input==='prompt'` 若干细节：
 *  + 对话框内放表单在weui的表现并不是很如意，因此，在对话框增加 `.weui-dialog__prompt` 样式类名，请自行针对性进行一些样式的覆盖，`ngx-dialog` 不提供任何样式的修正。
 *  + 对于录入型表单其校验机制全都是依赖于正则，默认情况下内置 `email`、`url` 两种表单类型的正则。
 */
var DialogComponent = /** @class */ (function () {
    function DialogComponent(DEF) {
        this.DEF = DEF;
        /**
         * 打开动画结束后回调（唯一参数：对话框实例对象）
         */
        this.open = new core.EventEmitter();
        /**
         * 关闭动画开始时回调（唯一参数：对话框实例对象）
         */
        this.close = new core.EventEmitter();
        this._shown = false;
        this._prompError = false;
    }
    Object.defineProperty(DialogComponent.prototype, "config", {
        get: /**
         * @return {?}
         */
        function () {
            return this._config;
        },
        set: /**
         * 对话框配置项
         * @param {?} value
         * @return {?}
         */
        function (value) {
            var _this = this;
            var /** @type {?} */ config = Object.assign({
                backdrop: false
            }, this.DEF, value);
            if (config.skin === 'auto') {
                config.skin = isAndroid() ? 'android' : 'ios';
            }
            // 重组btns
            if (!config.btns) {
                config.btns = [];
                if (config.cancel) {
                    config.btns.push({ text: config.cancel, type: config.cancelType, value: false });
                }
                if (config.confirm) {
                    config.btns.push({ text: config.confirm, type: config.confirmType, value: true });
                }
            }
            // prompt
            if (config.type === 'prompt') {
                // 一些默认校验正则表达式
                if (!config.inputRegex) {
                    switch (config.input) {
                        case 'email':
                            config.inputRegex = /^(([^<>()\[\]\\.,;:\s@"]+(\.[^<>()\[\]\\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/;
                            if (!config.inputError)
                                config.inputError = '邮箱格式不正确';
                            break;
                        case 'url':
                            config.inputRegex = /^(https?:\/\/)?([\da-z\.-]+)\.([a-z\.]{2,6})([\/\w \.-]*)*\/?$/;
                            if (!config.inputError)
                                config.inputError = '网址格式不正确';
                            break;
                    }
                }
                config.inputOptions = Object.assign([], config.inputOptions);
                config.inputAttributes = Object.assign({
                    maxlength: null,
                    min: 0,
                    max: 100,
                    step: 1
                }, config.inputAttributes);
                // 默认值
                var /** @type {?} */ defaultValue = config.inputValue;
                if (config.input === 'checkbox' && !Array.isArray(config.inputValue)) {
                    defaultValue = typeof defaultValue !== 'undefined' ? [defaultValue] : [];
                }
                config.inputValue = defaultValue || '';
                this._promptData = config.inputValue;
                if (this._promptData) {
                    this._config = config;
                    this.promptCheck();
                }
                setTimeout(function () {
                    _this.setFocus();
                }, 100);
            }
            this._config = config;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    DialogComponent.prototype.promptCheck = /**
     * @return {?}
     */
    function () {
        if (this.config.inputRequired === true) {
            if (this.config.input === 'checkbox' && this._promptData.length === 0) {
                this._prompError = true;
                return false;
            }
            if (!this._promptData) {
                this._prompError = true;
                return false;
            }
        }
        if (this.config.inputRegex && !this.config.inputRegex.test(this._promptData.toString())) {
            this._prompError = true;
            return false;
        }
        this._prompError = false;
        return true;
    };
    /**
     * @return {?}
     */
    DialogComponent.prototype.setFocus = /**
     * @return {?}
     */
    function () {
        var /** @type {?} */ containerEl = this.container.nativeElement;
        var /** @type {?} */ firstFormEl = null;
        if (this.config.type === 'prompt') {
            firstFormEl = containerEl.querySelector('input, textarea, select');
        }
        else {
            firstFormEl = containerEl.querySelector('.weui-dialog__btn_primary');
        }
        if (firstFormEl)
            firstFormEl.focus();
    };
    /**
     * @return {?}
     */
    DialogComponent.prototype._chanage = /**
     * @return {?}
     */
    function () {
        this.promptCheck();
    };
    /**
     * @param {?} event
     * @return {?}
     */
    DialogComponent.prototype._keyup = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        if (event.keyCode === 13) {
            this._onSelect();
        }
    };
    /**
     * 显示，组件载入页面后并不会显示，显示调用 `show()` 并订阅结果。
     *
     * @returns 当 `type==='prompt'` 时会多一 `result` 属性表示结果值
     */
    /**
     * 显示，组件载入页面后并不会显示，显示调用 `show()` 并订阅结果。
     *
     * @return {?} 当 `type==='prompt'` 时会多一 `result` 属性表示结果值
     */
    DialogComponent.prototype.show = /**
     * 显示，组件载入页面后并不会显示，显示调用 `show()` 并订阅结果。
     *
     * @return {?} 当 `type==='prompt'` 时会多一 `result` 属性表示结果值
     */
    function () {
        var _this = this;
        this._shown = true;
        this._prompError = false;
        // 模拟动画结束后回调
        setTimeout(function () {
            _this.open.emit(_this);
        }, 300);
        return Observable.Observable.create(function (observer) {
            _this.observer = observer;
        });
    };
    /**
     * 隐藏
     *
     * @param is_backdrop 是否从背景上点击
     */
    /**
     * 隐藏
     *
     * @param {?=} is_backdrop 是否从背景上点击
     * @return {?}
     */
    DialogComponent.prototype.hide = /**
     * 隐藏
     *
     * @param {?=} is_backdrop 是否从背景上点击
     * @return {?}
     */
    function (is_backdrop) {
        if (is_backdrop === void 0) { is_backdrop = false; }
        if (is_backdrop === true && this.config.backdrop === false)
            return false;
        this._shown = false;
        this.close.emit(this);
    };
    /**
     * @param {?=} menu
     * @return {?}
     */
    DialogComponent.prototype._onSelect = /**
     * @param {?=} menu
     * @return {?}
     */
    function (menu) {
        // 未指定时查找 `value===true` 的按钮
        if (!menu && this.config.btns.length > 0) {
            menu = this.config.btns.find(function (w) { return w.value === true; });
        }
        var /** @type {?} */ ret = menu;
        if (menu.value === true && this._config.type === 'prompt') {
            if (!this.promptCheck())
                return false;
            ret.result = this._promptData;
        }
        this.observer.next(ret);
        this.observer.complete();
        this.hide();
        return false;
    };
    /**
     * @return {?}
     */
    DialogComponent.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        if (this.observer && this.observer instanceof Subscription.Subscription) {
            (/** @type {?} */ (this.observer)).unsubscribe();
        }
    };
    DialogComponent.decorators = [
        { type: core.Component, args: [{
                    selector: 'weui-dialog',
                    template: "\n        <div class=\"weui-mask\" [ngClass]=\"{'weui-mask__in': _shown}\" (click)=\"hide(true)\"></div>\n        <div class=\"weui-dialog\" [ngClass]=\"{'weui-dialog__in': _shown, 'weui-skin_android': config.skin === 'android', 'weui-dialog__prompt': config.type === 'prompt'}\" #container>\n            <div class=\"weui-dialog__hd\" *ngIf=\"config.title\"><strong class=\"weui-dialog__title\">{{config.title}}</strong></div>\n            <div class=\"weui-dialog__bd\" *ngIf=\"config.content\" [innerHTML]=\"config.content\"></div>\n            <div class=\"weui-cells\" *ngIf=\"config.type === 'prompt' && _shown\">\n                <ng-container [ngSwitch]=\"config.input\">\n                    <div *ngSwitchCase=\"'textarea'\" class=\"weui-cell\" [ngClass]=\"{'weui-cell_warn': _prompError}\">\n                        <div class=\"weui-cell__bd\">\n                            <textarea class=\"weui-textarea\" placeholder=\"{{config.inputPlaceholder}}\"\n                                [(ngModel)]=\"_promptData\" name=\"_promptData\" (ngModelChange)=\"_chanage()\"\n                                weui-textarea weui-cn=\"{{config.inputAttributes.cn}}\" [maxlength]=\"config.inputAttributes.maxlength\"></textarea>\n                        </div>\n                    </div>\n                    <div *ngSwitchCase=\"'select'\" class=\"weui-cell weui-cell_select\">\n                        <div class=\"weui-cell__bd\">\n                            <select class=\"weui-select\" [(ngModel)]=\"_promptData\" name=\"_promptData\" (ngModelChange)=\"_chanage()\">\n                                <option *ngFor=\"let i of config.inputOptions\" [ngValue]=\"i\">{{i.text}}</option>\n                            </select>\n                        </div>\n                    </div>\n                    <div *ngSwitchCase=\"'radio'\" class=\"weui-cells_radio\">\n                        <label class=\"weui-cell weui-check__label\" *ngFor=\"let i of config.inputOptions\">\n                            <div class=\"weui-cell__bd\">\n                                <p>{{i.text}}</p>\n                            </div>\n                            <div class=\"weui-cell__ft\">\n                                <input type=\"radio\" (click)=\"_promptData=i\" [checked]=\"i==_promptData\" (change)=\"_chanage()\" class=\"weui-check\">\n                                <span class=\"weui-icon-checked\"></span>\n                            </div>\n                        </label>\n                    </div>\n                    <div *ngSwitchCase=\"'checkbox'\" class=\"weui-cells_checkbox\">\n                        <label class=\"weui-cell weui-check__label\" *ngFor=\"let i of config.inputOptions\">\n                            <div class=\"weui-cell__hd\">\n                                <input type=\"checkbox\" class=\"weui-check\" (change)=\"_chanage()\"\n                                    [weui-checklist]=\"_promptData\" [weui-value]=\"i\" name=\"_promptData\">\n                                <i class=\"weui-icon-checked\"></i>\n                            </div>\n                            <div class=\"weui-cell__bd\">\n                                <p>{{i.text}}</p>\n                            </div>\n                        </label>\n                    </div>\n                    <div *ngSwitchCase=\"'range'\" class=\"weui-slider-box\" [(ngModel)]=\"_promptData\" name=\"_promptData\"\n                        weui-slider weui-min=\"{{config.inputAttributes.min}}\" weui-max=\"{{config.inputAttributes.max}}\" weui-step=\"{{config.inputAttributes.step}}\">\n                        <div class=\"weui-slider\">\n                            <div class=\"weui-slider__inner\">\n                                <div class=\"weui-slider__track\"></div>\n                                <div class=\"weui-slider__handler\"></div>\n                            </div>\n                        </div>\n                        <div class=\"weui-slider-box__value\">{{_promptData}}</div>\n                    </div>\n                    <div *ngSwitchDefault class=\"weui-cell\" [ngClass]=\"{'weui-cell_warn': _prompError}\">\n                        <div class=\"weui-cell__bd\">\n                            <input type=\"{{config.input}}\" class=\"weui-input\"\n                                placeholder=\"{{config.inputPlaceholder}}\" [(ngModel)]=\"_promptData\" name=\"_promptData\"\n                                [maxlength]=\"config.inputAttributes.maxlength\"\n                                (ngModelChange)=\"_chanage()\" (keyup)=\"_keyup($event)\">\n                        </div>\n                        <div class=\"weui-cell__ft\"><i class=\"weui-icon-warn\" *ngIf=\"_prompError\"></i></div>\n                    </div>\n                </ng-container>\n            </div>\n            <div class=\"weui-dialog__error\" *ngIf=\"_prompError\">{{config.inputError}}</div>\n            <div class=\"weui-dialog__ft\">\n                <a href=\"#\" *ngFor=\"let item of config.btns\"\n                    class=\"weui-dialog__btn weui-dialog__btn_{{item.type}}\"\n                    (click)=\"_onSelect(item)\">{{item.text}}</a>\n            </div>\n        </div>\n    "
                },] },
    ];
    /** @nocollapse */
    DialogComponent.ctorParameters = function () { return [
        { type: DialogConfig, },
    ]; };
    DialogComponent.propDecorators = {
        "config": [{ type: core.Input },],
        "open": [{ type: core.Output },],
        "close": [{ type: core.Output },],
        "container": [{ type: core.ViewChild, args: ['container',] },],
    };
    return DialogComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
var DialogService = /** @class */ (function (_super) {
    __extends(DialogService, _super);
    function DialogService(resolver, applicationRef, injector) {
        return _super.call(this, resolver, applicationRef, injector) || this;
    }
    /**
     * 创建一个对话框并显示
     *
     * @param data 对话框配置项
     * @returns 可订阅来获取结果
     */
    /**
     * 创建一个对话框并显示
     *
     * @param {?} data 对话框配置项
     * @return {?} 可订阅来获取结果
     */
    DialogService.prototype.show = /**
     * 创建一个对话框并显示
     *
     * @param {?} data 对话框配置项
     * @return {?} 可订阅来获取结果
     */
    function (data) {
        var _this = this;
        var /** @type {?} */ componentRef = this.build(DialogComponent);
        componentRef.instance.config = data;
        componentRef.instance.close.subscribe(function () {
            setTimeout(function () {
                _this.destroy(componentRef);
            }, 300);
        });
        return componentRef.instance.show();
    };
    DialogService.decorators = [
        { type: core.Injectable },
    ];
    /** @nocollapse */
    DialogService.ctorParameters = function () { return [
        { type: core.ComponentFactoryResolver, },
        { type: core.ApplicationRef, },
        { type: core.Injector, },
    ]; };
    return DialogService;
}(BaseService));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
var DialogModule = /** @class */ (function () {
    function DialogModule() {
    }
    /**
     * @return {?}
     */
    DialogModule.forRoot = /**
     * @return {?}
     */
    function () {
        return { ngModule: DialogModule, providers: [DialogConfig] };
    };
    DialogModule.decorators = [
        { type: core.NgModule, args: [{
                    imports: [common.CommonModule, forms.FormsModule, MaskModule, FormModule, SliderModule],
                    declarations: [DialogComponent],
                    exports: [DialogComponent],
                    providers: [DialogService],
                    entryComponents: [DialogComponent]
                },] },
    ];
    /** @nocollapse */
    DialogModule.ctorParameters = function () { return []; };
    return DialogModule;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
var LoadmoreConfig = /** @class */ (function () {
    function LoadmoreConfig() {
        /**
         * 类型，默认：`loading`
         */
        this.type = 'loading';
        /**
         * 当type=='loading'时显示的文本，默认：`正在加载`
         */
        this.loadingText = '正在加载';
        /**
         * 当type=='line'时显示的文本，默认：`暂无数据`
         */
        this.lineText = '暂无数据';
    }
    LoadmoreConfig.decorators = [
        { type: core.Injectable },
    ];
    /** @nocollapse */
    LoadmoreConfig.ctorParameters = function () { return []; };
    return LoadmoreConfig;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
var LoadmoreComponent = /** @class */ (function () {
    function LoadmoreComponent(DEF) {
        /**
         * 类型，默认：`loading`
         */
        this.type = 'loading';
        /**
         * 当 `type==='loading'` 时显示的文本，默认：`正在加载`
         */
        this.loadingText = '正在加载';
        /**
         * 当 `type==='line'` 时显示的文本，默认：`暂无数据`
         */
        this.lineText = '暂无数据';
        Object.assign(this, DEF);
    }
    LoadmoreComponent.decorators = [
        { type: core.Component, args: [{
                    selector: 'weui-loadmore',
                    template: "\n        <div class=\"weui-loadmore\" [ngClass]=\"{\n            'weui-loadmore_line': type!=='loading',\n            'weui-loadmore_dot': type==='dot'\n        }\">\n            <i class=\"weui-loading\" *ngIf=\"type==='loading'\"></i>\n            <span class=\"weui-loadmore__tips\">{{type==='dot'?'':type==='line'?lineText:loadingText}}</span>\n        </div>\n    "
                },] },
    ];
    /** @nocollapse */
    LoadmoreComponent.ctorParameters = function () { return [
        { type: LoadmoreConfig, },
    ]; };
    LoadmoreComponent.propDecorators = {
        "type": [{ type: core.Input },],
        "loadingText": [{ type: core.Input },],
        "lineText": [{ type: core.Input },],
    };
    return LoadmoreComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
var LoadmoreModule = /** @class */ (function () {
    function LoadmoreModule() {
    }
    /**
     * @return {?}
     */
    LoadmoreModule.forRoot = /**
     * @return {?}
     */
    function () {
        return { ngModule: LoadmoreModule, providers: [LoadmoreConfig] };
    };
    LoadmoreModule.decorators = [
        { type: core.NgModule, args: [{
                    imports: [common.CommonModule],
                    declarations: [LoadmoreComponent],
                    exports: [LoadmoreComponent],
                    entryComponents: [LoadmoreComponent]
                },] },
    ];
    /** @nocollapse */
    LoadmoreModule.ctorParameters = function () { return []; };
    return LoadmoreModule;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
var ProgressComponent = /** @class */ (function () {
    function ProgressComponent() {
        this._value = 0;
        /**
         * 是否允许取消，默认：`true`
         */
        this.canCancel = true;
        /**
         * 取消回调
         */
        this.cancel = new core.EventEmitter();
    }
    Object.defineProperty(ProgressComponent.prototype, "value", {
        set: /**
         * 默认进度值，取值范围：0-100（单位：%）
         * @param {?} d
         * @return {?}
         */
        function (d) {
            this._value = Math.max(0, Math.min(100, d));
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    ProgressComponent.prototype._onCancel = /**
     * @return {?}
     */
    function () {
        if (this.canCancel)
            this.cancel.emit();
        return false;
    };
    ProgressComponent.decorators = [
        { type: core.Component, args: [{
                    selector: 'weui-progress',
                    template: "\n        <div class=\"weui-progress\">\n            <div class=\"weui-progress__bar\">\n                <div class=\"weui-progress__inner-bar\" [style.width]=\"_value + '%'\"></div>\n            </div>\n            <a href=\"#\" class=\"weui-progress__opr\" *ngIf=\"canCancel\" (click)=\"_onCancel()\">\n                <i class=\"weui-icon-cancel\"></i>\n            </a>\n        </div>\n    "
                },] },
    ];
    /** @nocollapse */
    ProgressComponent.ctorParameters = function () { return []; };
    ProgressComponent.propDecorators = {
        "value": [{ type: core.Input },],
        "canCancel": [{ type: core.Input },],
        "cancel": [{ type: core.Output },],
    };
    return ProgressComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
var ProgressModule = /** @class */ (function () {
    function ProgressModule() {
    }
    /**
     * @return {?}
     */
    ProgressModule.forRoot = /**
     * @return {?}
     */
    function () {
        return { ngModule: ProgressModule, providers: [] };
    };
    ProgressModule.decorators = [
        { type: core.NgModule, args: [{
                    imports: [common.CommonModule],
                    declarations: [ProgressComponent],
                    exports: [ProgressComponent],
                    entryComponents: [ProgressComponent]
                },] },
    ];
    /** @nocollapse */
    ProgressModule.ctorParameters = function () { return []; };
    return ProgressModule;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * 数据对象
 * @record
 */

var GalleryComponent = /** @class */ (function () {
    function GalleryComponent() {
        /**
         * 是否允许删除，默认：`true`
         */
        this.canDelete = true;
        /**
         * 删除回调
         */
        this.delete = new core.EventEmitter();
        /**
         * 隐藏回调
         */
        this.hide = new core.EventEmitter();
        /**
         * 标记是否显示，支持双向绑定
         */
        this.show = false;
        this.showChange = new core.EventEmitter();
        this._showd = false;
    }
    Object.defineProperty(GalleryComponent.prototype, "_visibility", {
        get: /**
         * @return {?}
         */
        function () {
            return this.show ? 'show' : 'hide';
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    GalleryComponent.prototype._antStart = /**
     * @return {?}
     */
    function () { if (this.show)
        this._showd = this.show; };
    /**
     * @return {?}
     */
    GalleryComponent.prototype._antDone = /**
     * @return {?}
     */
    function () { this._showd = this.show; };
    /**
     * @param {?} item
     * @return {?}
     */
    GalleryComponent.prototype._onDel = /**
     * @param {?} item
     * @return {?}
     */
    function (item) {
        if (this.canDelete) {
            this.delete.emit(item);
            this._onHide();
        }
        return false;
    };
    /**
     * @return {?}
     */
    GalleryComponent.prototype._onHide = /**
     * @return {?}
     */
    function () {
        this.show = false;
        this.showChange.emit(this.show);
        this.hide.emit();
    };
    /**
     * @param {?} changes
     * @return {?}
     */
    GalleryComponent.prototype.ngOnChanges = /**
     * @param {?} changes
     * @return {?}
     */
    function (changes) {
        if ('imgs' in changes)
            this.parseImgs();
    };
    /**
     * @return {?}
     */
    GalleryComponent.prototype.parseImgs = /**
     * @return {?}
     */
    function () {
        var /** @type {?} */ imgs = this.imgs;
        if (Array.isArray(imgs)) {
            if (imgs.length > 0) {
                if (typeof imgs[0] === 'string') {
                    imgs = (/** @type {?} */ (imgs)).map(function (url) {
                        return { url: url };
                    });
                }
                else {
                    imgs = (/** @type {?} */ (imgs)).map(function (item) {
                        if (item.file)
                            item.url = genImageUrl(item.file);
                        return item;
                    });
                }
            }
        }
        else {
            if (typeof imgs === 'string')
                imgs = [{ url: imgs }];
            else {
                var /** @type {?} */ imgUrl = genImageUrl(imgs);
                if (imgUrl)
                    imgs = [{ url: imgUrl }];
            }
        }
        // todo: 永远只返回一个
        // 针对未来可能直接上下个
        this._imgs = Object.assign([], imgs && (/** @type {?} */ (imgs)).length > 0 ? imgs.slice(0, 1) : []);
    };
    GalleryComponent.decorators = [
        { type: core.Component, args: [{
                    selector: 'weui-gallery',
                    template: "\n        <div *ngIf=\"_imgs\" class=\"weui-galleries\">\n            <ng-template ngFor let-item [ngForOf]=\"_imgs\">\n                <div class=\"weui-gallery\"\n                    [ngStyle]=\"{'display': _showd ? 'block' : 'none'}\"\n                    [@visibility]=\"_visibility\"\n                    (@visibility.start)=\"_antStart($event)\"\n                    (@visibility.done)=\"_antDone($event)\"\n                    (click)=\"_onHide()\">\n                    <span class=\"weui-gallery__img\"\n                        [ngStyle]=\"{ 'background-image': 'url(' + item?.url + ')'}\"></span>\n                    <div class=\"weui-gallery__opr\" *ngIf=\"canDelete\">\n                        <a href=\"#\" class=\"weui-gallery__del\" (click)=\"_onDel(item)\">\n                            <i class=\"weui-icon-delete weui-icon_gallery-delete\"></i>\n                        </a>\n                    </div>\n                </div>\n            </ng-template>\n        </div>\n    ",
                    animations: [animations.trigger('visibility', [
                            animations.state('show', animations.style({ opacity: 1 })),
                            animations.state('hide', animations.style({ opacity: 0 })),
                            animations.transition('hide <=> show', [animations.animate(200)])
                        ])]
                },] },
    ];
    /** @nocollapse */
    GalleryComponent.ctorParameters = function () { return []; };
    GalleryComponent.propDecorators = {
        "imgs": [{ type: core.Input },],
        "canDelete": [{ type: core.Input },],
        "delete": [{ type: core.Output },],
        "hide": [{ type: core.Output },],
        "show": [{ type: core.Input },],
        "showChange": [{ type: core.Output },],
    };
    return GalleryComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
var GalleryModule = /** @class */ (function () {
    function GalleryModule() {
    }
    /**
     * @return {?}
     */
    GalleryModule.forRoot = /**
     * @return {?}
     */
    function () {
        return { ngModule: GalleryModule, providers: [] };
    };
    GalleryModule.decorators = [
        { type: core.NgModule, args: [{
                    imports: [common.CommonModule],
                    declarations: [GalleryComponent],
                    exports: [GalleryComponent],
                    entryComponents: [GalleryComponent]
                },] },
    ];
    /** @nocollapse */
    GalleryModule.ctorParameters = function () { return []; };
    return GalleryModule;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
var PickerConfig = /** @class */ (function () {
    function PickerConfig() {
        /**
         * 取消按钮文本，默认：`取消`
         */
        this.cancel = '取消';
        /**
         * 确定按钮文本，默认：`确定`
         */
        this.confirm = '确定';
        /**
         * 允许点击背景关闭，默认：`true`
         */
        this.backdrop = true;
    }
    PickerConfig.decorators = [
        { type: core.Injectable },
    ];
    /** @nocollapse */
    PickerConfig.ctorParameters = function () { return []; };
    return PickerConfig;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
var PickerComponent = /** @class */ (function () {
    function PickerComponent(el, DEF) {
        this.el = el;
        this.DEF = DEF;
        this._text = '';
        this.disabled = false;
        /**
         * 确认后回调当前选择数据（包括已选面板所有数据）
         *
         * `{ value: '10000', items: [ {}, {}, {} ] }`
         */
        this.change = new core.EventEmitter();
        /**
         * 列变更时回调
         */
        this.groupChange = new core.EventEmitter();
        /**
         * 取消后回调
         */
        this.cancel = new core.EventEmitter();
        /**
         * 显示时回调
         */
        this.show = new core.EventEmitter();
        /**
         * 隐藏后回调
         */
        this.hide = new core.EventEmitter();
        this._showP = false;
        this._shown = false;
        this.onChange = Function.prototype;
        this.onTouched = Function.prototype;
    }
    Object.defineProperty(PickerComponent.prototype, "defaultSelect", {
        set: /**
         * 当前默认位置，数组的长度必须等同于 groups 长度
         * @param {?} d
         * @return {?}
         */
        function (d) {
            if (d)
                this._selected = d;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PickerComponent.prototype, "groups", {
        set: /**
         * 多列数据，以数组的长度来决定几列数据
         * 支持string[]单列数组，单纯只是为了方便
         * @param {?} d
         * @return {?}
         */
        function (d) {
            if (!d)
                throw new Error('无效数据源');
            if (d.length > 0) {
                if (typeof d[0] === 'string') {
                    d = [
                        (/** @type {?} */ (d)).map(function (v) {
                            return { label: v, value: v };
                        })
                    ];
                }
            }
            this._groups = /** @type {?} */ (d);
            this._selected = this._selected ? this._selected : Array(d.length).fill(0);
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    PickerComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        if (!this.options)
            this.parseOptions();
    };
    /**
     * @param {?} fh
     * @return {?}
     */
    PickerComponent.prototype._onHide = /**
     * @param {?} fh
     * @return {?}
     */
    function (fh) {
        var _this = this;
        if (!fh && !this.options.backdrop)
            return false;
        this._shown = false;
        setTimeout(function () {
            _this._showP = false;
            _this.hide.emit();
        }, 300);
        return this;
    };
    /**
     * @return {?}
     */
    PickerComponent.prototype._onShow = /**
     * @return {?}
     */
    function () {
        if (this.disabled)
            return false;
        this._showP = true;
        this._shown = true;
        this.show.emit();
        return this;
    };
    /**
     * @return {?}
     */
    PickerComponent.prototype.parseOptions = /**
     * @return {?}
     */
    function () {
        this.options = Object.assign(/** @type {?} */ ({
            type: 'form',
            cancel: '取消',
            confirm: '确定',
            backdrop: true,
            gruopCount: null,
            separator: ' '
        }), this.DEF, this.options);
    };
    /**
     * @return {?}
     */
    PickerComponent.prototype.getSelecteItem = /**
     * @return {?}
     */
    function () {
        var _this = this;
        var /** @type {?} */ res = [];
        this._groups.forEach(function (items, idx) {
            var /** @type {?} */ item = items[_this._selected[idx]];
            if (item)
                res.push(item);
        });
        return res;
    };
    /**
     * @param {?=} res
     * @return {?}
     */
    PickerComponent.prototype._setText = /**
     * @param {?=} res
     * @return {?}
     */
    function (res) {
        if (res === void 0) { res = null; }
        if (res === null)
            res = this.getSelecteItem();
        if (res.length > 0)
            this._text = res.map(function (i) { return i.label || i.value; }).join(this.options.separator);
        return this;
    };
    // 根据_value解析成相应值位置
    /**
     * @return {?}
     */
    PickerComponent.prototype._setDefault = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this._selected = [];
        this._groups.forEach(function (items) {
            var /** @type {?} */ idx = items.findIndex(function (i) { return i.value === _this._value; });
            if (idx <= -1)
                idx = 0;
            _this._selected.push(idx);
        });
        return this;
    };
    /**
     * @param {?} data
     * @param {?} groupIndex
     * @return {?}
     */
    PickerComponent.prototype._onGroupChange = /**
     * @param {?} data
     * @param {?} groupIndex
     * @return {?}
     */
    function (data, groupIndex) {
        this._selected[groupIndex] = data.index;
        this.groupChange.emit({ item: data.item, index: data.index, groupIndex: groupIndex });
    };
    /**
     * @return {?}
     */
    PickerComponent.prototype._onCancel = /**
     * @return {?}
     */
    function () {
        this.cancel.emit();
        this._onHide(true);
        return false;
    };
    /**
     * @return {?}
     */
    PickerComponent.prototype._onConfirm = /**
     * @return {?}
     */
    function () {
        var /** @type {?} */ res = this.getSelecteItem();
        this._setText(res);
        var /** @type {?} */ lastItem = res[res.length - 1] || {};
        var /** @type {?} */ val = lastItem.value || lastItem.label;
        this.onChange(val);
        this.onTouched();
        this.change.emit({ value: val, items: res });
        this._onHide(true);
        return false;
    };
    /**
     * @param {?} changes
     * @return {?}
     */
    PickerComponent.prototype.ngOnChanges = /**
     * @param {?} changes
     * @return {?}
     */
    function (changes) {
        if ('options' in changes) {
            this.parseOptions();
        }
    };
    /**
     * @return {?}
     */
    PickerComponent.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
    };
    /**
     * @param {?} value
     * @return {?}
     */
    PickerComponent.prototype.writeValue = /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        if (!value)
            this._text = '';
        if (value && value !== this._value) {
            this._value = value;
            // todo：当ngModel传递一个未列表中的值的情况 & 多列时数据对应问题
            this._setDefault()._setText();
        }
    };
    /**
     * @param {?} fn
     * @return {?}
     */
    PickerComponent.prototype.registerOnChange = /**
     * @param {?} fn
     * @return {?}
     */
    function (fn) { this.onChange = fn; };
    /**
     * @param {?} fn
     * @return {?}
     */
    PickerComponent.prototype.registerOnTouched = /**
     * @param {?} fn
     * @return {?}
     */
    function (fn) { this.onTouched = fn; };
    /**
     * @param {?} isDisabled
     * @return {?}
     */
    PickerComponent.prototype.setDisabledState = /**
     * @param {?} isDisabled
     * @return {?}
     */
    function (isDisabled) {
    };
    /**
     * @param {?} $event
     * @return {?}
     */
    PickerComponent.prototype._onFocus = /**
     * @param {?} $event
     * @return {?}
     */
    function ($event) {
        arguments[0].target.blur();
    };
    PickerComponent.decorators = [
        { type: core.Component, args: [{
                    selector: 'weui-picker',
                    template: "\n        <input type=\"text\" class=\"weui-input\" value=\"{{_text}}\" placeholder=\"{{placeholder}}\"\n            readonly=\"readonly\" (focus)=\"_onFocus($event)\"\n            (click)=\"_onShow()\" [disabled]=\"disabled\" *ngIf=\"options.type==='form'\">\n        <div [hidden]=\"!_showP\">\n            <div class=\"weui-mask\" (click)=\"_onHide(false)\"\n                [ngClass]=\"{'weui-animate-fade-in': _shown, 'weui-animate-fade-out': !_shown}\"></div>\n            <div class=\"weui-picker\"\n                [ngClass]=\"{'weui-animate-slide-up': _shown, 'weui-animate-slide-down': !_shown}\">\n                <div class=\"weui-picker__hd\">\n                    <a href=\"#\" class=\"weui-picker__action\" (click)=\"_onCancel()\">{{options.cancel}}</a>\n                    <a href=\"#\" class=\"weui-picker__action\" (click)=\"_onConfirm()\">{{options.confirm}}</a>\n                </div>\n                <div class=\"weui-picker__bd\">\n                    <weui-picker-group tappable\n                        *ngFor=\"let items of _groups; let i = index;\"\n                        [items]=\"items\"\n                        [defaultIndex]=\"_selected[i]\"\n                        groupIndex=\"{{i}}\" (change)=\"_onGroupChange($event, i)\"></weui-picker-group>\n                </div>\n            </div>\n        </div>\n    ",
                    providers: [{
                            provide: forms.NG_VALUE_ACCESSOR,
                            useExisting: core.forwardRef(function () { return PickerComponent; }),
                            multi: true
                        }]
                },] },
    ];
    /** @nocollapse */
    PickerComponent.ctorParameters = function () { return [
        { type: core.ElementRef, },
        { type: PickerConfig, },
    ]; };
    PickerComponent.propDecorators = {
        "options": [{ type: core.Input },],
        "defaultSelect": [{ type: core.Input },],
        "groups": [{ type: core.Input },],
        "placeholder": [{ type: core.Input },],
        "disabled": [{ type: core.Input },],
        "change": [{ type: core.Output },],
        "groupChange": [{ type: core.Output },],
        "cancel": [{ type: core.Output },],
        "show": [{ type: core.Output },],
        "hide": [{ type: core.Output },],
    };
    return PickerComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
var getWindowHeight = function () {
    return window.innerHeight;
};
/**
 * 多列选择器组
 */
var PickerGroupComponent = /** @class */ (function () {
    function PickerGroupComponent() {
        /**
         * 当前默认位置
         */
        this.defaultIndex = -1;
        /**
         * 变更回调
         */
        this.change = new core.EventEmitter();
        this.defaults = {
            offset: 3,
            // 列表初始化时的偏移量（列表初始化时，选项是聚焦在中间的，通过offset强制往上挪3项，以达到初始选项是为顶部的那项）
            rowHeight: 34,
            // 列表每一行的高度
            bodyHeight: 7 * 34,
            // picker的高度，用于辅助点击滚动的计算
            inertiaTime: 150,
            // 惯性滑动的保持时间，此值直接影响“灵敏度” (单位：ms)
            slideDuration: 300 // 惯性滑动的动画时间，表现为最终可视化的效果
        };
        this._animating = false;
        this._distance = 0;
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    PickerGroupComponent.prototype.ngOnChanges = /**
     * @param {?} changes
     * @return {?}
     */
    function (changes) {
        if ('defaultIndex' in changes) {
            if (this.defaultIndex < 0 || (this.items && this.defaultIndex >= this.items.length))
                this.defaultIndex = 0;
            this._distance = (this.defaults.offset - this.defaultIndex) * this.defaults.rowHeight;
        }
    };
    /**
     * @param {?} e
     * @return {?}
     */
    PickerGroupComponent.prototype.onTouchStart = /**
     * @param {?} e
     * @return {?}
     */
    function (e) {
        if (this.items.length <= 1)
            return;
        this.startY = e.changedTouches[0].pageY;
        this.startTime = +new Date();
    };
    /**
     * @param {?} e
     * @return {?}
     */
    PickerGroupComponent.prototype.onTouchMove = /**
     * @param {?} e
     * @return {?}
     */
    function (e) {
        if (this.items.length <= 1)
            return;
        var /** @type {?} */ endTime = +new Date();
        this.endY = e.changedTouches[0].pageY;
        // 计算滑动的速度: 距离 / 时间
        var /** @type {?} */ _distance = this.endY - this.startY;
        this.speed = _distance / (endTime - this.startTime);
        // 重新设置开始时间、开始位置
        this.startTime = endTime;
        this.startY = this.endY;
        this._animating = false; // ms
        this._distance += _distance; // 内容移动的距离
        e.preventDefault();
    };
    /**
     * @param {?} event
     * @return {?}
     */
    PickerGroupComponent.prototype.onTouchEnd = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        if (!this.startY)
            return;
        this.endY = event.changedTouches[0].pageY;
        /**
         * 思路:
         * 根据最后一次touchmove事件的速度(speed)，判断是否执行惯性滑动；
         * 如果speed大于1、小于5，则根据速度乘以惯性滑动的时间(如150ms)，计算出应该滑动的距离；
         * 如果speed大于5，则按照屏幕的高度(减去列表高度的一半)，作为该滑动的距离。
         */
        var /** @type {?} */ _speed = Math.abs(this.speed);
        if (_speed >= 5) {
            var /** @type {?} */ windowY = getWindowHeight() - (this.defaults.bodyHeight / 2);
            this.stop(windowY - this.endY);
        }
        else if (_speed >= 1) {
            var /** @type {?} */ diff = this.speed * this.defaults.inertiaTime; // 滑行 150ms,这里直接影响“灵敏度”
            this.stop(diff);
        }
        else {
            this.stop(0);
        }
        this.startY = null;
    };
    /**
     * @param {?} diff
     * @return {?}
     */
    PickerGroupComponent.prototype.stop = /**
     * @param {?} diff
     * @return {?}
     */
    function (diff) {
        var /** @type {?} */ dist = this._distance + diff;
        // 移动到最接近的那一行
        dist = Math.round(dist / this.defaults.rowHeight) * this.defaults.rowHeight;
        var /** @type {?} */ max = this._getMax(this.defaults.offset, this.defaults.rowHeight);
        var /** @type {?} */ min = this._getMin(this.defaults.offset, this.defaults.rowHeight, this.items.length);
        // 不要超过最大值或者最小值
        dist = Math.max(Math.min(dist, max), min);
        // 如果是 disabled 的就跳过
        var /** @type {?} */ index = this.defaults.offset - dist / this.defaults.rowHeight;
        while (!!this.items[index] && this.items[index].disabled) {
            diff > 0 ? ++index : --index;
        }
        dist = (this.defaults.offset - index) * this.defaults.rowHeight;
        this._animating = true;
        this._distance = dist; // px
        // 触发选择事件
        this.onChange(this.items[index], index);
    };
    /**
     * @param {?} item
     * @param {?=} index
     * @return {?}
     */
    PickerGroupComponent.prototype.onChange = /**
     * @param {?} item
     * @param {?=} index
     * @return {?}
     */
    function (item, index) {
        if (index === void 0) { index = 0; }
        this.change.emit({ item: item, index: index });
    };
    /**
     * @param {?} offset
     * @param {?} rowHeight
     * @return {?}
     */
    PickerGroupComponent.prototype._getMax = /**
     * @param {?} offset
     * @param {?} rowHeight
     * @return {?}
     */
    function (offset, rowHeight) {
        return offset * rowHeight;
    };
    /**
     * @param {?} offset
     * @param {?} rowHeight
     * @param {?} length
     * @return {?}
     */
    PickerGroupComponent.prototype._getMin = /**
     * @param {?} offset
     * @param {?} rowHeight
     * @param {?} length
     * @return {?}
     */
    function (offset, rowHeight, length) {
        return -(rowHeight * (length - offset - 1));
    };
    /**
     * @return {?}
     */
    PickerGroupComponent.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
    };
    PickerGroupComponent.decorators = [
        { type: core.Component, args: [{
                    selector: 'weui-picker-group',
                    template: "\n        <ng-content></ng-content>\n        <div class=\"weui-picker__mask\"></div>\n        <div class=\"weui-picker__indicator\"></div>\n        <div class=\"weui-picker__content\" [ngStyle]=\"{\n            'transform': 'translate(0,' + _distance + 'px)',\n            'transition': _animating ? 'transform .3s' : 'none'\n        }\">\n            <div class=\"weui-picker__item\" *ngFor=\"let item of items\"\n                [ngClass]=\"{'weui-picker__item_disabled': item.disabled}\">{{item.label || item.value}}</div>\n        </div>\n    ",
                    host: {
                        '[class.weui-picker__group]': 'true'
                    }
                },] },
    ];
    /** @nocollapse */
    PickerGroupComponent.ctorParameters = function () { return []; };
    PickerGroupComponent.propDecorators = {
        "items": [{ type: core.Input },],
        "defaultIndex": [{ type: core.Input },],
        "groupIndex": [{ type: core.Input },],
        "change": [{ type: core.Output },],
        "onTouchStart": [{ type: core.HostListener, args: ['touchstart', ['$event'],] },],
        "onTouchMove": [{ type: core.HostListener, args: ['touchmove', ['$event'],] },],
        "onTouchEnd": [{ type: core.HostListener, args: ['touchend', ['$event'],] },],
    };
    return PickerGroupComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
var FORMAT = {
    format: null,
    yu: '年',
    Mu: '月',
    du: '日',
    hu: '时',
    mu: '分'
};
/**
 * 日期时间选择器
 */
var DatePickerComponent = /** @class */ (function () {
    function DatePickerComponent(el, datePipe) {
        this.el = el;
        this.datePipe = datePipe;
        this._groups = [];
        this._selected = [];
        /**
         * 类型
         * + `date-ym` 年月
         * + `date` 日期
         * + `datetime` 日期&时间（不包括秒）
         * + `time` 时间（不包括秒）
         */
        this.type = 'date';
        this._format = Object.assign({}, FORMAT);
        /**
         * 确认后回调
         */
        this.change = new core.EventEmitter();
        /**
         * 列变更时回调
         */
        this.groupChange = new core.EventEmitter();
        /**
         * 取消后回调
         */
        this.cancel = new core.EventEmitter();
        /**
         * 显示时回调
         */
        this.show = new core.EventEmitter();
        /**
         * 隐藏后回调
         */
        this.hide = new core.EventEmitter();
        this.initFlag = false;
        this.onChange = Function.prototype;
        this.onTouched = Function.prototype;
    }
    Object.defineProperty(DatePickerComponent.prototype, "format", {
        set: /**
         * 日期格式化代码，实际是采用 DatePipe，所有代码内容和它一样
         * @param {?} v
         * @return {?}
         */
        function (v) {
            if (typeof v === 'string') {
                this._format = Object.assign(FORMAT, {
                    format: v
                });
            }
            else {
                this._format = Object.assign(FORMAT, v);
            }
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    DatePickerComponent.prototype.genGroups = /**
     * @return {?}
     */
    function () {
        if (!this._value)
            this._value = new Date();
        this._groups = [];
        this._selected = [];
        if (~this.type.indexOf('date'))
            this.genDateGroups();
        if (~this.type.indexOf('time'))
            this.genDateTimeGroups();
    };
    /**
     * @return {?}
     */
    DatePickerComponent.prototype.genDateGroups = /**
     * @return {?}
     */
    function () {
        var _this = this;
        var /** @type {?} */ year = this._value.getFullYear(), /** @type {?} */
        month = this._value.getMonth() + 1, /** @type {?} */
        day = this._value.getDate();
        // year
        var /** @type {?} */ _selected = 0, /** @type {?} */
        startYear = year - 10, /** @type {?} */
        endYear = year + 10;
        if (this.min)
            startYear = this.min.getFullYear();
        if (this.max)
            endYear = this.max.getFullYear();
        this._groups.push(Array(endYear - startYear + 1).fill(0).map(function (v, idx) {
            var /** @type {?} */ _v = startYear + idx;
            if (_v === year)
                _selected = idx;
            return { label: _v + _this._format.yu, value: _v };
        }));
        this._selected.push(_selected);
        // month
        var /** @type {?} */ cy = this._groups[0][_selected].value;
        var /** @type {?} */ startMonth = 1, /** @type {?} */ endMonth = 12;
        if (cy === startYear)
            startMonth = this.min.getMonth() + 1;
        if (cy === endYear)
            endMonth = this.max.getMonth() + 1;
        _selected = 0;
        this._groups.push(Array(endMonth - startMonth + 1).fill(0).map(function (v, idx) {
            var /** @type {?} */ _v = startMonth + idx;
            if (_v === month)
                _selected = idx;
            return { label: _v + _this._format.Mu, value: _v };
        }));
        this._selected.push(_selected);
        // day
        if (this.type !== 'date-ym') {
            var /** @type {?} */ cm = this._groups[1][_selected].value;
            var /** @type {?} */ startDay_1 = 1, /** @type {?} */ endDay = new Date(year, month, 0).getDate();
            if (cy === startYear && cm === startMonth)
                startDay_1 = this.min.getDate();
            if (cy === endYear && cm === endMonth)
                endDay = this.max.getDate();
            _selected = 0;
            this._groups.push(Array(endDay - startDay_1 + 1).fill(0).map(function (v, idx) {
                var /** @type {?} */ _v = startDay_1 + idx;
                if (_v === day)
                    _selected = idx;
                return { label: _v + _this._format.du, value: _v };
            }));
            this._selected.push(_selected);
        }
    };
    /**
     * @return {?}
     */
    DatePickerComponent.prototype.genDateTimeGroups = /**
     * @return {?}
     */
    function () {
        var _this = this;
        var /** @type {?} */ hours = this._value.getHours(), /** @type {?} */
        minutes = this._value.getMinutes();
        // hours
        var /** @type {?} */ _selected = 0;
        this._groups.push(Array(24).fill(0).map(function (v, idx) {
            var /** @type {?} */ _v = idx;
            if (_v === hours)
                _selected = idx;
            return { label: _v + _this._format.hu, value: _v };
        }));
        this._selected.push(_selected);
        // minutes
        _selected = 0;
        this._groups.push(Array(60).fill(0).map(function (v, idx) {
            var /** @type {?} */ _v = idx;
            if (_v === minutes)
                _selected = idx;
            return { label: _v + _this._format.mu, value: _v };
        }));
        this._selected.push(_selected);
    };
    /**
     * @return {?}
     */
    DatePickerComponent.prototype.genValueBySelected = /**
     * @return {?}
     */
    function () {
        if (this.type === 'time') {
            var /** @type {?} */ now = new Date();
            this._value = new Date(now.getFullYear(), now.getMonth() + 1, now.getDate(), this._groups[0][this._selected[0]].value, this._groups[1][this._selected[1]].value, 0);
            return this;
        }
        var /** @type {?} */ obj = {
            y: this._groups[0][this._selected[0]].value,
            M: this._groups[1][this._selected[1]].value - 1,
            d: this.type !== 'date-ym' ? this._groups[2][this._selected[2]].value : 1,
            h: 0,
            m: 0,
            s: 0
        };
        if (~this.type.indexOf('time')) {
            obj.h = this._groups[3][this._selected[3]].value;
            obj.m = this._groups[4][this._selected[4]].value;
        }
        this._value = new Date(obj.y, obj.M, obj.d, obj.h, obj.m, obj.s);
        return this;
    };
    /**
     * @return {?}
     */
    DatePickerComponent.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        this._groups = null;
    };
    /**
     * @param {?} date
     * @return {?}
     */
    DatePickerComponent.prototype.getFormatDate = /**
     * @param {?} date
     * @return {?}
     */
    function (date) {
        var /** @type {?} */ f = '';
        if (this._format && this._format.format)
            f = this._format.format;
        else {
            switch (this.type) {
                case 'date-ym':
                    f = 'yyyy-MM';
                    break;
                case 'date':
                    f = 'yyyy-MM-dd';
                    break;
                case 'datetime':
                    f = 'yyyy-MM-dd HH:mm:ss';
                    break;
                case 'time':
                    f = 'HH:mm';
                    break;
            }
        }
        return this.datePipe.transform(date, f);
    };
    /**
     * @param {?} data
     * @return {?}
     */
    DatePickerComponent.prototype._onCityChange = /**
     * @param {?} data
     * @return {?}
     */
    function (data) {
        this.genValueBySelected();
        var /** @type {?} */ retVal = new Date(this._value.getTime());
        this.onChange(retVal);
        this.onTouched();
        data.value = retVal;
        data.formatValue = this.getFormatDate(retVal);
        this._pickerInstance._text = data.formatValue;
        this.change.emit(data);
    };
    /**
     * @param {?} res
     * @return {?}
     */
    DatePickerComponent.prototype._onCityGroupChange = /**
     * @param {?} res
     * @return {?}
     */
    function (res) {
        this._selected[res.groupIndex] = res.index;
        if (res.groupIndex !== (this._groups.length - 1)) {
            this.genValueBySelected().genGroups();
        }
        this.groupChange.emit(res);
    };
    /**
     * @return {?}
     */
    DatePickerComponent.prototype._onCityCancelChange = /**
     * @return {?}
     */
    function () {
        this.cancel.emit();
    };
    /**
     * @return {?}
     */
    DatePickerComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        this.initFlag = true;
        this.genGroups();
    };
    /**
     * @param {?} changes
     * @return {?}
     */
    DatePickerComponent.prototype.ngOnChanges = /**
     * @param {?} changes
     * @return {?}
     */
    function (changes) {
        if (this.initFlag)
            this.genGroups();
    };
    /** 服务于Service，并无实际意义 */
    /**
     * 服务于Service，并无实际意义
     * @return {?}
     */
    DatePickerComponent.prototype._triggerShow = /**
     * 服务于Service，并无实际意义
     * @return {?}
     */
    function () {
        this._pickerInstance._onShow();
    };
    /**
     * @return {?}
     */
    DatePickerComponent.prototype._onShow = /**
     * @return {?}
     */
    function () {
        this.show.emit();
    };
    /**
     * @return {?}
     */
    DatePickerComponent.prototype._onHide = /**
     * @return {?}
     */
    function () {
        this.hide.emit();
    };
    /**
     * @param {?} value
     * @return {?}
     */
    DatePickerComponent.prototype.writeValue = /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        if (value)
            this.genGroups();
        this._value = value;
        this._pickerInstance._text = value instanceof Date ? this.getFormatDate(value) : '';
    };
    /**
     * @param {?} fn
     * @return {?}
     */
    DatePickerComponent.prototype.registerOnChange = /**
     * @param {?} fn
     * @return {?}
     */
    function (fn) { this.onChange = fn; };
    /**
     * @param {?} fn
     * @return {?}
     */
    DatePickerComponent.prototype.registerOnTouched = /**
     * @param {?} fn
     * @return {?}
     */
    function (fn) { this.onTouched = fn; };
    /**
     * @param {?} isDisabled
     * @return {?}
     */
    DatePickerComponent.prototype.setDisabledState = /**
     * @param {?} isDisabled
     * @return {?}
     */
    function (isDisabled) {
    };
    DatePickerComponent.decorators = [
        { type: core.Component, args: [{
                    selector: 'weui-date-picker',
                    template: "\n    <weui-picker [placeholder]=\"placeholder\"\n        [groups]=\"_groups\" [defaultSelect]=\"_selected\" [disabled]=\"disabled\" [options]=\"options\"\n        (show)=\"_onShow()\"\n        (hide)=\"_onHide()\"\n        (change)=\"_onCityChange($event)\"\n        (groupChange)=\"_onCityGroupChange($event)\"\n        (cancel)=\"_onCityCancelChange()\"></weui-picker>\n    ",
                    providers: [
                        common.DatePipe, {
                            provide: forms.NG_VALUE_ACCESSOR,
                            useExisting: core.forwardRef(function () { return DatePickerComponent; }),
                            multi: true
                        }
                    ]
                },] },
    ];
    /** @nocollapse */
    DatePickerComponent.ctorParameters = function () { return [
        { type: core.ElementRef, },
        { type: common.DatePipe, },
    ]; };
    DatePickerComponent.propDecorators = {
        "_pickerInstance": [{ type: core.ViewChild, args: [PickerComponent,] },],
        "min": [{ type: core.Input },],
        "max": [{ type: core.Input },],
        "type": [{ type: core.Input },],
        "format": [{ type: core.Input },],
        "options": [{ type: core.Input },],
        "placeholder": [{ type: core.Input },],
        "disabled": [{ type: core.Input },],
        "change": [{ type: core.Output },],
        "groupChange": [{ type: core.Output },],
        "cancel": [{ type: core.Output },],
        "show": [{ type: core.Output },],
        "hide": [{ type: core.Output },],
    };
    return DatePickerComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * 城市选择器（并不包含城市数据，可以参考示例中的数据格式）
 */
var CityPickerComponent = /** @class */ (function () {
    function CityPickerComponent() {
        this._groups = [];
        this._selected = [];
        this.dataMap = { label: 'name', value: 'code', items: 'sub' };
        /**
         * 确认后回调当前选择数据（包括已选面板所有数据）
         *
         * `{ value: '10000', items: [ {}, {}, {} ] }`
         */
        this.change = new core.EventEmitter();
        /**
         * 列变更时回调
         */
        this.groupChange = new core.EventEmitter();
        /**
         * 取消后回调
         */
        this.cancel = new core.EventEmitter();
        /**
         * 显示时回调
         */
        this.show = new core.EventEmitter();
        /**
         * 隐藏后回调
         */
        this.hide = new core.EventEmitter();
        this.onChange = Function.prototype;
        this.onTouched = Function.prototype;
    }
    Object.defineProperty(CityPickerComponent.prototype, "data", {
        set: /**
         * 城市数据，可以参考示例中的数据格式
         * @param {?} d
         * @return {?}
         */
        function (d) {
            this._tmpData = d;
            this.parseData(this._tmpData, this.dataMap.items, this._selected);
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    CityPickerComponent.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        this._tmpData = null;
        this._groups = null;
    };
    /**
     * @param {?} data
     * @param {?} subKey
     * @param {?=} selected
     * @param {?=} group
     * @param {?=} newselected
     * @return {?}
     */
    CityPickerComponent.prototype.parseData = /**
     * @param {?} data
     * @param {?} subKey
     * @param {?=} selected
     * @param {?=} group
     * @param {?=} newselected
     * @return {?}
     */
    function (data, subKey, selected, group, newselected) {
        var _this = this;
        if (selected === void 0) { selected = []; }
        if (group === void 0) { group = []; }
        if (newselected === void 0) { newselected = []; }
        var /** @type {?} */ _selected = 0;
        if (Array.isArray(selected) && selected.length > 0) {
            var /** @type {?} */ _selectedClone = selected.slice(0);
            _selected = _selectedClone.shift();
            selected = _selectedClone;
        }
        if (typeof data[_selected] === 'undefined') {
            _selected = 0;
        }
        newselected.push(_selected);
        var /** @type {?} */ item = data[_selected];
        var /** @type {?} */ _group = JSON.parse(JSON.stringify(data));
        _group.forEach(function (g) {
            delete g[subKey];
            g.label = g[_this.dataMap.label];
            g.value = g[_this.dataMap.value];
        });
        group.push(_group);
        if (typeof item[subKey] !== 'undefined' && Array.isArray(item[subKey])) {
            return this.parseData(item[subKey], subKey, selected, group, newselected);
        }
        else {
            this._groups = group;
            this._selected = newselected;
            return { groups: group, newselected: newselected };
        }
    };
    /**
     * 将值转换成位置
     * @param {?} data
     * @param {?} subKey
     * @param {?=} dept
     * @param {?=} newSelected
     * @return {?}
     */
    CityPickerComponent.prototype.valueToSelect = /**
     * 将值转换成位置
     * @param {?} data
     * @param {?} subKey
     * @param {?=} dept
     * @param {?=} newSelected
     * @return {?}
     */
    function (data, subKey, dept, newSelected) {
        var _this = this;
        if (dept === void 0) { dept = 1; }
        if (newSelected === void 0) { newSelected = []; }
        var /** @type {?} */ code = (this._value.substr(0, dept * 2) + '0000').substr(0, 6);
        var /** @type {?} */ _selected = data.findIndex(function (w) { return w[_this.dataMap.value] === code; });
        if (_selected <= -1) {
            _selected = 0;
        }
        newSelected.push(_selected);
        var /** @type {?} */ item = data[_selected];
        if (typeof item[subKey] !== 'undefined' && Array.isArray(item[subKey])) {
            return this.valueToSelect(item[subKey], subKey, ++dept, newSelected);
        }
        else {
            this._selected = newSelected;
            setTimeout(function () {
                _this._pickerInstance._setText();
            }, 100);
            return newSelected;
        }
    };
    /**
     * @param {?} data
     * @return {?}
     */
    CityPickerComponent.prototype._onCityChange = /**
     * @param {?} data
     * @return {?}
     */
    function (data) {
        this.onChange(data.value);
        this.onTouched();
        this.change.emit(data);
    };
    /**
     * @param {?} res
     * @return {?}
     */
    CityPickerComponent.prototype._onCityGroupChange = /**
     * @param {?} res
     * @return {?}
     */
    function (res) {
        this._selected[res.groupIndex] = res.index;
        if (res.groupIndex !== 2)
            this.parseData(this._tmpData, this.dataMap.items, this._selected);
        this.groupChange.emit(res);
    };
    /**
     * @return {?}
     */
    CityPickerComponent.prototype._onCityCancelChange = /**
     * @return {?}
     */
    function () {
        this.cancel.emit();
    };
    /** 服务于Service，并无实际意义 */
    /**
     * 服务于Service，并无实际意义
     * @return {?}
     */
    CityPickerComponent.prototype._triggerShow = /**
     * 服务于Service，并无实际意义
     * @return {?}
     */
    function () {
        this._pickerInstance._onShow();
    };
    /**
     * @return {?}
     */
    CityPickerComponent.prototype._onShow = /**
     * @return {?}
     */
    function () {
        this.show.emit();
    };
    /**
     * @return {?}
     */
    CityPickerComponent.prototype._onHide = /**
     * @return {?}
     */
    function () {
        this.hide.emit();
    };
    /**
     * @param {?} value
     * @return {?}
     */
    CityPickerComponent.prototype.writeValue = /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        if (!value) {
            this._pickerInstance._text = '';
            return;
        }
        this._value = value;
        if (this._value && this._value.length === 6) {
            this.valueToSelect(this._tmpData, this.dataMap.items, 1);
            this.parseData(this._tmpData, this.dataMap.items, this._selected);
        }
    };
    /**
     * @param {?} fn
     * @return {?}
     */
    CityPickerComponent.prototype.registerOnChange = /**
     * @param {?} fn
     * @return {?}
     */
    function (fn) { this.onChange = fn; };
    /**
     * @param {?} fn
     * @return {?}
     */
    CityPickerComponent.prototype.registerOnTouched = /**
     * @param {?} fn
     * @return {?}
     */
    function (fn) { this.onTouched = fn; };
    /**
     * @param {?} isDisabled
     * @return {?}
     */
    CityPickerComponent.prototype.setDisabledState = /**
     * @param {?} isDisabled
     * @return {?}
     */
    function (isDisabled) {
    };
    CityPickerComponent.decorators = [
        { type: core.Component, args: [{
                    selector: 'weui-city-picker',
                    template: "\n    <weui-picker [placeholder]=\"placeholder\"\n        [groups]=\"_groups\" [defaultSelect]=\"_selected\" [disabled]=\"disabled\" [options]=\"options\"\n        (show)=\"_onShow()\"\n        (hide)=\"_onHide()\"\n        (change)=\"_onCityChange($event)\"\n        (groupChange)=\"_onCityGroupChange($event)\"\n        (cancel)=\"_onCityCancelChange()\"></weui-picker>\n    ",
                    providers: [{
                            provide: forms.NG_VALUE_ACCESSOR,
                            useExisting: core.forwardRef(function () { return CityPickerComponent; }),
                            multi: true
                        }]
                },] },
    ];
    /** @nocollapse */
    CityPickerComponent.ctorParameters = function () { return []; };
    CityPickerComponent.propDecorators = {
        "_pickerInstance": [{ type: core.ViewChild, args: [PickerComponent,] },],
        "dataMap": [{ type: core.Input },],
        "data": [{ type: core.Input },],
        "options": [{ type: core.Input },],
        "placeholder": [{ type: core.Input },],
        "disabled": [{ type: core.Input },],
        "change": [{ type: core.Output },],
        "groupChange": [{ type: core.Output },],
        "cancel": [{ type: core.Output },],
        "show": [{ type: core.Output },],
        "hide": [{ type: core.Output },],
    };
    return CityPickerComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * 多列选择器Service，可直接通过Class构造选择器
 */
var PickerService = /** @class */ (function (_super) {
    __extends(PickerService, _super);
    function PickerService(resolver, applicationRef, injector) {
        return _super.call(this, resolver, applicationRef, injector) || this;
    }
    /**
     * 构建一个多列选择器并显示
     *
     * @param data 数据源
     * @param value 默认值（限单列时会根据值自动解析，而对多列使用defaultSelect自行解析）
     * @param defaultSelect 当前默认位置，数组的长度必须等同于 groups 长度
     * @param options 配置项
     * @returns 务必订阅结果才会显示。
     */
    /**
     * 构建一个多列选择器并显示
     *
     * @param {?} data 数据源
     * @param {?=} value 默认值（限单列时会根据值自动解析，而对多列使用defaultSelect自行解析）
     * @param {?=} defaultSelect 当前默认位置，数组的长度必须等同于 groups 长度
     * @param {?=} options 配置项
     * @return {?} 务必订阅结果才会显示。
     */
    PickerService.prototype.show = /**
     * 构建一个多列选择器并显示
     *
     * @param {?} data 数据源
     * @param {?=} value 默认值（限单列时会根据值自动解析，而对多列使用defaultSelect自行解析）
     * @param {?=} defaultSelect 当前默认位置，数组的长度必须等同于 groups 长度
     * @param {?=} options 配置项
     * @return {?} 务必订阅结果才会显示。
     */
    function (data, value, defaultSelect, options) {
        var _this = this;
        var /** @type {?} */ componentRef = this.build(PickerComponent);
        // 通过Service打开的强制设置为 `default` 以免出现 `input`
        options = Object.assign({}, options, { type: 'default' });
        componentRef.instance.options = options;
        if (defaultSelect)
            componentRef.instance.defaultSelect = defaultSelect;
        componentRef.instance.groups = data;
        if (value) {
            setTimeout(function () {
                componentRef.instance.writeValue(value);
            }, 100);
        }
        componentRef.instance.hide.subscribe(function () {
            setTimeout(function () {
                _this.destroy(componentRef);
            }, 100);
        });
        componentRef.instance._onShow();
        return componentRef.instance.change;
    };
    /**
     * 构建一个城市选择器并显示
     *
     * @param data 城市数据，可以参考示例中的数据格式
     * @param [value] 默认值，即城市编号
     * @param [dataMap]
     * @param options 配置项
     * @returns 务必订阅结果才会显示。
     */
    /**
     * 构建一个城市选择器并显示
     *
     * @param {?} data 城市数据，可以参考示例中的数据格式
     * @param {?=} value
     * @param {?=} dataMap
     * @param {?=} options 配置项
     * @return {?} 务必订阅结果才会显示。
     */
    PickerService.prototype.showCity = /**
     * 构建一个城市选择器并显示
     *
     * @param {?} data 城市数据，可以参考示例中的数据格式
     * @param {?=} value
     * @param {?=} dataMap
     * @param {?=} options 配置项
     * @return {?} 务必订阅结果才会显示。
     */
    function (data, value, dataMap, options) {
        var _this = this;
        var /** @type {?} */ componentRef = this.build(CityPickerComponent);
        if (dataMap)
            componentRef.instance.dataMap = dataMap;
        // 通过Service打开的强制设置为 `default` 以免出现 `input`
        options = Object.assign({}, options, { type: 'default' });
        componentRef.instance.options = options;
        componentRef.instance.data = data;
        if (value) {
            setTimeout(function () {
                componentRef.instance.writeValue(value);
            }, 100);
        }
        componentRef.instance.hide.subscribe(function () {
            setTimeout(function () {
                _this.destroy(componentRef);
            }, 100);
        });
        setTimeout(function () {
            componentRef.instance._triggerShow();
        }, 200);
        return componentRef.instance.change;
    };
    /**
     * 构建一个日期时间选择器并显示
     *
     * @param [type] 类型，date-ym年月，date日期，datetime日期&时间（不包括秒），time时间（不包括秒）
     * @param [format] 日期格式化代码，实际是采用 DatePipe，所有代码内容和它一样
     * @param [value] 默认显示日期
     * @param [min] 最小时间范围
     * @param [max] 最大时间范围
     * @param [options] 配置项
     * @returns 务必订阅结果才会显示。
     */
    /**
     * 构建一个日期时间选择器并显示
     *
     * @param {?=} type
     * @param {?=} format
     * @param {?=} value
     * @param {?=} min
     * @param {?=} max
     * @param {?=} options
     * @return {?} 务必订阅结果才会显示。
     */
    PickerService.prototype.showDateTime = /**
     * 构建一个日期时间选择器并显示
     *
     * @param {?=} type
     * @param {?=} format
     * @param {?=} value
     * @param {?=} min
     * @param {?=} max
     * @param {?=} options
     * @return {?} 务必订阅结果才会显示。
     */
    function (type, format, value, min, max, options) {
        var _this = this;
        var /** @type {?} */ componentRef = this.build(DatePickerComponent);
        // 通过Service打开的强制设置为 `default` 以免出现 `input`
        options = Object.assign({}, options, { type: 'default' });
        componentRef.instance.options = options;
        if (type)
            componentRef.instance.type = type;
        if (format)
            componentRef.instance.format = format;
        if (min)
            componentRef.instance.min = min;
        if (max)
            componentRef.instance.max = max;
        if (value) {
            setTimeout(function () {
                componentRef.instance.writeValue(value);
            }, 100);
        }
        componentRef.instance.hide.subscribe(function () {
            setTimeout(function () {
                _this.destroy(componentRef);
            }, 100);
        });
        setTimeout(function () {
            componentRef.instance.ngOnChanges(null);
            componentRef.instance._triggerShow();
        }, 200);
        return componentRef.instance.change;
    };
    PickerService.decorators = [
        { type: core.Injectable },
    ];
    /** @nocollapse */
    PickerService.ctorParameters = function () { return [
        { type: core.ComponentFactoryResolver, },
        { type: core.ApplicationRef, },
        { type: core.Injector, },
    ]; };
    return PickerService;
}(BaseService));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
var PickerModule = /** @class */ (function () {
    function PickerModule() {
    }
    /**
     * @return {?}
     */
    PickerModule.forRoot = /**
     * @return {?}
     */
    function () {
        return { ngModule: PickerModule, providers: [PickerConfig] };
    };
    PickerModule.decorators = [
        { type: core.NgModule, args: [{
                    imports: [common.CommonModule],
                    declarations: [PickerComponent, PickerGroupComponent, DatePickerComponent, CityPickerComponent],
                    exports: [PickerComponent, PickerGroupComponent, DatePickerComponent, CityPickerComponent],
                    providers: [PickerService],
                    entryComponents: [PickerComponent, PickerGroupComponent, DatePickerComponent, CityPickerComponent]
                },] },
    ];
    /** @nocollapse */
    PickerModule.ctorParameters = function () { return []; };
    return PickerModule;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
var SearchBarConfig = /** @class */ (function () {
    function SearchBarConfig() {
        /**
         * 占位符，默认：`搜索`
         */
        this.placeholder = '搜索';
        /**
         * 取消按键文字，默认：`取消`
         */
        this.cancelText = '取消';
        /**
         * 去抖时长（单位：ms），默认：`300`
         */
        this.debounceTime = 300;
    }
    SearchBarConfig.decorators = [
        { type: core.Injectable },
    ];
    /** @nocollapse */
    SearchBarConfig.ctorParameters = function () { return []; };
    return SearchBarConfig;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
var SearchBarComponent = /** @class */ (function () {
    function SearchBarComponent(DEF) {
        this._q = '';
        /**
         * 搜索回调
         */
        this.search = new core.EventEmitter();
        /**
         * 取消回调
         */
        this.cancel = new core.EventEmitter();
        /**
         * 清空回调
         */
        this.clear = new core.EventEmitter();
        /**
         * 提交回调（指的是键盘回车后）
         */
        this.submit = new core.EventEmitter();
        this._focus = false;
        this._subject = new Subject.Subject();
        Object.assign(this, DEF);
    }
    Object.defineProperty(SearchBarComponent.prototype, "value", {
        set: /**
         * @param {?} _value
         * @return {?}
         */
        function (_value) {
            this._q = _value;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    SearchBarComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this._sub = this._subject
            .pipe(operators.debounceTime(this.debounceTime), operators.distinctUntilChanged())
            .subscribe(function (q) {
            _this.search.emit(q);
        });
    };
    /**
     * @return {?}
     */
    SearchBarComponent.prototype._doFocus = /**
     * @return {?}
     */
    function () {
        this._term.nativeElement.focus();
    };
    /**
     * @return {?}
     */
    SearchBarComponent.prototype._onBlur = /**
     * @return {?}
     */
    function () {
        if (this._q === '')
            this._focus = false;
    };
    /**
     * @return {?}
     */
    SearchBarComponent.prototype._onSearch = /**
     * @return {?}
     */
    function () {
        this._subject.next(this._q);
    };
    /**
     * @return {?}
     */
    SearchBarComponent.prototype._onCancel = /**
     * @return {?}
     */
    function () {
        this._q = '';
        this._onBlur();
        this._subject.next('');
        this.cancel.emit();
    };
    /**
     * @return {?}
     */
    SearchBarComponent.prototype._onClear = /**
     * @return {?}
     */
    function () {
        this._q = '';
        this._doFocus();
        this._subject.next('');
        this.clear.emit();
    };
    /**
     * @param {?} e
     * @return {?}
     */
    SearchBarComponent.prototype._onSubmit = /**
     * @param {?} e
     * @return {?}
     */
    function (e) {
        e.preventDefault();
        e.stopPropagation();
        this._subject.next(this._q);
        this.submit.emit(this._q);
        return false;
    };
    /**
     * @return {?}
     */
    SearchBarComponent.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        if (this._sub)
            this._sub.unsubscribe();
    };
    SearchBarComponent.decorators = [
        { type: core.Component, args: [{
                    selector: 'weui-searchbar',
                    template: "\n        <div class=\"weui-search-bar\" [ngClass]=\"{'weui-search-bar_focusing': _focus}\">\n            <form class=\"weui-search-bar__form\" (ngSubmit)=\"_onSubmit($event)\">\n                <div class=\"weui-search-bar__box\">\n                    <i class=\"weui-icon-search\"></i>\n                    <input #term type=\"search\" autocomplete=\"off\" name=\"q\" class=\"weui-search-bar__input\"\n                        [placeholder]=\"placeholder\" [(ngModel)]=\"_q\" (ngModelChange)=\"_onSearch()\"\n                        (focus)=\"_focus=true\" (blur)=\"_onBlur()\" />\n                    <a href=\"javascript:\" class=\"weui-icon-clear\" (click)=\"_onClear()\"></a>\n                </div>\n                <label class=\"weui-search-bar__label\" (click)=\"_doFocus()\">\n                    <i class=\"weui-icon-search\"></i>\n                    <span>{{placeholder}}</span>\n                </label>\n            </form>\n            <a href=\"javascript:\" class=\"weui-search-bar__cancel-btn\" (click)=\"_onCancel()\">{{cancelText}}</a>\n        </div>\n    "
                },] },
    ];
    /** @nocollapse */
    SearchBarComponent.ctorParameters = function () { return [
        { type: SearchBarConfig, },
    ]; };
    SearchBarComponent.propDecorators = {
        "value": [{ type: core.Input },],
        "placeholder": [{ type: core.Input },],
        "cancelText": [{ type: core.Input },],
        "debounceTime": [{ type: core.Input },],
        "search": [{ type: core.Output },],
        "cancel": [{ type: core.Output },],
        "clear": [{ type: core.Output },],
        "submit": [{ type: core.Output },],
        "_term": [{ type: core.ViewChild, args: ['term',] },],
    };
    return SearchBarComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
var SearchBarModule = /** @class */ (function () {
    function SearchBarModule() {
    }
    /**
     * @return {?}
     */
    SearchBarModule.forRoot = /**
     * @return {?}
     */
    function () {
        return { ngModule: SearchBarModule, providers: [SearchBarConfig] };
    };
    SearchBarModule.decorators = [
        { type: core.NgModule, args: [{
                    imports: [common.CommonModule, forms.FormsModule],
                    declarations: [SearchBarComponent],
                    exports: [SearchBarComponent],
                    entryComponents: [SearchBarComponent]
                },] },
    ];
    /** @nocollapse */
    SearchBarModule.ctorParameters = function () { return []; };
    return SearchBarModule;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * \@docs-private
 */
var BarComponent = /** @class */ (function () {
    function BarComponent() {
        this.tabs = [];
    }
    /**
     * @param {?} tab
     * @return {?}
     */
    BarComponent.prototype.add = /**
     * @param {?} tab
     * @return {?}
     */
    function (tab) {
        this.tabs.push(tab);
        tab.active = this.tabs.length === 1 && tab.active !== false;
    };
    /**
     * @param {?} tab
     * @return {?}
     */
    BarComponent.prototype.remove = /**
     * @param {?} tab
     * @return {?}
     */
    function (tab) {
        var /** @type {?} */ index = this.tabs.indexOf(tab);
        if (index === -1 || this.isDestroyed) {
            return;
        }
        // Select a new tab if the tab to be removed is selected and not destroyed
        if (tab.active && this.hasAvailableTabs(index)) {
            var /** @type {?} */ newActiveIndex = this.getClosestTabIndex(index);
            this.tabs[newActiveIndex].active = true;
        }
        tab.removed.emit(tab);
        this.tabs.splice(index, 1);
    };
    /**
     * @param {?} index
     * @return {?}
     */
    BarComponent.prototype.getClosestTabIndex = /**
     * @param {?} index
     * @return {?}
     */
    function (index) {
        var /** @type {?} */ tabsLength = this.tabs.length;
        if (!tabsLength) {
            return -1;
        }
        for (var /** @type {?} */ step = 1; step <= tabsLength; step += 1) {
            var /** @type {?} */ prevIndex = index - step;
            var /** @type {?} */ nextIndex = index + step;
            if (this.tabs[prevIndex] && !this.tabs[prevIndex].disabled) {
                return prevIndex;
            }
            if (this.tabs[nextIndex] && !this.tabs[nextIndex].disabled) {
                return nextIndex;
            }
        }
        return -1;
    };
    /**
     * @param {?} index
     * @return {?}
     */
    BarComponent.prototype.hasAvailableTabs = /**
     * @param {?} index
     * @return {?}
     */
    function (index) {
        var /** @type {?} */ tabsLength = this.tabs.length;
        if (!tabsLength) {
            return false;
        }
        for (var /** @type {?} */ i = 0; i < tabsLength; i += 1) {
            if (!this.tabs[i].disabled && i !== index) {
                return true;
            }
        }
        return false;
    };
    /**
     * @return {?}
     */
    BarComponent.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        this.isDestroyed = true;
    };
    BarComponent.decorators = [
        { type: core.Component, args: [{
                    selector: 'weui-bar-component',
                    template: ""
                },] },
    ];
    /** @nocollapse */
    BarComponent.ctorParameters = function () { return []; };
    return BarComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
var TabDirective = /** @class */ (function () {
    function TabDirective(tab) {
        /**
         * 当tab激活时触发
         */
        this.select = new core.EventEmitter();
        /**
         * 当tab无效时触发
         */
        this.deselect = new core.EventEmitter();
        /**
         * 当tab移除时触发
         */
        this.removed = new core.EventEmitter();
        this._tabComp = tab;
        this._tabComp.add(this);
    }
    Object.defineProperty(TabDirective.prototype, "active", {
        get: /**
         * 激活
         * @return {?}
         */
        function () {
            return this._active;
        },
        set: /**
         * @param {?} active
         * @return {?}
         */
        function (active) {
            var _this = this;
            if (this.disabled && active || !active) {
                if (!active) {
                    this._active = active;
                }
                this.deselect.emit(this);
                return;
            }
            this._active = active;
            this.select.emit(this);
            this._tabComp.tabs.forEach(function (tab) {
                if (tab !== _this) {
                    tab.active = false;
                }
            });
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    TabDirective.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        this._tabComp.remove(this);
    };
    TabDirective.decorators = [
        { type: core.Directive, args: [{ selector: 'weui-tab, [weui-tab]' },] },
    ];
    /** @nocollapse */
    TabDirective.ctorParameters = function () { return [
        { type: BarComponent, },
    ]; };
    TabDirective.propDecorators = {
        "heading": [{ type: core.Input },],
        "disabled": [{ type: core.Input },],
        "icon": [{ type: core.Input },],
        "badge": [{ type: core.Input },],
        "select": [{ type: core.Output },],
        "deselect": [{ type: core.Output },],
        "removed": [{ type: core.Output },],
        "active": [{ type: core.HostBinding, args: ['class.active',] }, { type: core.Input },],
    };
    return TabDirective;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * 顶部选项卡
 */
var NavbarComponent = /** @class */ (function (_super) {
    __extends(NavbarComponent, _super);
    function NavbarComponent() {
        return _super.call(this) || this;
    }
    NavbarComponent.decorators = [
        { type: core.Component, args: [{
                    selector: 'weui-navbar',
                    template: "\n    <div class=\"weui-navbar\">\n        <div class=\"weui-navbar__item\"\n            [ngClass]=\"{'weui-bar__item_on': item.active}\"\n            [class.disabled]=\"item.disabled\"\n            *ngFor=\"let item of tabs\" (click)=\"item.active=true\">{{item.heading}}</div>\n    </div>\n    <div class=\"weui-tab__panel\"><ng-content></ng-content></div>\n    ",
                    providers: [{ provide: BarComponent, useExisting: core.forwardRef(function () { return NavbarComponent; }) }],
                    host: {
                        '[class.weui-tab]': 'true'
                    }
                },] },
    ];
    /** @nocollapse */
    NavbarComponent.ctorParameters = function () { return []; };
    return NavbarComponent;
}(BarComponent));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * 底部选项卡
 */
var TabbarComponent = /** @class */ (function (_super) {
    __extends(TabbarComponent, _super);
    function TabbarComponent() {
        return _super.call(this) || this;
    }
    TabbarComponent.decorators = [
        { type: core.Component, args: [{
                    selector: 'weui-tabbar',
                    template: "\n    <div class=\"weui-tab__panel\"><ng-content></ng-content></div>\n    <div class=\"weui-tabbar\">\n        <div class=\"weui-tabbar__item\" [ngClass]=\"{'weui-bar__item_on': item.active}\"\n            *ngFor=\"let item of tabs\" (click)=\"item.active=true\">\n            <div style=\"display: inline-block;position: relative;\">\n                <div class=\"weui-tabbar__icon\" [innerHTML]=\"item.icon\"></div>\n                <span class=\"weui-badge\" style=\"position: absolute;top: -2px;right: -13px;\" *ngIf=\"item.badge && item.badge !== 'dot'\">{{item.badge}}</span>\n                <span class=\"weui-badge weui-badge_dot\" style=\"position: absolute;top: 0;right: -6px;\" *ngIf=\"item.badge && item.badge === 'dot'\"></span>\n            </div>\n            <p class=\"weui-tabbar__label\">{{item.heading}}</p>\n        </div>\n    </div>\n    ",
                    providers: [{ provide: BarComponent, useExisting: core.forwardRef(function () { return TabbarComponent; }) }],
                    host: {
                        '[class.weui-tab]': 'true'
                    }
                },] },
    ];
    /** @nocollapse */
    TabbarComponent.ctorParameters = function () { return []; };
    return TabbarComponent;
}(BarComponent));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
var TabModule = /** @class */ (function () {
    function TabModule() {
    }
    /**
     * @return {?}
     */
    TabModule.forRoot = /**
     * @return {?}
     */
    function () {
        return { ngModule: TabModule, providers: [] };
    };
    TabModule.decorators = [
        { type: core.NgModule, args: [{
                    imports: [common.CommonModule, forms.FormsModule],
                    declarations: [TabDirective, NavbarComponent, TabbarComponent, BarComponent],
                    exports: [TabDirective, NavbarComponent, TabbarComponent]
                },] },
    ];
    /** @nocollapse */
    TabModule.ctorParameters = function () { return []; };
    return TabModule;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
var ToastConfig = /** @class */ (function () {
    function ToastConfig() {
        /**
         * 成功配置项
         */
        this.success = { text: '已完成', icon: 'weui-icon-success-no-circle', time: 2000 };
        /**
         * 加载中配置项
         */
        this.loading = { text: '加载中…', icon: 'weui-loading', time: 2000 };
    }
    ToastConfig.decorators = [
        { type: core.Injectable },
    ];
    /** @nocollapse */
    ToastConfig.ctorParameters = function () { return []; };
    return ToastConfig;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
var ToastComponent = /** @class */ (function () {
    function ToastComponent(DEF) {
        this.DEF = DEF;
        /**
         * 显示时长后自动关闭（单位：ms），0 表示永久，默认：`2000`
         */
        this.time = 2000;
        /**
         * 隐藏后回调
         */
        this.hide = new core.EventEmitter();
        this._showd = false;
        this.type = 'success';
    }
    Object.defineProperty(ToastComponent.prototype, "type", {
        set: /**
         * 类型
         * @param {?} _t
         * @return {?}
         */
        function (_t) {
            Object.assign(this, this.DEF[_t]);
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @docs-private
     */
    /**
     * \@docs-private
     * @return {?}
     */
    ToastComponent.prototype.onShow = /**
     * \@docs-private
     * @return {?}
     */
    function () {
        var _this = this;
        this._showd = true;
        if (this.time > 0) {
            this.timer = setTimeout(function () {
                _this.onHide();
            }, this.time);
        }
        return this;
    };
    /**
     * @docs-private
     */
    /**
     * \@docs-private
     * @return {?}
     */
    ToastComponent.prototype.onHide = /**
     * \@docs-private
     * @return {?}
     */
    function () {
        this._showd = false;
        this.hide.emit();
    };
    /**
     * @return {?}
     */
    ToastComponent.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        if (this.timer) {
            clearTimeout(this.timer);
            this.timer = null;
        }
    };
    ToastComponent.decorators = [
        { type: core.Component, args: [{
                    selector: 'weui-toast',
                    template: "\n        <div class=\"weui-mask_transparent\"></div>\n        <div class=\"weui-toast\">\n            <i class=\"{{icon}} weui-icon_toast\"></i>\n            <p class=\"weui-toast__content\">{{text}}</p>\n        </div>\n    ",
                    host: {
                        '[hidden]': '!_showd'
                    }
                },] },
    ];
    /** @nocollapse */
    ToastComponent.ctorParameters = function () { return [
        { type: ToastConfig, },
    ]; };
    ToastComponent.propDecorators = {
        "type": [{ type: core.Input },],
        "text": [{ type: core.Input },],
        "icon": [{ type: core.Input },],
        "time": [{ type: core.Input },],
        "hide": [{ type: core.Output },],
    };
    return ToastComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
var ToastService = /** @class */ (function (_super) {
    __extends(ToastService, _super);
    function ToastService(resolver, applicationRef, injector) {
        return _super.call(this, resolver, applicationRef, injector) || this;
    }
    /**
     * 构建toast并显示
     *
     * @param [text] 文本（可选）
     * @param [time] 显示时长后自动关闭（单位：ms），0 表示永久（可选）
     * @param [icon] icon图标Class名（可选）
     * @param [type] 类型（可选）
     */
    /**
     * 构建toast并显示
     *
     * @param {?=} text
     * @param {?=} time
     * @param {?=} icon
     * @param {?=} type
     * @return {?}
     */
    ToastService.prototype.show = /**
     * 构建toast并显示
     *
     * @param {?=} text
     * @param {?=} time
     * @param {?=} icon
     * @param {?=} type
     * @return {?}
     */
    function (text, time, icon, type) {
        var /** @type {?} */ componentRef = this.build(ToastComponent);
        if (type)
            componentRef.instance.type = type;
        if (text)
            componentRef.instance.text = text;
        if (icon)
            componentRef.instance.icon = icon;
        if (time)
            componentRef.instance.time = time;
        componentRef.instance.hide.subscribe(function () {
            setTimeout(function () {
                componentRef.destroy();
            }, 300);
        });
        return componentRef.instance.onShow();
    };
    /**
     * 关闭最新toast
     */
    /**
     * 关闭最新toast
     * @return {?}
     */
    ToastService.prototype.hide = /**
     * 关闭最新toast
     * @return {?}
     */
    function () {
        this.destroy();
    };
    /**
     * 构建成功toast并显示
     *
     * @param [text] 文本（可选）
     * @param [time] 显示时长后自动关闭（单位：ms）（可选）
     * @param [icon] icon图标Class名（可选）
     */
    /**
     * 构建成功toast并显示
     *
     * @param {?=} text
     * @param {?=} time
     * @param {?=} icon
     * @return {?}
     */
    ToastService.prototype.success = /**
     * 构建成功toast并显示
     *
     * @param {?=} text
     * @param {?=} time
     * @param {?=} icon
     * @return {?}
     */
    function (text, time, icon) {
        return this.show(text, time, icon, 'success');
    };
    /**
     * 构建加载中toast并显示
     *
     * @param [text] 文本（可选）
     * @param [time] 显示时长后自动关闭（单位：ms）（可选）
     * @param [icon] icon图标Class名（可选）
     */
    /**
     * 构建加载中toast并显示
     *
     * @param {?=} text
     * @param {?=} time
     * @param {?=} icon
     * @return {?}
     */
    ToastService.prototype.loading = /**
     * 构建加载中toast并显示
     *
     * @param {?=} text
     * @param {?=} time
     * @param {?=} icon
     * @return {?}
     */
    function (text, time, icon) {
        return this.show(text, time, icon, 'loading');
    };
    ToastService.decorators = [
        { type: core.Injectable },
    ];
    /** @nocollapse */
    ToastService.ctorParameters = function () { return [
        { type: core.ComponentFactoryResolver, },
        { type: core.ApplicationRef, },
        { type: core.Injector, },
    ]; };
    return ToastService;
}(BaseService));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
var ToastModule = /** @class */ (function () {
    function ToastModule() {
    }
    /**
     * @return {?}
     */
    ToastModule.forRoot = /**
     * @return {?}
     */
    function () {
        return { ngModule: ToastModule, providers: [ToastConfig] };
    };
    ToastModule.decorators = [
        { type: core.NgModule, args: [{
                    imports: [common.CommonModule],
                    declarations: [ToastComponent],
                    exports: [ToastComponent],
                    providers: [ToastService],
                    entryComponents: [ToastComponent]
                },] },
    ];
    /** @nocollapse */
    ToastModule.ctorParameters = function () { return []; };
    return ToastModule;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
var ToptipsComponent = /** @class */ (function () {
    function ToptipsComponent() {
        /**
         * 显示时长后自动关闭（单位：ms），默认：`2000`
         */
        this.time = 2000;
        /**
         * 隐藏后回调
         */
        this.hide = new core.EventEmitter();
        this._classMap = {};
        this._showd = false;
    }
    Object.defineProperty(ToptipsComponent.prototype, "type", {
        set: /**
         * 类型
         * @param {?} _type
         * @return {?}
         */
        function (_type) {
            this._type = _type;
            this.setClassMap();
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    ToptipsComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        this.setClassMap();
    };
    /**
     * @return {?}
     */
    ToptipsComponent.prototype.setClassMap = /**
     * @return {?}
     */
    function () {
        this._classMap = (_a = {},
            _a["weui-toptips_" + this._type] = true,
            _a);
        var _a;
    };
    /**
     * @return {?}
     */
    ToptipsComponent.prototype.onShow = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.destroy();
        this._showd = true;
        this.timer = setTimeout(function () {
            _this.onHide();
        }, this.time);
        return this;
    };
    /**
     * @return {?}
     */
    ToptipsComponent.prototype.onHide = /**
     * @return {?}
     */
    function () {
        this._showd = false;
        this.hide.emit();
    };
    /**
     * @return {?}
     */
    ToptipsComponent.prototype.destroy = /**
     * @return {?}
     */
    function () {
        if (this.timer) {
            clearTimeout(this.timer);
            this.timer = null;
        }
    };
    /**
     * @return {?}
     */
    ToptipsComponent.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        this.destroy();
    };
    ToptipsComponent.decorators = [
        { type: core.Component, args: [{
                    selector: 'weui-toptips',
                    template: "\n    <div class=\"weui-toptips\" style=\"display:block\" [ngClass]=\"_classMap\">{{text}}<ng-content></ng-content></div>",
                    host: {
                        '[hidden]': '!_showd'
                    }
                },] },
    ];
    /** @nocollapse */
    ToptipsComponent.ctorParameters = function () { return []; };
    ToptipsComponent.propDecorators = {
        "text": [{ type: core.Input },],
        "time": [{ type: core.Input },],
        "hide": [{ type: core.Output },],
        "type": [{ type: core.Input },],
    };
    return ToptipsComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
var ToptipsService = /** @class */ (function (_super) {
    __extends(ToptipsService, _super);
    function ToptipsService(resolver, applicationRef, injector) {
        return _super.call(this, resolver, applicationRef, injector) || this;
    }
    /**
     * 构建一个Toptips并显示
     *
     * @param text 文本
     * @param type 类型
     * @param 显示时长后自动关闭（单位：ms）
     */
    /**
     * 构建一个Toptips并显示
     *
     * @param {?} text 文本
     * @param {?} type 类型
     * @param {?=} time
     * @return {?}
     */
    ToptipsService.prototype.show = /**
     * 构建一个Toptips并显示
     *
     * @param {?} text 文本
     * @param {?} type 类型
     * @param {?=} time
     * @return {?}
     */
    function (text, type, time) {
        var _this = this;
        if (time === void 0) { time = 2000; }
        var /** @type {?} */ componentRef = this.build(ToptipsComponent);
        if (type)
            componentRef.instance.type = type;
        if (text)
            componentRef.instance.text = text;
        componentRef.instance.time = time;
        componentRef.instance.hide.subscribe(function () {
            setTimeout(function () {
                _this.destroy(componentRef);
            }, 100);
        });
        return componentRef.instance.onShow();
    };
    /**
     * 构建一个Warn Toptips并显示
     *
     * @param text 文本
     * @param time 显示时长后自动关闭（单位：ms）
     */
    /**
     * 构建一个Warn Toptips并显示
     *
     * @param {?} text 文本
     * @param {?=} time 显示时长后自动关闭（单位：ms）
     * @return {?}
     */
    ToptipsService.prototype.warn = /**
     * 构建一个Warn Toptips并显示
     *
     * @param {?} text 文本
     * @param {?=} time 显示时长后自动关闭（单位：ms）
     * @return {?}
     */
    function (text, time) {
        if (time === void 0) { time = 2000; }
        return this.show(text, 'warn', time);
    };
    /**
     * 构建一个Info Toptips并显示
     *
     * @param text 文本
     * @param time 显示时长后自动关闭（单位：ms）
     */
    /**
     * 构建一个Info Toptips并显示
     *
     * @param {?} text 文本
     * @param {?=} time 显示时长后自动关闭（单位：ms）
     * @return {?}
     */
    ToptipsService.prototype.info = /**
     * 构建一个Info Toptips并显示
     *
     * @param {?} text 文本
     * @param {?=} time 显示时长后自动关闭（单位：ms）
     * @return {?}
     */
    function (text, time) {
        if (time === void 0) { time = 2000; }
        return this.show(text, 'info', time);
    };
    /**
     * 构建一个Primary Toptips并显示
     *
     * @param text 文本
     * @param time 显示时长后自动关闭（单位：ms）
     */
    /**
     * 构建一个Primary Toptips并显示
     *
     * @param {?} text 文本
     * @param {?=} time 显示时长后自动关闭（单位：ms）
     * @return {?}
     */
    ToptipsService.prototype.primary = /**
     * 构建一个Primary Toptips并显示
     *
     * @param {?} text 文本
     * @param {?=} time 显示时长后自动关闭（单位：ms）
     * @return {?}
     */
    function (text, time) {
        if (time === void 0) { time = 2000; }
        return this.show(text, 'primary', time);
    };
    /**
     * 构建一个Success Toptips并显示
     *
     * @param text 文本
     * @param time 显示时长后自动关闭（单位：ms）
     */
    /**
     * 构建一个Success Toptips并显示
     *
     * @param {?} text 文本
     * @param {?=} time 显示时长后自动关闭（单位：ms）
     * @return {?}
     */
    ToptipsService.prototype.success = /**
     * 构建一个Success Toptips并显示
     *
     * @param {?} text 文本
     * @param {?=} time 显示时长后自动关闭（单位：ms）
     * @return {?}
     */
    function (text, time) {
        if (time === void 0) { time = 2000; }
        return this.show(text, 'primary', time);
    };
    /**
     * 构建一个Default Toptips并显示
     *
     * @param text 文本
     * @param time 显示时长后自动关闭（单位：ms）
     */
    /**
     * 构建一个Default Toptips并显示
     *
     * @param {?} text 文本
     * @param {?=} time 显示时长后自动关闭（单位：ms）
     * @return {?}
     */
    ToptipsService.prototype.default = /**
     * 构建一个Default Toptips并显示
     *
     * @param {?} text 文本
     * @param {?=} time 显示时长后自动关闭（单位：ms）
     * @return {?}
     */
    function (text, time) {
        if (time === void 0) { time = 2000; }
        return this.show(text, 'default', time);
    };
    ToptipsService.decorators = [
        { type: core.Injectable },
    ];
    /** @nocollapse */
    ToptipsService.ctorParameters = function () { return [
        { type: core.ComponentFactoryResolver, },
        { type: core.ApplicationRef, },
        { type: core.Injector, },
    ]; };
    return ToptipsService;
}(BaseService));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
var ToptipsModule = /** @class */ (function () {
    function ToptipsModule() {
    }
    /**
     * @return {?}
     */
    ToptipsModule.forRoot = /**
     * @return {?}
     */
    function () {
        return { ngModule: ToptipsModule, providers: [] };
    };
    ToptipsModule.decorators = [
        { type: core.NgModule, args: [{
                    imports: [common.CommonModule],
                    declarations: [ToptipsComponent],
                    exports: [ToptipsComponent],
                    providers: [ToptipsService],
                    entryComponents: [ToptipsComponent]
                },] },
    ];
    /** @nocollapse */
    ToptipsModule.ctorParameters = function () { return []; };
    return ToptipsModule;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
var PopupConfig = /** @class */ (function () {
    function PopupConfig() {
        /**
         * 是否全屏，默认：`false`
         */
        this.is_full = false;
        /**
         * 取消按钮文本，默认：`取消`
         */
        this.cancel = '取消';
        /**
         * 确定按钮文本，默认：`确定`
         */
        this.confirm = '确定';
        /**
         * 允许点击背景关闭，默认：`true`
         */
        this.backdrop = true;
    }
    PopupConfig.decorators = [
        { type: core.Injectable },
    ];
    /** @nocollapse */
    PopupConfig.ctorParameters = function () { return []; };
    return PopupConfig;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
var PopupComponent = /** @class */ (function () {
    function PopupComponent(DEF) {
        this.DEF = DEF;
        /**
         * 取消回调
         */
        this.cancel = new core.EventEmitter();
        /**
         * 确认回调
         */
        this.confirm = new core.EventEmitter();
        this.shown = false;
        this._shownAnt = false;
    }
    Object.defineProperty(PopupComponent.prototype, "_visibility", {
        get: /**
         * @return {?}
         */
        function () {
            return this._shownAnt ? 'show' : 'hide';
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    PopupComponent.prototype.parseConfig = /**
     * @return {?}
     */
    function () {
        this.config = Object.assign({}, this.DEF, this.config);
    };
    /**
     * @return {?}
     */
    PopupComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        this.parseConfig();
    };
    /**
     * @param {?} changes
     * @return {?}
     */
    PopupComponent.prototype.ngOnChanges = /**
     * @param {?} changes
     * @return {?}
     */
    function (changes) {
        if ('config' in changes)
            this.parseConfig();
    };
    /**
     * 显示，并支持订阅结果，如果点击取消值为false，反之 true
     */
    /**
     * 显示，并支持订阅结果，如果点击取消值为false，反之 true
     * @return {?}
     */
    PopupComponent.prototype.show = /**
     * 显示，并支持订阅结果，如果点击取消值为false，反之 true
     * @return {?}
     */
    function () {
        var _this = this;
        this.shown = true;
        setTimeout(function () { _this._shownAnt = true; }, 10);
        return Observable.Observable.create(function (observer) {
            _this.observer = observer;
        });
    };
    /**
     * 隐藏
     *
     * @param [is_backdrop] 是否从背景上点击(可选)
     */
    /**
     * 隐藏
     *
     * @param {?=} is_backdrop
     * @return {?}
     */
    PopupComponent.prototype.hide = /**
     * 隐藏
     *
     * @param {?=} is_backdrop
     * @return {?}
     */
    function (is_backdrop) {
        var _this = this;
        if (is_backdrop === true && this.config.backdrop === false)
            return false;
        this._shownAnt = false;
        setTimeout(function () {
            _this.shown = false;
        }, 300);
    };
    /** 关闭，等同 `hide()` 效果 */
    /**
     * 关闭，等同 `hide()` 效果
     * @return {?}
     */
    PopupComponent.prototype.close = /**
     * 关闭，等同 `hide()` 效果
     * @return {?}
     */
    function () {
        this.hide(false);
    };
    /**
     * @return {?}
     */
    PopupComponent.prototype._onCancel = /**
     * @return {?}
     */
    function () {
        this.cancel.emit();
        this.hide(false);
        if (this.observer) {
            this.observer.next(false);
            this.observer.complete();
        }
        return false;
    };
    /**
     * @return {?}
     */
    PopupComponent.prototype._onConfirm = /**
     * @return {?}
     */
    function () {
        this.confirm.emit();
        this.hide(false);
        if (this.observer) {
            this.observer.next(true);
            this.observer.complete();
        }
        return false;
    };
    /**
     * @return {?}
     */
    PopupComponent.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        if (this.observer && this.observer instanceof Subscription.Subscription) {
            (/** @type {?} */ (this.observer)).unsubscribe();
        }
    };
    PopupComponent.decorators = [
        { type: core.Component, args: [{
                    selector: 'weui-popup',
                    template: "\n        <div class=\"weui-mask\" [@visibility]=\"_visibility\" (click)=\"hide(true)\"></div>\n        <div class=\"weui-popup\" [ngClass]=\"{'weui-popup_toggle': _shownAnt}\">\n            <div class=\"weui-popup__hd\" *ngIf=\"!config.is_full\">\n                <a href=\"#\" class=\"weui-popup__action\" (click)=\"_onCancel()\">{{config.cancel}}</a>\n                <a href=\"#\" class=\"weui-popup__action\" (click)=\"_onConfirm()\">{{config.confirm}}</a>\n            </div>\n            <div [ngClass]=\"{'weui-popup_full': config.is_full }\">\n                <ng-content></ng-content>\n            </div>\n        </div>\n    ",
                    animations: [animations.trigger('visibility', [
                            animations.state('show', animations.style({ opacity: 1 })),
                            animations.state('hide', animations.style({ opacity: 0 })),
                            animations.transition('hide <=> show', [animations.animate(200)])
                        ])],
                    host: {
                        '[hidden]': '!shown'
                    }
                },] },
    ];
    /** @nocollapse */
    PopupComponent.ctorParameters = function () { return [
        { type: PopupConfig, },
    ]; };
    PopupComponent.propDecorators = {
        "config": [{ type: core.Input },],
        "cancel": [{ type: core.Output },],
        "confirm": [{ type: core.Output },],
    };
    return PopupComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
var PopupModule = /** @class */ (function () {
    function PopupModule() {
    }
    /**
     * @return {?}
     */
    PopupModule.forRoot = /**
     * @return {?}
     */
    function () {
        return { ngModule: PopupModule, providers: [PopupConfig] };
    };
    PopupModule.decorators = [
        { type: core.NgModule, args: [{
                    imports: [common.CommonModule],
                    declarations: [PopupComponent],
                    exports: [PopupComponent],
                    entryComponents: [PopupComponent]
                },] },
    ];
    /** @nocollapse */
    PopupModule.ctorParameters = function () { return []; };
    return PopupModule;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
var PTRConfig = /** @class */ (function () {
    function PTRConfig() {
        /**
         * 是否使用默认icon样式，默认：`false`
         */
        this.customIcon = false;
        /**
         * 下拉icon，支持HTML
         */
        this.pullIcon = '<i class="weui-icon-download"></i>';
        /**
         * 加载中icon，支持HTML
         */
        this.loadingIcon = '<i class="weui-loading"></i>';
        /**
         * 加载成功icon，支持HTML
         */
        this.successIcon = '<i class="weui-icon-success"></i>';
        /**
         * 下拉刷新容器高度（单位：px），默认：`100`
         */
        this.height = 100;
        /**
         * 下拉范围有效（单位：%），默认：`80`
         */
        this.treshold = 80;
    }
    PTRConfig.decorators = [
        { type: core.Injectable },
    ];
    /** @nocollapse */
    PTRConfig.ctorParameters = function () { return []; };
    return PTRConfig;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
var PTRComponent = /** @class */ (function () {
    function PTRComponent(el, DEF) {
        this.el = el;
        this.DEF = DEF;
        this.ogY = 0;
        this.loading = false;
        this.touching = false;
        this._animating = false;
        this.initScrollTop = 0;
        this._pullPercent = 0;
        /**
         * 是否禁止
         */
        this.disabled = false;
        /**
         * 下拉滚动时回调，返回一个0-100%的参数
         */
        this.scroll = new core.EventEmitter();
        /**
         * 刷新回调
         */
        this.refresh = new core.EventEmitter();
    }
    /**
     * 设置最后更新标签
     *
     * @param label 标签内容（支持HTML）
     */
    /**
     * 设置最后更新标签
     *
     * @param {?} label 标签内容（支持HTML）
     * @return {?}
     */
    PTRComponent.prototype.setLastUpdatedLabel = /**
     * 设置最后更新标签
     *
     * @param {?} label 标签内容（支持HTML）
     * @return {?}
     */
    function (label) {
        this._lastLabel = label;
    };
    /**
     * 设置刷新成功
     *
     * @param [lastUpdatedLabel] label 标签内容（支持HTML）
     */
    /**
     * 设置刷新成功
     *
     * @param {?=} lastUpdatedLabel
     * @return {?}
     */
    PTRComponent.prototype.setFinished = /**
     * 设置刷新成功
     *
     * @param {?=} lastUpdatedLabel
     * @return {?}
     */
    function (lastUpdatedLabel) {
        var _this = this;
        this._pullPercent = 0;
        this.loading = false;
        this._animating = true;
        if (!this.touching) {
            setTimeout(function () {
                _this._animating = false;
                if (lastUpdatedLabel)
                    _this.setLastUpdatedLabel(lastUpdatedLabel);
            }, 350);
        }
    };
    /**
     * @param {?} $event
     * @return {?}
     */
    PTRComponent.prototype.onTouchStart = /**
     * @param {?} $event
     * @return {?}
     */
    function ($event) {
        if (this.disabled || this.touching || this.loading)
            return;
        this.touching = true;
        this.touchId = $event.targetTouches[0].identifier;
        this.ogY = this._pullPercent === 0 ? $event.targetTouches[0].pageY : $event.targetTouches[0].pageY - this._pullPercent;
        this.initScrollTop = this.contentEl.scrollTop;
        this._animating = false;
    };
    /**
     * @param {?} $event
     * @return {?}
     */
    PTRComponent.prototype.onTouchMove = /**
     * @param {?} $event
     * @return {?}
     */
    function ($event) {
        if (this.disabled || !this.touching || this.loading)
            return;
        if ($event.targetTouches[0].identifier !== this.touchId)
            return;
        var /** @type {?} */ pageY = $event.targetTouches[0].pageY;
        var /** @type {?} */ diffY = pageY - this.ogY;
        // if it's scroll
        if (diffY < 0)
            return;
        // if it's not at top
        if (this.contentEl.scrollTop > 0)
            return;
        $event.preventDefault();
        // let diffY = Math.abs(this.ogY - pageY);
        this._pullPercent = (diffY - this.initScrollTop) > 100 ? 100 : (diffY - this.initScrollTop);
        this.scroll.emit(this._pullPercent);
    };
    /**
     * @param {?} $event
     * @return {?}
     */
    PTRComponent.prototype.onTouchEnd = /**
     * @param {?} $event
     * @return {?}
     */
    function ($event) {
        if (this.disabled || !this.touching || this.loading)
            return;
        var /** @type {?} */ _pullPercent = this._pullPercent;
        var /** @type {?} */ loading = false;
        if (_pullPercent >= this.config.treshold) {
            loading = true;
        }
        else {
            _pullPercent = 0;
        }
        this.touching = false;
        this.ogY = 0;
        this.touchId = undefined;
        this.initScrollTop = 0;
        this._animating = loading;
        this._pullPercent = _pullPercent;
        this.loading = loading;
        if (loading)
            this.refresh.emit(this);
    };
    /**
     * @return {?}
     */
    PTRComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        this.parseConfig();
        this.contentEl = this.el.nativeElement.querySelector('.weui-ptr__content');
    };
    /**
     * @param {?} changes
     * @return {?}
     */
    PTRComponent.prototype.ngOnChanges = /**
     * @param {?} changes
     * @return {?}
     */
    function (changes) {
        if ('config' in changes)
            this.parseConfig();
    };
    /**
     * @return {?}
     */
    PTRComponent.prototype.parseConfig = /**
     * @return {?}
     */
    function () {
        this.config = Object.assign({}, this.DEF, this.config);
        var /** @type {?} */ el = this.el.nativeElement;
        this.loaderEl = el.querySelector('.weui-ptr__loader');
        this.iconEl = el.querySelector('.weui-ptr__icon');
    };
    PTRComponent.decorators = [
        { type: core.Component, args: [{
                    selector: 'weui-ptr',
                    template: "\n        <div class=\"weui-ptr__loader\"\n            [ngStyle]=\"{\n                'height.px': config.height,\n                'margin-top.px': -config.height + (_pullPercent / (100 / config.height)),\n                'transition': _animating ? 'all .5s' : 'none'\n            }\">\n            <div style=\"flex: 1 1 0%; padding: 5px;\" *ngIf=\"!config.customIcon\">\n                <span [innerHTML]=\"_pullPercent !== 100 ? config.pullIcon : loading ? config.loadingIcon : config.successIcon\" class=\"weui-ptr__icon\" style=\"display:inline-block\"\n                    [ngStyle]=\"{\n                        'transform': 'rotate(' + -(_pullPercent !== 100 ? _pullPercent * 1.8 : 0) + 'deg)',\n                        'color': _pullPercent !== 100 ? '#5f5f5f' : '#1AAD19'\n                    }\"></span>\n                <p *ngIf=\"_lastLabel\" class=\"weui-ptr__label\">{{_lastLabel}}</p>\n            </div>\n            <ng-content select=\"[loader]\"></ng-content>\n        </div>\n        <div class=\"weui-ptr__content\"><ng-content></ng-content></div>\n    ",
                    host: {
                        '[class.weui-ptr]': 'true'
                    }
                },] },
    ];
    /** @nocollapse */
    PTRComponent.ctorParameters = function () { return [
        { type: core.ElementRef, },
        { type: PTRConfig, },
    ]; };
    PTRComponent.propDecorators = {
        "config": [{ type: core.Input },],
        "disabled": [{ type: core.Input },],
        "scroll": [{ type: core.Output },],
        "refresh": [{ type: core.Output },],
        "onTouchStart": [{ type: core.HostListener, args: ['touchstart', ['$event'],] },],
        "onTouchMove": [{ type: core.HostListener, args: ['touchmove', ['$event'],] },],
        "onTouchEnd": [{ type: core.HostListener, args: ['touchend', ['$event'],] }, { type: core.HostListener, args: ['touchcancel', ['$event'],] },],
    };
    return PTRComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
var PTRModule = /** @class */ (function () {
    function PTRModule() {
    }
    /**
     * @return {?}
     */
    PTRModule.forRoot = /**
     * @return {?}
     */
    function () {
        return { ngModule: PTRModule, providers: [PTRConfig] };
    };
    PTRModule.decorators = [
        { type: core.NgModule, args: [{
                    imports: [common.CommonModule],
                    declarations: [PTRComponent],
                    exports: [PTRComponent],
                    entryComponents: [PTRComponent]
                },] },
    ];
    /** @nocollapse */
    PTRModule.ctorParameters = function () { return []; };
    return PTRModule;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
var InfiniteLoaderConfig = /** @class */ (function () {
    function InfiniteLoaderConfig() {
        /**
         * 容器高度，默认：`100vh`
         */
        this.height = '100vh';
        /**
         * 滚动至x%时触发加载，默认：75%
         */
        this.percent = 75;
        /**
         * 加载中文本（支持HTML），默认：weui-loadmore 组件
         */
        this.loading = '<div class="weui-loadmore"><i class="weui-loading"></i><span class="weui-loadmore__tips">加载中…</span></div>';
        /**
         * 完成所有数据加载文本（支持HTML），默认：weui-loadmore 组件
         */
        this.finished = '<div class="weui-loadmore weui-loadmore_line"><span class="weui-loadmore__tips">已加载完毕</span></div>';
        /**
         * 滚动节流时长（单位：ms），默认：`100`
         */
        this.throttle = 100;
    }
    InfiniteLoaderConfig.decorators = [
        { type: core.Injectable },
    ];
    /** @nocollapse */
    InfiniteLoaderConfig.ctorParameters = function () { return []; };
    return InfiniteLoaderConfig;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
var InfiniteLoaderComponent = /** @class */ (function () {
    function InfiniteLoaderComponent(el, zone, DEF) {
        this.el = el;
        this.zone = zone;
        this.DEF = DEF;
        this.didScroll = false;
        this.scrollEvent = null;
        this.scrollTime = null;
        this._loading = false;
        this._finished = false;
        /**
         * 加载更多回调
         */
        this.loadmore = new core.EventEmitter();
    }
    /** 设置本次加载完成 */
    /**
     * 设置本次加载完成
     * @return {?}
     */
    InfiniteLoaderComponent.prototype.resolveLoading = /**
     * 设置本次加载完成
     * @return {?}
     */
    function () {
        this._loading = false;
        this._finished = false;
    };
    /** 设置结束 */
    /**
     * 设置结束
     * @return {?}
     */
    InfiniteLoaderComponent.prototype.setFinished = /**
     * 设置结束
     * @return {?}
     */
    function () {
        this._loading = false;
        this._finished = true;
    };
    /** 设置重新开始 */
    /**
     * 设置重新开始
     * @return {?}
     */
    InfiniteLoaderComponent.prototype.restart = /**
     * 设置重新开始
     * @return {?}
     */
    function () {
        this._finished = false;
    };
    /**
     * @return {?}
     */
    InfiniteLoaderComponent.prototype._onScroll = /**
     * @return {?}
     */
    function () {
        if (this._loading || this._finished)
            return;
        var /** @type {?} */ target = this.scrollEvent.target;
        var /** @type {?} */ scrollPercent = Math.floor(((target.scrollTop + target.clientHeight) / target.scrollHeight) * 100);
        if (scrollPercent > this.config.percent) {
            this._loading = true;
            this.loadmore.emit(this);
        }
    };
    /**
     * @return {?}
     */
    InfiniteLoaderComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.parseConfig();
        this.scrollTime = setInterval(function () {
            if (_this.didScroll) {
                _this.didScroll = false;
                _this._onScroll();
            }
        }, this.config.throttle);
        this.disposeScroller = FromEventObservable.FromEventObservable.create(this.el.nativeElement.querySelector('.weui-infiniteloader__content'), 'scroll')
            .subscribe(function ($event) {
            _this.scrollEvent = $event;
            _this.didScroll = true;
        });
    };
    /**
     * @param {?} changes
     * @return {?}
     */
    InfiniteLoaderComponent.prototype.ngOnChanges = /**
     * @param {?} changes
     * @return {?}
     */
    function (changes) {
        if ('config' in changes)
            this.parseConfig();
    };
    /**
     * @return {?}
     */
    InfiniteLoaderComponent.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        if (this.scrollTime)
            clearTimeout(this.scrollTime);
        if (this.disposeScroller)
            this.disposeScroller.unsubscribe();
    };
    /**
     * @return {?}
     */
    InfiniteLoaderComponent.prototype.parseConfig = /**
     * @return {?}
     */
    function () {
        this.config = Object.assign({}, this.DEF, this.config);
    };
    InfiniteLoaderComponent.decorators = [
        { type: core.Component, args: [{
                    selector: 'weui-infiniteloader',
                    template: "\n        <div class=\"weui-infiniteloader__content\">\n            <ng-content></ng-content>\n            <div *ngIf=\"_loading || _finished\">\n                <div *ngIf=\"_loading\" [innerHTML]=\"config.loading\"></div>\n                <div *ngIf=\"_finished\" [innerHTML]=\"config.finished\"></div>\n            </div>\n        </div>\n    ",
                    host: {
                        '[class.weui-infiniteloader]': 'true',
                        '[style.height]': 'config.height'
                    }
                },] },
    ];
    /** @nocollapse */
    InfiniteLoaderComponent.ctorParameters = function () { return [
        { type: core.ElementRef, },
        { type: core.NgZone, },
        { type: InfiniteLoaderConfig, },
    ]; };
    InfiniteLoaderComponent.propDecorators = {
        "config": [{ type: core.Input },],
        "loadmore": [{ type: core.Output },],
    };
    return InfiniteLoaderComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
var InfiniteLoaderModule = /** @class */ (function () {
    function InfiniteLoaderModule() {
    }
    /**
     * @return {?}
     */
    InfiniteLoaderModule.forRoot = /**
     * @return {?}
     */
    function () {
        return { ngModule: InfiniteLoaderModule, providers: [InfiniteLoaderConfig] };
    };
    InfiniteLoaderModule.decorators = [
        { type: core.NgModule, args: [{
                    imports: [common.CommonModule],
                    declarations: [InfiniteLoaderComponent],
                    exports: [InfiniteLoaderComponent],
                    entryComponents: [InfiniteLoaderComponent]
                },] },
    ];
    /** @nocollapse */
    InfiniteLoaderModule.ctorParameters = function () { return []; };
    return InfiniteLoaderModule;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
var SidebarConfig = /** @class */ (function () {
    function SidebarConfig() {
        /**
         * 位置方向，默认：`left`
         */
        this.position = 'left';
        /**
         * 类型，默认：`slide`
         * - over: 不覆盖
         * - slide：侧边移动
         */
        this.mode = 'slide';
        /**
         * 允许点击背景关闭，默认：`true`
         */
        this.backdrop = true;
    }
    SidebarConfig.decorators = [
        { type: core.Injectable },
    ];
    /** @nocollapse */
    SidebarConfig.ctorParameters = function () { return []; };
    return SidebarConfig;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * \@docs-private
 */
var SidebarService = /** @class */ (function () {
    function SidebarService() {
        this._openObserver = new Subject.Subject();
        this._closeObserver = new Subject.Subject();
    }
    /**
     * @return {?}
     */
    SidebarService.prototype.open = /**
     * @return {?}
     */
    function () {
        this._openObserver.next();
    };
    /**
     * @return {?}
     */
    SidebarService.prototype.close = /**
     * @return {?}
     */
    function () {
        this._closeObserver.next();
    };
    /**
     * @param {?} fn
     * @return {?}
     */
    SidebarService.prototype.onOpen = /**
     * @param {?} fn
     * @return {?}
     */
    function (fn) {
        return this._openObserver.subscribe(fn);
    };
    /**
     * @param {?} fn
     * @return {?}
     */
    SidebarService.prototype.onClose = /**
     * @param {?} fn
     * @return {?}
     */
    function (fn) {
        return this._closeObserver.subscribe(fn);
    };
    SidebarService.decorators = [
        { type: core.Injectable },
    ];
    /** @nocollapse */
    SidebarService.ctorParameters = function () { return []; };
    return SidebarService;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * 侧边栏
 */
var SidebarComponent = /** @class */ (function () {
    function SidebarComponent(_sidebarService, config) {
        this._sidebarService = _sidebarService;
        /**
         * 状态，true表示打开，false表示关闭
         */
        this.status = false;
        this.statusChange = new core.EventEmitter();
        /**
         * 位置方向，默认：`left`
         */
        this.position = 'left';
        /**
         * 类型，默认：`slide`
         * - over: 不覆盖
         * - slide：侧边移动
         */
        this.mode = 'slide';
        /**
         * 允许点击背景关闭，默认：`true`
         */
        this.backdrop = true;
        /**
         * 打开前回调
         */
        this.openStart = new core.EventEmitter();
        /**
         * 打开后回调
         */
        this.opened = new core.EventEmitter();
        /**
         * 关闭前回调
         */
        this.closeStart = new core.EventEmitter();
        /**
         * 关闭后回调
         */
        this.closed = new core.EventEmitter();
        /**
         * 模式变更通知
         */
        this.modeChange = new core.EventEmitter();
        /**
         * 位置变更通知
         */
        this.positionChange = new core.EventEmitter();
        this._rerender = new core.EventEmitter();
        this._clickEvent = 'click';
        this._onClickOutsideAttached = false;
        this._anting = false;
        Object.assign(this, config);
        if (isIOS() && 'ontouchstart' in window) {
            this._clickEvent = 'touchstart';
        }
        this.open = this.open.bind(this);
        this.close = this.close.bind(this);
        this._onClickOutside = this._onClickOutside.bind(this);
        this._openSub = this._sidebarService.onOpen(this.open);
        this._closeSub = this._sidebarService.onClose(this.close);
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    SidebarComponent.prototype.ngOnChanges = /**
     * @param {?} changes
     * @return {?}
     */
    function (changes) {
        if ('status' in changes && !this._anting) {
            if (changes['status'].currentValue) {
                this.open();
            }
            else {
                this.close();
            }
            if (changes['status'].firstChange)
                this._anting = false;
        }
        if ('mode' in changes) {
            this.modeChange.emit(changes['mode'].currentValue);
        }
        if ('position' in changes) {
            this.positionChange.emit(changes['position'].currentValue);
        }
        if ('backdrop' in changes) {
            this._initCloseListeners();
        }
    };
    /**
     * @return {?}
     */
    SidebarComponent.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        this._destroyCloseListeners();
        if (this._openSub) {
            this._openSub.unsubscribe();
        }
        if (this._closeSub) {
            this._closeSub.unsubscribe();
        }
    };
    /** 打开侧边栏 */
    /**
     * 打开侧边栏
     * @return {?}
     */
    SidebarComponent.prototype.open = /**
     * 打开侧边栏
     * @return {?}
     */
    function () {
        this._anting = true;
        this.status = true;
        this.statusChange.emit(true);
        this.openStart.emit();
        this.closeAnt();
    };
    /** 关闭侧边栏 */
    /**
     * 关闭侧边栏
     * @return {?}
     */
    SidebarComponent.prototype.close = /**
     * 关闭侧边栏
     * @return {?}
     */
    function () {
        this._anting = true;
        this.status = false;
        this.statusChange.emit(false);
        this.closeStart.emit();
        this.closeAnt();
    };
    /** 手动触发容器的重新渲染 */
    /**
     * 手动触发容器的重新渲染
     * @return {?}
     */
    SidebarComponent.prototype._triggerRerender = /**
     * 手动触发容器的重新渲染
     * @return {?}
     */
    function () {
        this._rerender.emit();
    };
    /**
     * @return {?}
     */
    SidebarComponent.prototype._getStyle = /**
     * @return {?}
     */
    function () {
        var /** @type {?} */ transformStyle = 'none';
        var /** @type {?} */ marginStyle = {};
        var /** @type {?} */ isSlideMode = this.mode === 'slide';
        if (!this.status || isSlideMode) {
            transformStyle = "translate" + ((this.position === 'left' || this.position === 'right') ? 'X' : 'Y');
            var /** @type {?} */ isLeftOrTop = this.position === 'left' || this.position === 'top';
            var /** @type {?} */ translateAmt = (isLeftOrTop ? '-' : '') + "100%";
            transformStyle += "(" + translateAmt + ")";
        }
        return /** @type {?} */ (Object.assign(marginStyle, {
            webkitTransform: transformStyle,
            transform: transformStyle
        }));
    };
    /**
     * @return {?}
     */
    SidebarComponent.prototype.closeAnt = /**
     * @return {?}
     */
    function () {
        var _this = this;
        setTimeout(function () {
            _this._anting = false;
            if (_this.status) {
                _this._initCloseListeners();
                _this.opened.emit();
            }
            else {
                _this._destroyCloseListeners();
                _this.closed.emit();
            }
        }, 300);
    };
    /**
     * @return {?}
     */
    SidebarComponent.prototype._initCloseListeners = /**
     * @return {?}
     */
    function () {
        var _this = this;
        if (this.status && this.backdrop) {
            setTimeout(function () {
                if (_this.backdrop && !_this._onClickOutsideAttached) {
                    document.addEventListener(_this._clickEvent, _this._onClickOutside);
                    _this._onClickOutsideAttached = true;
                }
            });
        }
    };
    /**
     * @return {?}
     */
    SidebarComponent.prototype._destroyCloseListeners = /**
     * @return {?}
     */
    function () {
        if (this._onClickOutsideAttached) {
            document.removeEventListener(this._clickEvent, this._onClickOutside);
            this._onClickOutsideAttached = false;
        }
    };
    /**
     * @param {?} e
     * @return {?}
     */
    SidebarComponent.prototype._onClickOutside = /**
     * @param {?} e
     * @return {?}
     */
    function (e) {
        if (this._onClickOutsideAttached && this._elSidebar && !this._elSidebar.nativeElement.contains(e.target)) {
            this.close();
        }
    };
    Object.defineProperty(SidebarComponent.prototype, "_height", {
        /** 获取侧边栏容器高度 */
        get: /**
         * 获取侧边栏容器高度
         * @return {?}
         */
        function () {
            return this._elSidebar.nativeElement ? this._elSidebar.nativeElement.offsetHeight : 0;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SidebarComponent.prototype, "_width", {
        /** 获取侧边栏容器宽度 */
        get: /**
         * 获取侧边栏容器宽度
         * @return {?}
         */
        function () {
            return this._elSidebar.nativeElement ? this._elSidebar.nativeElement.offsetWidth : 0;
        },
        enumerable: true,
        configurable: true
    });
    SidebarComponent.decorators = [
        { type: core.Component, args: [{
                    selector: 'weui-sidebar',
                    template: "\n    <aside #sidebar\n      role=\"complementary\"\n      [attr.aria-hidden]=\"!status\"\n      [attr.aria-label]=\"ariaLabel\"\n      class=\"weui-sidebar weui-sidebar__{{status ? 'opened' : 'closed'}} weui-sidebar__{{position}} weui-sidebar__{{mode}}\"\n      [class.weui-sidebar__inert]=\"!status\"\n      [ngClass]=\"sidebarClass\"\n      [ngStyle]=\"_getStyle()\">\n      <ng-content></ng-content>\n    </aside>\n    ",
                    changeDetection: core.ChangeDetectionStrategy.OnPush
                },] },
    ];
    /** @nocollapse */
    SidebarComponent.ctorParameters = function () { return [
        { type: SidebarService, },
        { type: SidebarConfig, },
    ]; };
    SidebarComponent.propDecorators = {
        "status": [{ type: core.Input },],
        "statusChange": [{ type: core.Output },],
        "position": [{ type: core.Input },],
        "mode": [{ type: core.Input },],
        "backdrop": [{ type: core.Input },],
        "sidebarClass": [{ type: core.Input },],
        "ariaLabel": [{ type: core.Input },],
        "openStart": [{ type: core.Output },],
        "opened": [{ type: core.Output },],
        "closeStart": [{ type: core.Output },],
        "closed": [{ type: core.Output },],
        "modeChange": [{ type: core.Output },],
        "positionChange": [{ type: core.Output },],
        "_rerender": [{ type: core.Output },],
        "_elSidebar": [{ type: core.ViewChild, args: ['sidebar',] },],
    };
    return SidebarComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * 侧边栏容器
 */
var SidebarContainerComponent = /** @class */ (function () {
    function SidebarContainerComponent(_ref, _el) {
        this._ref = _ref;
        this._el = _el;
        this._showBackdrop = false;
        this._showBackdropChange = new core.EventEmitter();
        this.orgOverflowX = '';
    }
    /**
     * @return {?}
     */
    SidebarContainerComponent.prototype.ngAfterContentInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this._onToggle();
        this._subscribe();
        this._sidebars.changes.subscribe(function () {
            _this._unsubscribe();
            _this._subscribe();
        });
    };
    /**
     * @param {?} changes
     * @return {?}
     */
    SidebarContainerComponent.prototype.ngOnChanges = /**
     * @param {?} changes
     * @return {?}
     */
    function (changes) {
        if ('_showBackdrop' in changes) {
            this._showBackdropChange.emit(changes['_showBackdrop'].currentValue);
        }
    };
    /**
     * @return {?}
     */
    SidebarContainerComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        var /** @type {?} */ $body = document.querySelector('body');
        this.orgOverflowX = $body.style.overflowX;
        $body.style.overflowX = 'hidden';
    };
    /**
     * @return {?}
     */
    SidebarContainerComponent.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        this._unsubscribe();
        document.querySelector('body').style.overflowX = this.orgOverflowX;
    };
    /**
     * @return {?}
     */
    SidebarContainerComponent.prototype._getStyles = /**
     * @return {?}
     */
    function () {
        var _this = this;
        if (this._sidebars) {
            this._sidebars.forEach(function (sidebar) {
                if (!sidebar) {
                    return;
                }
                if (sidebar.mode === 'slide') {
                    var /** @type {?} */ transformStyle = null;
                    if (sidebar.status) {
                        var /** @type {?} */ isLeftOrTop = sidebar.position === 'left' || sidebar.position === 'top';
                        var /** @type {?} */ isLeftOrRight = sidebar.position === 'left' || sidebar.position === 'right';
                        var /** @type {?} */ transformDir = isLeftOrRight ? 'X' : 'Y';
                        var /** @type {?} */ transformAmt = "" + (isLeftOrTop ? '' : '-') + (isLeftOrRight ? sidebar._width : sidebar._height);
                        transformStyle = "translate" + transformDir + "(" + transformAmt + "px)";
                    }
                    _this._el.nativeElement.style.transform = transformStyle;
                }
            });
        }
        return /** @type {?} */ ({
            margin: "0px 0px 0px 0px"
        });
    };
    /**
     * @param {?} $event
     * @return {?}
     */
    SidebarContainerComponent.prototype._onBackdropClicked = /**
     * @param {?} $event
     * @return {?}
     */
    function ($event) {
        $event.preventDefault();
        $event.stopPropagation();
        this._sidebars.forEach(function (sidebar) {
            if (sidebar.status && sidebar.backdrop) {
                sidebar.close();
            }
        });
        return false;
    };
    /**
     * @return {?}
     */
    SidebarContainerComponent.prototype._subscribe = /**
     * @return {?}
     */
    function () {
        var _this = this;
        if (this._sidebars) {
            this._sidebars.forEach(function (sidebar) {
                if (!sidebar) {
                    return;
                }
                sidebar.openStart.subscribe(function () { return _this._onToggle(); });
                sidebar.opened.subscribe(function () { return _this._markForCheck(); });
                sidebar.closeStart.subscribe(function () { return _this._onToggle(); });
                sidebar.closed.subscribe(function () { return _this._markForCheck(); });
                sidebar.modeChange.subscribe(function () { return _this._markForCheck(); });
                sidebar.positionChange.subscribe(function () { return _this._markForCheck(); });
                sidebar._rerender.subscribe(function () { return _this._markForCheck(); });
            });
        }
    };
    /**
     * @return {?}
     */
    SidebarContainerComponent.prototype._unsubscribe = /**
     * @return {?}
     */
    function () {
        if (this._sidebars) {
            this._sidebars.forEach(function (sidebar) {
                if (!sidebar) {
                    return;
                }
                sidebar.openStart.unsubscribe();
                sidebar.opened.unsubscribe();
                sidebar.closeStart.unsubscribe();
                sidebar.closed.unsubscribe();
                sidebar.modeChange.unsubscribe();
                sidebar.positionChange.unsubscribe();
                sidebar._rerender.unsubscribe();
            });
        }
    };
    /**
     * 状态变更时重新计算样式
     * @return {?}
     */
    SidebarContainerComponent.prototype._markForCheck = /**
     * 状态变更时重新计算样式
     * @return {?}
     */
    function () {
        this._ref.markForCheck();
    };
    /**
     * @return {?}
     */
    SidebarContainerComponent.prototype._onToggle = /**
     * @return {?}
     */
    function () {
        if (this._sidebars) {
            var /** @type {?} */ hasOpen = false;
            var /** @type {?} */ _sidebars = this._sidebars.toArray();
            for (var /** @type {?} */ i = 0; i < _sidebars.length; i++) {
                var /** @type {?} */ sidebar = _sidebars[i];
                if (sidebar.status) {
                    hasOpen = true;
                    break;
                }
            }
            this._showBackdrop = hasOpen;
            this._showBackdropChange.emit(hasOpen);
        }
        this._markForCheck();
    };
    SidebarContainerComponent.decorators = [
        { type: core.Component, args: [{
                    selector: 'weui-sidebar-container',
                    template: "\n        <ng-content select=\"weui-sidebar\"></ng-content>\n        <div *ngIf=\"_showBackdrop\" aria-hidden=\"true\" class=\"weui-mask\" (click)=\"_onBackdropClicked($event)\"></div>\n        <div class=\"weui-sidebar__content\" [ngStyle]=\"_getStyles()\">\n            <ng-content></ng-content>\n        </div>\n    ",
                    changeDetection: core.ChangeDetectionStrategy.OnPush
                },] },
    ];
    /** @nocollapse */
    SidebarContainerComponent.ctorParameters = function () { return [
        { type: core.ChangeDetectorRef, },
        { type: core.ElementRef, },
    ]; };
    SidebarContainerComponent.propDecorators = {
        "_sidebars": [{ type: core.ContentChildren, args: [SidebarComponent,] },],
        "_showBackdrop": [{ type: core.Input },],
        "_showBackdropChange": [{ type: core.Output },],
    };
    return SidebarContainerComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * 关闭侧边栏指令
 */
var CloseSidebarDirective = /** @class */ (function () {
    function CloseSidebarDirective(_sidebarService) {
        this._sidebarService = _sidebarService;
    }
    /**
     * @return {?}
     */
    CloseSidebarDirective.prototype._onClick = /**
     * @return {?}
     */
    function () {
        this._sidebarService.close();
    };
    CloseSidebarDirective.decorators = [
        { type: core.Directive, args: [{ selector: '[closeSidebar]' },] },
    ];
    /** @nocollapse */
    CloseSidebarDirective.ctorParameters = function () { return [
        { type: SidebarService, },
    ]; };
    CloseSidebarDirective.propDecorators = {
        "_onClick": [{ type: core.HostListener, args: ['click',] },],
    };
    return CloseSidebarDirective;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
var SidebarModule = /** @class */ (function () {
    function SidebarModule() {
    }
    /**
     * @return {?}
     */
    SidebarModule.forRoot = /**
     * @return {?}
     */
    function () {
        return { ngModule: SidebarModule, providers: [SidebarConfig] };
    };
    SidebarModule.decorators = [
        { type: core.NgModule, args: [{
                    imports: [common.CommonModule],
                    declarations: [SidebarContainerComponent, SidebarComponent, CloseSidebarDirective],
                    exports: [SidebarContainerComponent, SidebarComponent, CloseSidebarDirective],
                    providers: [SidebarService]
                },] },
    ];
    /** @nocollapse */
    SidebarModule.ctorParameters = function () { return []; };
    return SidebarModule;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
var SwiperConfig = /** @class */ (function () {
    function SwiperConfig() {
        /**
         * 等同于swiper[参数项](http://idangero.us/swiper/api/)
         */
        this.options = {
            loop: true,
            pagination: '.swiper-pagination'
        };
    }
    SwiperConfig.decorators = [
        { type: core.Injectable },
    ];
    /** @nocollapse */
    SwiperConfig.ctorParameters = function () { return []; };
    return SwiperConfig;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
var SwiperComponent = /** @class */ (function () {
    function SwiperComponent(el, zone, DEF) {
        this.el = el;
        this.zone = zone;
        this.DEF = DEF;
    }
    /**
     * @return {?}
     */
    SwiperComponent.prototype.initOptions = /**
     * @return {?}
     */
    function () {
        this.options = Object.assign({}, this.DEF.options, this.options);
    };
    /**
     * @return {?}
     */
    SwiperComponent.prototype.init = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.destroy();
        this.zone.runOutsideAngular(function () {
            _this.swiper = new Swiper(_this.containerEl, _this.options);
        });
    };
    /**
     * @return {?}
     */
    SwiperComponent.prototype.destroy = /**
     * @return {?}
     */
    function () {
        var _this = this;
        if (this.containerEl) {
            ['horizontal', 'vertical'].forEach(function (v) {
                _this.containerEl.classList.remove('swiper-container-' + v);
            });
        }
        if (this.swiper) {
            this.zone.runOutsideAngular(function () {
                _this.swiper.destroy(true, false);
                _this.swiper = null;
            });
        }
    };
    /**
     * @return {?}
     */
    SwiperComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        if (!this.options)
            this.initOptions();
        this.containerEl = this.el.nativeElement.querySelector('.swiper-container');
        if (!this.containerEl)
            throw new Error('组件内容的HTML跟swiper所需要的DOM结构必须完全一样。');
    };
    /**
     * @return {?}
     */
    SwiperComponent.prototype.ngAfterViewInit = /**
     * @return {?}
     */
    function () {
        this.init();
    };
    /**
     * @param {?} changes
     * @return {?}
     */
    SwiperComponent.prototype.ngOnChanges = /**
     * @param {?} changes
     * @return {?}
     */
    function (changes) {
        if ('options' in changes) {
            this.initOptions();
            if (!changes['options'].firstChange) {
                this.init();
            }
        }
    };
    /**
     * @return {?}
     */
    SwiperComponent.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        this.destroy();
    };
    SwiperComponent.decorators = [
        { type: core.Component, args: [{
                    selector: 'weui-swiper',
                    template: "<ng-content></ng-content>"
                },] },
    ];
    /** @nocollapse */
    SwiperComponent.ctorParameters = function () { return [
        { type: core.ElementRef, },
        { type: core.NgZone, },
        { type: SwiperConfig, },
    ]; };
    SwiperComponent.propDecorators = {
        "options": [{ type: core.Input },],
    };
    return SwiperComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
var SwiperModule = /** @class */ (function () {
    function SwiperModule() {
    }
    /**
     * @return {?}
     */
    SwiperModule.forRoot = /**
     * @return {?}
     */
    function () {
        return { ngModule: SwiperModule, providers: [SwiperConfig] };
    };
    SwiperModule.decorators = [
        { type: core.NgModule, args: [{
                    imports: [common.CommonModule, forms.FormsModule],
                    declarations: [SwiperComponent],
                    exports: [SwiperComponent],
                    providers: [SwiperConfig]
                },] },
    ];
    /** @nocollapse */
    SwiperModule.ctorParameters = function () { return []; };
    return SwiperModule;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
var ChartG2Directive = /** @class */ (function () {
    function ChartG2Directive(el, zone) {
        this.el = el;
        this.zone = zone;
        this.initFlag = false;
    }
    Object.defineProperty(ChartG2Directive.prototype, "chart", {
        /**
         * chart实例对象
         */
        get: /**
         * chart实例对象
         * @return {?}
         */
        function () {
            return this._chart;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ChartG2Directive.prototype, "GM", {
        /**
         * GM对象
         */
        get: /**
         * GM对象
         * @return {?}
         */
        function () {
            return GM;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    ChartG2Directive.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        this.initFlag = true;
        this.buildChart();
    };
    /**
     * @return {?}
     */
    ChartG2Directive.prototype.buildChart = /**
     * @return {?}
     */
    function () {
        var _this = this;
        var /** @type {?} */ object = {
            el: this.el.nativeElement
        };
        if (this.margin)
            object.margin = this.margin;
        this.zone.runOutsideAngular(function () {
            _this._chart = new GM.Chart(object);
        });
    };
    /**
     * @param {?} changes
     * @return {?}
     */
    ChartG2Directive.prototype.ngOnChanges = /**
     * @param {?} changes
     * @return {?}
     */
    function (changes) {
        if (this.initFlag) {
            if ('margin' in changes && !changes['margin'].firstChange) {
                this.buildChart();
            }
        }
    };
    /**
     * @return {?}
     */
    ChartG2Directive.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        var _this = this;
        if (this._chart) {
            this.zone.runOutsideAngular(function () {
                // fixed: TypeError: Cannot read property 'stop' of null
                try {
                    _this._chart.destroy();
                }
                catch (/** @type {?} */ e) {
                    console.warn(e);
                }
            });
        }
    };
    ChartG2Directive.decorators = [
        { type: core.Directive, args: [{ selector: 'canvas[weui-chart-g2]', exportAs: 'chart-g2' },] },
    ];
    /** @nocollapse */
    ChartG2Directive.ctorParameters = function () { return [
        { type: core.ElementRef, },
        { type: core.NgZone, },
    ]; };
    ChartG2Directive.propDecorators = {
        "margin": [{ type: core.Input },],
    };
    return ChartG2Directive;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
var ChartG2Module = /** @class */ (function () {
    function ChartG2Module() {
    }
    /**
     * @return {?}
     */
    ChartG2Module.forRoot = /**
     * @return {?}
     */
    function () {
        return { ngModule: ChartG2Module, providers: [] };
    };
    ChartG2Module.decorators = [
        { type: core.NgModule, args: [{
                    imports: [common.CommonModule],
                    declarations: [ChartG2Directive],
                    exports: [ChartG2Directive]
                },] },
    ];
    /** @nocollapse */
    ChartG2Module.ctorParameters = function () { return []; };
    return ChartG2Module;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
var LoaderService = /** @class */ (function () {
    function LoaderService(doc) {
        this.doc = doc;
        this.list = {};
    }
    /**
     * @param {?} paths
     * @return {?}
     */
    LoaderService.prototype.load = /**
     * @param {?} paths
     * @return {?}
     */
    function (paths) {
        var _this = this;
        return new Promise(function (resolve, reject) {
            var /** @type {?} */ promises = [];
            if (!Array.isArray(paths))
                paths = [paths];
            (/** @type {?} */ (paths)).forEach(function (path) {
                if (path.endsWith('.css')) {
                    promises.push(_this.loadCss(path));
                }
                else {
                    promises.push(_this.loadScript(path));
                }
            });
            Promise.all(promises).then(function (res) {
                resolve(true);
            }).catch(function (err) {
                resolve(false);
            });
        });
    };
    /**
     * @param {?} path
     * @return {?}
     */
    LoaderService.prototype.loadScript = /**
     * @param {?} path
     * @return {?}
     */
    function (path) {
        var _this = this;
        return new Promise(function (resolve, reject) {
            if (_this.list[path] === true) {
                resolve(/** @type {?} */ ({
                    path: path,
                    loaded: true,
                    status: 'Loaded'
                }));
                return;
            }
            _this.list[path] = true;
            var /** @type {?} */ node = _this.doc.createElement('script');
            node.type = 'text/javascript';
            node.src = path;
            node.charset = 'utf-8';
            node.defer = true;
            node.onload = function () {
                resolve(/** @type {?} */ ({
                    path: path,
                    loaded: true,
                    status: 'Loaded'
                }));
            };
            node.onerror = function (error) {
                return resolve(/** @type {?} */ ({
                    path: path,
                    loaded: false,
                    status: 'Loaded'
                }));
            };
            _this.doc.getElementsByTagName('head')[0].appendChild(node);
        });
    };
    /**
     * @param {?} path
     * @return {?}
     */
    LoaderService.prototype.loadCss = /**
     * @param {?} path
     * @return {?}
     */
    function (path) {
        var _this = this;
        return new Promise(function (resolve, reject) {
            if (_this.list[path] === true) {
                resolve(/** @type {?} */ ({
                    path: path,
                    loaded: true,
                    status: 'Loaded'
                }));
                return;
            }
            _this.list[path] = true;
            var /** @type {?} */ node = _this.doc.createElement('link');
            node.rel = 'stylesheet';
            node.type = 'text/css';
            node.href = path;
            _this.doc.getElementsByTagName('head')[0].appendChild(node);
            resolve(/** @type {?} */ ({
                path: path,
                loaded: true,
                status: 'Loaded'
            }));
        });
    };
    LoaderService.decorators = [
        { type: core.Injectable },
    ];
    /** @nocollapse */
    LoaderService.ctorParameters = function () { return [
        { type: undefined, decorators: [{ type: core.Inject, args: [platformBrowser.DOCUMENT,] },] },
    ]; };
    return LoaderService;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
var JWeiXinService = /** @class */ (function () {
    function JWeiXinService(load) {
        this.load = load;
    }
    /**
     * 懒加载jweixin.js
     *
     * @param jweixinUrl 默认：//res.wx.qq.com/open/js/jweixin-1.2.0.js
     */
    /**
     * 懒加载jweixin.js
     *
     * @param {?=} jweixinUrl 默认：//res.wx.qq.com/open/js/jweixin-1.2.0.js
     * @return {?}
     */
    JWeiXinService.prototype.get = /**
     * 懒加载jweixin.js
     *
     * @param {?=} jweixinUrl 默认：//res.wx.qq.com/open/js/jweixin-1.2.0.js
     * @return {?}
     */
    function (jweixinUrl) {
        var _this = this;
        return new Promise(function (resolve, reject) {
            _this.load.loadScript(jweixinUrl || '//res.wx.qq.com/open/js/jweixin-1.2.0.js').then(function (res) {
                resolve(res.loaded === true);
            }).catch(function () {
                resolve(false);
            });
        });
    };
    JWeiXinService.decorators = [
        { type: core.Injectable },
    ];
    /** @nocollapse */
    JWeiXinService.ctorParameters = function () { return [
        { type: LoaderService, },
    ]; };
    return JWeiXinService;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
var JWeiXinModule = /** @class */ (function () {
    function JWeiXinModule() {
    }
    /**
     * @return {?}
     */
    JWeiXinModule.forRoot = /**
     * @return {?}
     */
    function () {
        return { ngModule: JWeiXinModule, providers: [] };
    };
    JWeiXinModule.decorators = [
        { type: core.NgModule, args: [{
                    providers: [JWeiXinService, LoaderService]
                },] },
    ];
    /** @nocollapse */
    JWeiXinModule.ctorParameters = function () { return []; };
    return JWeiXinModule;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
var AccordionConfig = /** @class */ (function () {
    function AccordionConfig() {
        /**
         * 是否可折叠，`false` 表示保持只有一个可折叠，`true` 表示所有都允许，默认：`false`
         */
        this.collapsible = false;
        /**
         * 自动展开第一次，默认：`true`
         */
        this.activeFirst = true;
        /**
         * 动画类型，`none` 无动画，`slide` 滑动，默认：`slide`
         */
        this.animate = 'slide';
    }
    AccordionConfig.decorators = [
        { type: core.Injectable },
    ];
    /** @nocollapse */
    AccordionConfig.ctorParameters = function () { return []; };
    return AccordionConfig;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
var AccordionComponent = /** @class */ (function () {
    function AccordionComponent(config) {
        /**
         * 是否可折叠，`true` 表示同时所有都允许展开，`false` 表示同时只允许一个展开，默认：`false`
         */
        this.collapsible = false;
        /**
         * 自动展开第一次，默认：`true`
         */
        this.activeFirst = true;
        /**
         * 动画类型，`none` 无动画，`slide` 滑动，默认：`slide`
         */
        this._animate = 'slide';
        /**
         * 展开时回调，参数为面板下标。
         */
        this.select = new core.EventEmitter();
        this.panels = [];
        Object.assign(this, config);
    }
    /**
     * @param {?} item
     * @return {?}
     */
    AccordionComponent.prototype._add = /**
     * @param {?} item
     * @return {?}
     */
    function (item) {
        this.panels.push(item);
        if (this.panels.length === 1 && this.activeFirst)
            item.active = true;
    };
    /**
     * @param {?} item
     * @return {?}
     */
    AccordionComponent.prototype._remove = /**
     * @param {?} item
     * @return {?}
     */
    function (item) {
        this.panels.splice(this.panels.indexOf(item), 1);
    };
    /**
     * @param {?} item
     * @return {?}
     */
    AccordionComponent.prototype._index = /**
     * @param {?} item
     * @return {?}
     */
    function (item) {
        return this.panels.indexOf(item);
    };
    /**
     * @param {?} cur
     * @return {?}
     */
    AccordionComponent.prototype._closeOthers = /**
     * @param {?} cur
     * @return {?}
     */
    function (cur) {
        if (this.collapsible)
            return;
        this.panels.forEach(function (panel) {
            if (!panel.disabled && panel !== cur)
                panel.active = false;
        });
    };
    AccordionComponent.decorators = [
        { type: core.Component, args: [{
                    selector: 'weui-accordion',
                    template: "<ng-content></ng-content>",
                    host: {
                        '[attr.aria-multiselectable]': 'closeOthers'
                    }
                },] },
    ];
    /** @nocollapse */
    AccordionComponent.ctorParameters = function () { return [
        { type: AccordionConfig, },
    ]; };
    AccordionComponent.propDecorators = {
        "collapsible": [{ type: core.Input },],
        "activeFirst": [{ type: core.Input },],
        "_animate": [{ type: core.Input },],
        "select": [{ type: core.Output },],
    };
    return AccordionComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
var AccordionPanelComponent = /** @class */ (function () {
    function AccordionPanelComponent(accordion) {
        this.accordion = accordion;
        /**
         * 是否禁止
         */
        this.disabled = false;
        this._active = false;
    }
    Object.defineProperty(AccordionPanelComponent.prototype, "active", {
        get: /**
         * 是否展开
         * @return {?}
         */
        function () {
            return this._active;
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._active = value;
            if (value)
                this.accordion._closeOthers(this);
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    AccordionPanelComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        this.accordion._add(this);
    };
    /**
     * @return {?}
     */
    AccordionPanelComponent.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        this.accordion._remove(this);
    };
    /**
     * @param {?} event
     * @return {?}
     */
    AccordionPanelComponent.prototype._toggle = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        if (!this.disabled) {
            this.active = !this.active;
            this.accordion.select.emit(this.accordion._index(this));
        }
    };
    AccordionPanelComponent.decorators = [
        { type: core.Component, args: [{
                    selector: 'weui-accordion-panel',
                    template: "\n    <div role=\"tab\" (click)=\"_toggle($event)\"><ng-content select=\"[heading]\"></ng-content></div>\n    <div role=\"tabpanel\" class=\"weui-accordion-content\"><ng-content></ng-content></div>\n    ",
                    host: {
                        '[class.weui-accordion-panel-disabled]': 'disabled',
                        '[class.weui-accordion-active]': 'active'
                    }
                },] },
    ];
    /** @nocollapse */
    AccordionPanelComponent.ctorParameters = function () { return [
        { type: AccordionComponent, decorators: [{ type: core.Inject, args: [AccordionComponent,] },] },
    ]; };
    AccordionPanelComponent.propDecorators = {
        "disabled": [{ type: core.Input },],
        "active": [{ type: core.Input },],
    };
    return AccordionPanelComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
var AccordionModule = /** @class */ (function () {
    function AccordionModule() {
    }
    /**
     * @return {?}
     */
    AccordionModule.forRoot = /**
     * @return {?}
     */
    function () {
        return { ngModule: AccordionModule, providers: [AccordionConfig] };
    };
    AccordionModule.decorators = [
        { type: core.NgModule, args: [{
                    imports: [common.CommonModule],
                    declarations: [AccordionPanelComponent, AccordionComponent],
                    exports: [AccordionPanelComponent, AccordionComponent],
                    providers: []
                },] },
    ];
    /** @nocollapse */
    AccordionModule.ctorParameters = function () { return []; };
    return AccordionModule;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
var RatingConfig = /** @class */ (function () {
    function RatingConfig() {
        /**
         * 图标数量（默认：5个）
         */
        this.max = 5;
        /**
         * 样式名
         */
        this.cls = '';
        /**
         * 未选中图标，默认：`weui-icon-circle`
         */
        this.stateOff = 'weui-icon-circle';
        /**
         * 选中图标，默认：`weui-icon-success`
         */
        this.stateOn = 'weui-icon-success';
        /**
         * 自定义图标，当存在时 `max`、`stateOff`、`stateOn` 失效
         */
        this.states = [];
        /**
         * 图标 `title` 属性值，默认以 `1` 开始的索引值
         */
        this.titles = [];
    }
    RatingConfig.decorators = [
        { type: core.Injectable },
    ];
    /** @nocollapse */
    RatingConfig.ctorParameters = function () { return []; };
    return RatingConfig;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
var RatingComponent = /** @class */ (function () {
    function RatingComponent(DEF) {
        this.DEF = DEF;
        /**
         * 是否只读模式，默认：`false`
         */
        this.readonly = false;
        /**
         * 选中后回调，参数：选中值
         */
        this.selected = new core.EventEmitter();
        this._class = '';
        this.onChange = Function.prototype;
        this.onTouched = Function.prototype;
    }
    /**
     * @param {?} cog
     * @return {?}
     */
    RatingComponent.prototype._setConfig = /**
     * @param {?} cog
     * @return {?}
     */
    function (cog) {
        var /** @type {?} */ _c = Object.assign({
            states: []
        }, this.DEF, cog);
        this._class = _c.cls || '';
        var /** @type {?} */ count = _c.states.length || _c.max;
        this._range = Array(count).fill(0).map(function (v, i) {
            return Object.assign({
                index: i,
                on: _c.stateOn,
                off: _c.stateOff,
                title: _c.titles[i] || i + 1
            }, _c.states[i] || {});
        });
    };
    /**
     * @param {?} changes
     * @return {?}
     */
    RatingComponent.prototype.ngOnChanges = /**
     * @param {?} changes
     * @return {?}
     */
    function (changes) {
        if (changes["config"]) {
            this._setConfig(changes["config"].currentValue);
        }
    };
    /**
     * @param {?} value
     * @return {?}
     */
    RatingComponent.prototype._rate = /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        if (!this.readonly && value >= 0 && value <= this._range.length) {
            this.writeValue(value);
            this.onChange(value);
        }
    };
    /**
     * @param {?} _value
     * @return {?}
     */
    RatingComponent.prototype.writeValue = /**
     * @param {?} _value
     * @return {?}
     */
    function (_value) {
        if (_value % 1 !== _value) {
            this._value = Math.round(_value);
            this._preValue = _value;
            return;
        }
        this._preValue = _value;
        this._value = _value;
    };
    /**
     * @param {?} fn
     * @return {?}
     */
    RatingComponent.prototype.registerOnChange = /**
     * @param {?} fn
     * @return {?}
     */
    function (fn) { this.onChange = fn; };
    /**
     * @param {?} fn
     * @return {?}
     */
    RatingComponent.prototype.registerOnTouched = /**
     * @param {?} fn
     * @return {?}
     */
    function (fn) { this.onTouched = fn; };
    /**
     * @param {?} isDisabled
     * @return {?}
     */
    RatingComponent.prototype.setDisabledState = /**
     * @param {?} isDisabled
     * @return {?}
     */
    function (isDisabled) {
    };
    RatingComponent.decorators = [
        { type: core.Component, args: [{
                    selector: 'weui-rating',
                    template: "\n        <span class=\"weui-rating__container{{_class ? ' ' + _class : ''}}\" tabindex=\"0\"\n            role=\"slider\" aria-valuemin=\"0\" [attr.aria-valuemax]=\"_range.length\" [attr.aria-valuenow]=\"_value\">\n            <ng-template ngFor let-r [ngForOf]=\"_range\" let-index=\"index\">\n                <span class=\"sr-only\">({{ index < _value ? '*' : ' ' }})</span>\n                <i (click)=\"_rate(index + 1)\" [ngClass]=\"index < _value ? r.on : r.off\" [title]=\"r.title\" ></i>\n            </ng-template>\n        </span>\n    ",
                    providers: [{
                            provide: forms.NG_VALUE_ACCESSOR,
                            useExisting: core.forwardRef(function () { return RatingComponent; }),
                            multi: true
                        }]
                },] },
    ];
    /** @nocollapse */
    RatingComponent.ctorParameters = function () { return [
        { type: RatingConfig, },
    ]; };
    RatingComponent.propDecorators = {
        "config": [{ type: core.Input },],
        "readonly": [{ type: core.Input },],
        "selected": [{ type: core.Output },],
    };
    return RatingComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
var RatingModule = /** @class */ (function () {
    function RatingModule() {
    }
    /**
     * @return {?}
     */
    RatingModule.forRoot = /**
     * @return {?}
     */
    function () {
        return { ngModule: RatingModule, providers: [RatingConfig] };
    };
    RatingModule.decorators = [
        { type: core.NgModule, args: [{
                    imports: [common.CommonModule],
                    declarations: [RatingComponent],
                    exports: [RatingComponent],
                    entryComponents: [RatingComponent]
                },] },
    ];
    /** @nocollapse */
    RatingModule.ctorParameters = function () { return []; };
    return RatingModule;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * Stepper 步进器，支持 `[(ngModel)]`
 */
var StepperComponent = /** @class */ (function () {
    function StepperComponent() {
        /**
         * 最小值
         */
        this.min = -Infinity;
        /**
         * 最大值
         */
        this.max = Infinity;
        /**
         * 禁用
         */
        this.disabled = false;
        /**
         * 变更时回调
         */
        this.change = new core.EventEmitter();
        this._step = 1;
        this._precisionStep = 0;
        this._precisionFactor = 1;
        this._disabledMinus = false;
        this._disabledPlus = false;
        this.onChange = Function.prototype;
        this.onTouched = Function.prototype;
    }
    Object.defineProperty(StepperComponent.prototype, "step", {
        get: /**
         * 步长，可以为小数
         * @return {?}
         */
        function () { return this._step; },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._step = value;
            var /** @type {?} */ stepString = value.toString();
            if (stepString.indexOf('e-') >= 0) {
                this._precisionStep = parseInt(stepString.slice(stepString.indexOf('e-')), 10);
            }
            if (stepString.indexOf('.') >= 0) {
                this._precisionStep = stepString.length - stepString.indexOf('.') - 1;
            }
            this._precisionFactor = Math.pow(10, this._precisionStep);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(StepperComponent.prototype, "value", {
        get: /**
         * @return {?}
         */
        function () { return this._value; },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            if (isNaN(value) || value === this.value)
                return;
            value = +value;
            if (value > this.max) {
                this._value = this.max;
                this.onChange(this.max);
            }
            else if (value < this.min) {
                this._value = this.min;
                this.onChange(this.min);
            }
            else {
                this._value = value;
                this._checkDisabled();
            }
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    StepperComponent.prototype._checkDisabled = /**
     * @return {?}
     */
    function () {
        this._disabledPlus = this.disabled || !((this.value + this.step) <= this.max);
        this._disabledMinus = this.disabled || !((this.value - this.step) >= this.min);
        return this;
    };
    /**
     * @return {?}
     */
    StepperComponent.prototype._notify = /**
     * @return {?}
     */
    function () {
        this.change.emit(this.value);
        this.onChange(this.value);
    };
    /**
     * @return {?}
     */
    StepperComponent.prototype._plus = /**
     * @return {?}
     */
    function () {
        if (this.value === undefined)
            this.value = this.max || 0;
        this._checkDisabled();
        if (this._disabledPlus)
            return;
        this.value = this._toPrecisionAsStep((this._precisionFactor * this.value + this._precisionFactor * this.step) / this._precisionFactor);
        this._checkDisabled()._notify();
    };
    /**
     * @return {?}
     */
    StepperComponent.prototype._minus = /**
     * @return {?}
     */
    function () {
        if (this.value === undefined)
            this.value = this.min || 0;
        this._checkDisabled();
        if (this._disabledMinus)
            return;
        this.value = this._toPrecisionAsStep((this._precisionFactor * this.value - this._precisionFactor * this.step) / this._precisionFactor);
        this._checkDisabled()._notify();
    };
    /**
     * @return {?}
     */
    StepperComponent.prototype._blur = /**
     * @return {?}
     */
    function () {
        var /** @type {?} */ el = this._inputNumber.nativeElement;
        this.value = +el.value;
        el.value = this.value;
        this._checkDisabled()._notify();
    };
    /**
     * @param {?} num
     * @return {?}
     */
    StepperComponent.prototype._toPrecisionAsStep = /**
     * @param {?} num
     * @return {?}
     */
    function (num) {
        if (isNaN(num) || num === '') {
            return num;
        }
        return Number(Number(num).toFixed(this._precisionStep));
    };
    /**
     * @param {?} value
     * @return {?}
     */
    StepperComponent.prototype.writeValue = /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        this.value = value;
        this._checkDisabled();
    };
    /**
     * @param {?} fn
     * @return {?}
     */
    StepperComponent.prototype.registerOnChange = /**
     * @param {?} fn
     * @return {?}
     */
    function (fn) { this.onChange = fn; };
    /**
     * @param {?} fn
     * @return {?}
     */
    StepperComponent.prototype.registerOnTouched = /**
     * @param {?} fn
     * @return {?}
     */
    function (fn) { this.onTouched = fn; };
    /**
     * @param {?} isDisabled
     * @return {?}
     */
    StepperComponent.prototype.setDisabledState = /**
     * @param {?} isDisabled
     * @return {?}
     */
    function (isDisabled) {
    };
    StepperComponent.decorators = [
        { type: core.Component, args: [{
                    selector: 'weui-stepper',
                    template: "\n    <span class=\"minus\" [ngClass]=\"{'disabled':_disabledMinus}\" (click)=\"_minus()\"><em>-</em></span>\n    <div class=\"input\">\n        <input type=\"tel\" #inputNumber [(ngModel)]=\"value\" (blur)=\"_blur()\"\n            [disabled]=\"disabled\"\n            [attr.min]=\"min\"\n            [attr.max]=\"max\"\n            [attr.step]=\"_step\"\n            autocomplete=\"off\">\n    </div>\n    <span class=\"plus\" [ngClass]=\"{'disabled':_disabledPlus}\" (click)=\"_plus()\"><em>+</em></span>\n    ",
                    providers: [{
                            provide: forms.NG_VALUE_ACCESSOR,
                            useExisting: core.forwardRef(function () { return StepperComponent; }),
                            multi: true
                        }]
                },] },
    ];
    /** @nocollapse */
    StepperComponent.ctorParameters = function () { return []; };
    StepperComponent.propDecorators = {
        "min": [{ type: core.Input },],
        "max": [{ type: core.Input },],
        "disabled": [{ type: core.Input }, { type: core.HostBinding, args: ['class.disabled',] },],
        "change": [{ type: core.Output },],
        "_inputNumber": [{ type: core.ViewChild, args: ['inputNumber',] },],
        "step": [{ type: core.Input },],
    };
    return StepperComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
var StepperModule = /** @class */ (function () {
    function StepperModule() {
    }
    /**
     * @return {?}
     */
    StepperModule.forRoot = /**
     * @return {?}
     */
    function () {
        return { ngModule: StepperModule, providers: [] };
    };
    StepperModule.decorators = [
        { type: core.NgModule, args: [{
                    imports: [common.CommonModule, forms.FormsModule],
                    declarations: [
                        StepperComponent
                    ],
                    exports: [
                        StepperComponent
                    ]
                },] },
    ];
    /** @nocollapse */
    StepperModule.ctorParameters = function () { return []; };
    return StepperModule;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
var PaginationConfig = /** @class */ (function () {
    function PaginationConfig() {
        /**
         * 形态，可选 `button`,`pointer`，默认：`button`
         */
        this.mode = 'button';
        /**
         * 是否隐藏数值，默认：`false`
         */
        this.simple = false;
        /**
         * 小号按钮，默认：`true`
         */
        this.mini = true;
        /**
         * 上一页文本（支持HTML），默认：`上一页`
         */
        this.prevText = '上一页';
        /**
         * 下一页文本（支持HTML），默认：`下一步`
         */
        this.nextText = '下一步';
    }
    PaginationConfig.decorators = [
        { type: core.Injectable },
    ];
    /** @nocollapse */
    PaginationConfig.ctorParameters = function () { return []; };
    return PaginationConfig;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
var PaginationComponent = /** @class */ (function () {
    function PaginationComponent(cog) {
        this._ptArr = [];
        /**
         * 当前索引
         */
        this.current = 0;
        /**
         * 数据总数
         */
        this.total = 0;
        /**
         * 小号按钮，默认：`true`
         */
        this.mini = true;
        /**
         * 分页触发的回调函数
         */
        this.change = new core.EventEmitter();
        this._prevDisabled = false;
        this._nextDisabled = false;
        Object.assign(this, cog);
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    PaginationComponent.prototype.ngOnChanges = /**
     * @param {?} changes
     * @return {?}
     */
    function (changes) {
        if (this.mode === 'pointer')
            this._ptArr = Array(this.total).fill(1).map(function (v, i) { return v + i; });
        this._checkDisabled();
    };
    /**
     * @return {?}
     */
    PaginationComponent.prototype._checkDisabled = /**
     * @return {?}
     */
    function () {
        if (this.mode === 'pointer')
            return;
        this._prevDisabled = this.current <= 1;
        this._nextDisabled = this.current >= this.total;
    };
    /**
     * @param {?} value
     * @return {?}
     */
    PaginationComponent.prototype._goto = /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        if (value === -1 && this._prevDisabled)
            return false;
        if (value === 1 && this._nextDisabled)
            return false;
        this.current += value;
        this._checkDisabled();
        this.change.emit(this.current);
    };
    PaginationComponent.decorators = [
        { type: core.Component, args: [{
                    selector: 'weui-pagination',
                    template: "\n    <ng-template [ngIf]=\"mode==='button'\">\n        <div class=\"weui-pagination__item weui-pagination__prev\">\n            <a weui-button (click)=\"_goto(-1)\" weui-plain [weui-mini]=\"mini\" weui-type=\"default\" [disabled]=\"_prevDisabled\" [innerHTML]=\"prevText\"></a>\n        </div>\n        <div class=\"weui-pagination__item weui-pagination__num\" *ngIf=\"!simple\">{{current}}/{{total}}</div>\n        <div class=\"weui-pagination__item weui-pagination__next\">\n            <a weui-button (click)=\"_goto(1)\" weui-plain [weui-mini]=\"mini\" weui-type=\"default\" [disabled]=\"_nextDisabled\" [innerHTML]=\"nextText\"></a>\n        </div>\n    </ng-template>\n    <div class=\"weui-pagination__item weui-pagination__num\" *ngIf=\"mode==='pointer'\">\n        <div *ngFor=\"let i of _ptArr\" class=\"weui-pagination__dot\" [class.weui-pagination__dot-active]=\"current === i\"><span></span></div>\n    </div>\n    ",
                    host: {
                        'class': 'weui-pagination'
                    }
                },] },
    ];
    /** @nocollapse */
    PaginationComponent.ctorParameters = function () { return [
        { type: PaginationConfig, },
    ]; };
    PaginationComponent.propDecorators = {
        "mode": [{ type: core.Input },],
        "current": [{ type: core.Input },],
        "total": [{ type: core.Input },],
        "simple": [{ type: core.Input },],
        "mini": [{ type: core.Input },],
        "prevText": [{ type: core.Input },],
        "nextText": [{ type: core.Input },],
        "change": [{ type: core.Output },],
    };
    return PaginationComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
var PaginationModule = /** @class */ (function () {
    function PaginationModule() {
    }
    /**
     * @return {?}
     */
    PaginationModule.forRoot = /**
     * @return {?}
     */
    function () {
        return { ngModule: PaginationModule, providers: [PaginationConfig] };
    };
    PaginationModule.decorators = [
        { type: core.NgModule, args: [{
                    imports: [common.CommonModule, ButtonModule.forRoot()],
                    declarations: [
                        PaginationComponent
                    ],
                    exports: [
                        PaginationComponent
                    ]
                },] },
    ];
    /** @nocollapse */
    PaginationModule.ctorParameters = function () { return []; };
    return PaginationModule;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
var MODULES = [
    CellModule, ButtonModule, FormModule, SliderModule, UploaderModule, ActionSheetModule,
    DialogModule, LoadmoreModule, ProgressModule, GalleryModule, PickerModule, SearchBarModule,
    TabModule, ToastModule, ToptipsModule, PopupModule, PTRModule, InfiniteLoaderModule,
    SidebarModule, SwiperModule, ChartG2Module, JWeiXinModule, AccordionModule, MaskModule,
    RatingModule, StepperModule, PaginationModule
];
var WeUiRootModule = /** @class */ (function () {
    function WeUiRootModule() {
    }
    WeUiRootModule.decorators = [
        { type: core.NgModule, args: [{
                    imports: [
                        CellModule.forRoot(), ButtonModule.forRoot(), FormModule.forRoot(), SliderModule.forRoot(), UploaderModule.forRoot(), ActionSheetModule.forRoot(),
                        DialogModule.forRoot(), LoadmoreModule.forRoot(), ProgressModule.forRoot(), GalleryModule.forRoot(), PickerModule.forRoot(), SearchBarModule.forRoot(),
                        TabModule.forRoot(), ToastModule.forRoot(), ToptipsModule.forRoot(), PopupModule.forRoot(), PTRModule.forRoot(), InfiniteLoaderModule.forRoot(),
                        SidebarModule.forRoot(), SwiperModule.forRoot(), ChartG2Module.forRoot(), JWeiXinModule.forRoot(), AccordionModule.forRoot(), MaskModule.forRoot(),
                        RatingModule.forRoot(), StepperModule.forRoot(), PaginationModule.forRoot()
                    ],
                    exports: MODULES
                },] },
    ];
    /** @nocollapse */
    WeUiRootModule.ctorParameters = function () { return []; };
    return WeUiRootModule;
}());
var WeUiModule = /** @class */ (function () {
    function WeUiModule() {
    }
    /**
     * @return {?}
     */
    WeUiModule.forRoot = /**
     * @return {?}
     */
    function () {
        return { ngModule: WeUiRootModule };
    };
    WeUiModule.decorators = [
        { type: core.NgModule, args: [{ exports: MODULES },] },
    ];
    /** @nocollapse */
    WeUiModule.ctorParameters = function () { return []; };
    return WeUiModule;
}());

exports.WeUiRootModule = WeUiRootModule;
exports.WeUiModule = WeUiModule;
exports.SwipeDirective = SwipeDirective;
exports.CellModule = CellModule;
exports.ButtonComponent = ButtonComponent;
exports.ButtonModule = ButtonModule;
exports.ButtonConfig = ButtonConfig;
exports.InputDirective = InputDirective;
exports.ChecklistDirective = ChecklistDirective;
exports.VCodeDirective = VCodeDirective;
exports.TextareaDirective = TextareaDirective;
exports.FormModule = FormModule;
exports.SliderDirective = SliderDirective;
exports.SliderModule = SliderModule;
exports.UploaderModule = UploaderModule;
exports.FileLikeObject = FileLikeObject;
exports.FileItem = FileItem;
exports.FileType = FileType;
exports.UploaderConfig = UploaderConfig;
exports.Uploader = Uploader;
exports.UploaderFileDirective = UploaderFileDirective;
exports.FileThumbDirective = FileThumbDirective;
exports.ActionSheetService = ActionSheetService;
exports.ActionSheetComponent = ActionSheetComponent;
exports.ActionSheetConfig = ActionSheetConfig;
exports.ActionSheetModule = ActionSheetModule;
exports.DialogService = DialogService;
exports.DialogComponent = DialogComponent;
exports.DialogConfig = DialogConfig;
exports.DialogModule = DialogModule;
exports.LoadmoreComponent = LoadmoreComponent;
exports.LoadmoreConfig = LoadmoreConfig;
exports.LoadmoreModule = LoadmoreModule;
exports.ProgressComponent = ProgressComponent;
exports.ProgressModule = ProgressModule;
exports.GalleryComponent = GalleryComponent;
exports.GalleryModule = GalleryModule;
exports.PickerConfig = PickerConfig;
exports.PickerGroupComponent = PickerGroupComponent;
exports.PickerComponent = PickerComponent;
exports.CityPickerComponent = CityPickerComponent;
exports.DatePickerComponent = DatePickerComponent;
exports.PickerService = PickerService;
exports.PickerModule = PickerModule;
exports.SearchBarComponent = SearchBarComponent;
exports.SearchBarConfig = SearchBarConfig;
exports.SearchBarModule = SearchBarModule;
exports.TabDirective = TabDirective;
exports.BarComponent = BarComponent;
exports.NavbarComponent = NavbarComponent;
exports.TabbarComponent = TabbarComponent;
exports.TabModule = TabModule;
exports.ToastService = ToastService;
exports.ToastComponent = ToastComponent;
exports.ToastConfig = ToastConfig;
exports.ToastModule = ToastModule;
exports.ToptipsComponent = ToptipsComponent;
exports.ToptipsService = ToptipsService;
exports.ToptipsModule = ToptipsModule;
exports.PopupComponent = PopupComponent;
exports.PopupConfig = PopupConfig;
exports.PopupModule = PopupModule;
exports.PTRComponent = PTRComponent;
exports.PTRConfig = PTRConfig;
exports.PTRModule = PTRModule;
exports.InfiniteLoaderConfig = InfiniteLoaderConfig;
exports.InfiniteLoaderComponent = InfiniteLoaderComponent;
exports.InfiniteLoaderModule = InfiniteLoaderModule;
exports.SidebarComponent = SidebarComponent;
exports.CloseSidebarDirective = CloseSidebarDirective;
exports.SidebarContainerComponent = SidebarContainerComponent;
exports.SidebarConfig = SidebarConfig;
exports.SidebarService = SidebarService;
exports.SidebarModule = SidebarModule;
exports.SwiperConfig = SwiperConfig;
exports.SwiperComponent = SwiperComponent;
exports.SwiperModule = SwiperModule;
exports.ChartG2Directive = ChartG2Directive;
exports.ChartG2Module = ChartG2Module;
exports.JWeiXinService = JWeiXinService;
exports.JWeiXinModule = JWeiXinModule;
exports.AccordionPanelComponent = AccordionPanelComponent;
exports.AccordionComponent = AccordionComponent;
exports.AccordionConfig = AccordionConfig;
exports.AccordionModule = AccordionModule;
exports.MaskComponent = MaskComponent;
exports.MaskModule = MaskModule;
exports.RatingConfig = RatingConfig;
exports.RatingComponent = RatingComponent;
exports.RatingModule = RatingModule;
exports.StepperComponent = StepperComponent;
exports.StepperModule = StepperModule;
exports.PaginationConfig = PaginationConfig;
exports.PaginationComponent = PaginationComponent;
exports.PaginationModule = PaginationModule;
exports.ɵdc = AccordionPanelComponent;
exports.ɵdd = AccordionComponent;
exports.ɵde = AccordionConfig;
exports.ɵdb = AccordionModule;
exports.ɵr = ActionSheetComponent;
exports.ɵs = ActionSheetConfig;
exports.ɵq = ActionSheetModule;
exports.ɵt = ActionSheetService;
exports.ɵd = ButtonComponent;
exports.ɵe = ButtonConfig;
exports.ɵc = ButtonModule;
exports.ɵa = CellModule;
exports.ɵb = SwipeDirective;
exports.ɵcx = ChartG2Directive;
exports.ɵcw = ChartG2Module;
exports.ɵy = DialogComponent;
exports.ɵz = DialogConfig;
exports.ɵv = DialogModule;
exports.ɵba = DialogService;
exports.ɵj = ChecklistDirective;
exports.ɵf = FormModule;
exports.ɵg = InputDirective;
exports.ɵi = TextareaDirective;
exports.ɵh = VCodeDirective;
exports.ɵbh = GalleryComponent;
exports.ɵbg = GalleryModule;
exports.ɵcl = InfiniteLoaderComponent;
exports.ɵcm = InfiniteLoaderConfig;
exports.ɵck = InfiniteLoaderModule;
exports.ɵcy = JWeiXinModule;
exports.ɵcz = JWeiXinService;
exports.ɵbc = LoadmoreComponent;
exports.ɵbd = LoadmoreConfig;
exports.ɵbb = LoadmoreModule;
exports.ɵx = MaskComponent;
exports.ɵw = MaskModule;
exports.ɵdl = PaginationComponent;
exports.ɵdm = PaginationConfig;
exports.ɵdk = PaginationModule;
exports.ɵbn = CityPickerComponent;
exports.ɵbm = DatePickerComponent;
exports.ɵbl = PickerGroupComponent;
exports.ɵbj = PickerComponent;
exports.ɵbk = PickerConfig;
exports.ɵbi = PickerModule;
exports.ɵbo = PickerService;
exports.ɵcf = PopupComponent;
exports.ɵcg = PopupConfig;
exports.ɵce = PopupModule;
exports.ɵbf = ProgressComponent;
exports.ɵbe = ProgressModule;
exports.ɵci = PTRComponent;
exports.ɵcj = PTRConfig;
exports.ɵch = PTRModule;
exports.ɵdg = RatingComponent;
exports.ɵdh = RatingConfig;
exports.ɵdf = RatingModule;
exports.ɵbq = SearchBarComponent;
exports.ɵbr = SearchBarConfig;
exports.ɵbp = SearchBarModule;
exports.ɵcs = CloseSidebarDirective;
exports.ɵco = SidebarContainerComponent;
exports.ɵcp = SidebarComponent;
exports.ɵcr = SidebarConfig;
exports.ɵcn = SidebarModule;
exports.ɵcq = SidebarService;
exports.ɵl = SliderDirective;
exports.ɵk = SliderModule;
exports.ɵdj = StepperComponent;
exports.ɵdi = StepperModule;
exports.ɵcu = SwiperComponent;
exports.ɵcv = SwiperConfig;
exports.ɵct = SwiperModule;
exports.ɵbu = BarComponent;
exports.ɵbv = NavbarComponent;
exports.ɵbt = TabDirective;
exports.ɵbs = TabModule;
exports.ɵbw = TabbarComponent;
exports.ɵby = ToastComponent;
exports.ɵbz = ToastConfig;
exports.ɵbx = ToastModule;
exports.ɵca = ToastService;
exports.ɵcc = ToptipsComponent;
exports.ɵcb = ToptipsModule;
exports.ɵcd = ToptipsService;
exports.ɵo = FileThumbDirective;
exports.ɵp = UploaderConfig;
exports.ɵn = UploaderFileDirective;
exports.ɵm = UploaderModule;
exports.ɵu = BaseService;
exports.ɵda = LoaderService;

Object.defineProperty(exports, '__esModule', { value: true });

})));
//# sourceMappingURL=weui.umd.js.map
