import { ApplicationRef, ChangeDetectionStrategy, ChangeDetectorRef, Component, ComponentFactoryResolver, ContentChildren, Directive, ElementRef, EventEmitter, HostBinding, HostListener, Inject, Injectable, Injector, Input, NgModule, NgZone, Optional, Output, ViewChild, forwardRef } from '@angular/core';
import { CommonModule, DatePipe } from '@angular/common';
import { FormsModule, NG_VALIDATORS, NG_VALUE_ACCESSOR } from '@angular/forms';
import { DOCUMENT, ɵgetDOM } from '@angular/platform-browser';
import { animate, state, style, transition, trigger } from '@angular/animations';
import { Observable as Observable$1 } from 'rxjs/Observable';
import { Subscription as Subscription$1 } from 'rxjs/Subscription';
import { Subject as Subject$1 } from 'rxjs/Subject';
import { debounceTime, distinctUntilChanged } from 'rxjs/operators';
import { FromEventObservable as FromEventObservable$1 } from 'rxjs/observable/FromEventObservable';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * 单元格滑块
 */
class SwipeDirective {
    /**
     * @param {?} el
     */
    constructor(el) {
        this.el = el;
        this.curX = 0;
        this.opend = false;
        /**
         * 右边滑动宽度（单位：px），默认：`68`
         */
        this.width = 68;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        const /** @type {?} */ el = this.el.nativeElement;
        this.swipeEl = el.querySelector('.weui-cell__bd');
        if (!this.swipeEl)
            this.width = 0;
        else {
            this.setPos(0);
            this.swipeEl.style.transition = 'transform .3s';
        }
    }
    /**
     * @param {?} x
     * @return {?}
     */
    setPos(x) {
        this.swipeEl.style.transform = `translateX(-${x}px)`;
    }
    /**
     * @param {?} $event
     * @return {?}
     */
    onTouchStart($event) {
        this.curX = ($event.touches[0] || $event.changedTouches[0]).pageX;
    }
    /**
     * @param {?} $event
     * @return {?}
     */
    onTouchMove($event) {
        const /** @type {?} */ touch = $event.touches[0] || $event.changedTouches[0];
        let /** @type {?} */ newX = this.curX - touch.pageX;
        if (this.opend) {
            newX = newX > 0 ? this.width : this.width - Math.abs(newX);
        }
        else {
            newX = newX > this.width ? this.width : newX;
        }
        this.setPos(newX <= 0 ? 0 : newX);
    }
    /**
     * @param {?} $event
     * @return {?}
     */
    onTouchEnd($event) {
        const /** @type {?} */ touch = $event.touches[0] || $event.changedTouches[0];
        let /** @type {?} */ newX = Math.abs(this.curX - touch.pageX);
        if (newX === 0)
            return;
        if (this.opend)
            newX = this.width - newX;
        // 当移动超过一半都视为打开
        if (newX > 0 && newX > (+this.width / 2)) {
            this.opend = true;
            this.setPos(this.width);
        }
        else {
            this.opend = false;
            this.setPos(0);
        }
    }
}
SwipeDirective.decorators = [
    { type: Directive, args: [{
                selector: '[weui-swipe]'
            },] },
];
/** @nocollapse */
SwipeDirective.ctorParameters = () => [
    { type: ElementRef, },
];
SwipeDirective.propDecorators = {
    "width": [{ type: Input, args: ['weui-width',] },],
    "onTouchStart": [{ type: HostListener, args: ['touchstart', ['$event'],] },],
    "onTouchMove": [{ type: HostListener, args: ['touchmove', ['$event'],] },],
    "onTouchEnd": [{ type: HostListener, args: ['touchend', ['$event'],] }, { type: HostListener, args: ['touchcancel', ['$event'],] },],
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class CellModule {
    /**
     * @return {?}
     */
    static forRoot() {
        return { ngModule: CellModule, providers: [] };
    }
}
CellModule.decorators = [
    { type: NgModule, args: [{
                imports: [CommonModule],
                declarations: [
                    SwipeDirective
                ],
                exports: [
                    SwipeDirective
                ]
            },] },
];
/** @nocollapse */
CellModule.ctorParameters = () => [];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class ButtonConfig {
    constructor() {
        /**
         * 操作场景：primary、default、warn
         */
        this.type = 'primary';
        /**
         * disabled状态，默认：`false`
         */
        this.disabled = false;
        /**
         * 是否加载状态，默认：`false`
         */
        this.loading = false;
        /**
         * 镂空按钮，默认：`false`
         */
        this.plain = false;
        /**
         * 是否小号，默认：`false`
         */
        this.mini = false;
    }
}
ButtonConfig.decorators = [
    { type: Injectable },
];
/** @nocollapse */
ButtonConfig.ctorParameters = () => [];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * @param {?} value
 * @return {?}
 */
function toBoolean(value) {
    return value != null && `${value}` !== 'false';
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class ButtonComponent {
    /**
     * @param {?} _config
     */
    constructor(_config) {
        /**
         * 操作场景：primary、default、warn，默认：`primary`
         */
        this.type = 'primary';
        this._loading = false;
        this._mini = false;
        this._plain = false;
        this._disabled = false;
        Object.assign(this, _config);
    }
    /**
     * 是否加载状态
     * @return {?}
     */
    get loading() { return this._loading; }
    /**
     * @param {?} value
     * @return {?}
     */
    set loading(value) { this._loading = toBoolean(value); }
    /**
     * 是否小号
     * @return {?}
     */
    get mini() { return this._mini; }
    /**
     * @param {?} value
     * @return {?}
     */
    set mini(value) { this._mini = toBoolean(value); }
    /**
     * 镂空按钮
     * @return {?}
     */
    get plain() { return this._plain; }
    /**
     * @param {?} value
     * @return {?}
     */
    set plain(value) { this._plain = toBoolean(value); }
    /**
     * 禁用状态
     * @return {?}
     */
    get disabled() { return this._disabled; }
    /**
     * @param {?} value
     * @return {?}
     */
    set disabled(value) { this._disabled = toBoolean(value); }
}
ButtonComponent.decorators = [
    { type: Component, args: [{
                selector: 'weui-button, button[weui-button], a[weui-button]',
                host: {
                    'class': 'weui-btn',
                    '[class.weui-btn_primary]': '!plain && type==="primary"',
                    '[class.weui-btn_default]': '!plain && type==="default"',
                    '[class.weui-btn_warn]': '!plain && type==="warn"',
                    '[class.weui-btn_plain-primary]': 'plain && type==="primary"',
                    '[class.weui-btn_plain-default]': 'plain && type==="default"',
                    '[class.weui-btn_plain-warn]': 'plain && type==="warn"',
                    '[class.weui-btn_disabled]': '!plain && disabled',
                    '[class.weui-btn_plain-disabled]': 'plain && disabled',
                    '[attr.disabled]': 'disabled ? "disabled" : null'
                },
                exportAs: 'weuiButton',
                template: '<i class="weui-loading" *ngIf="loading"></i><ng-content></ng-content>'
            },] },
];
/** @nocollapse */
ButtonComponent.ctorParameters = () => [
    { type: ButtonConfig, },
];
ButtonComponent.propDecorators = {
    "type": [{ type: Input, args: ['weui-type',] },],
    "loading": [{ type: HostBinding, args: ['class.weui-btn_loading',] }, { type: Input, args: ['weui-loading',] },],
    "mini": [{ type: HostBinding, args: ['class.weui-btn_mini',] }, { type: Input, args: ['weui-mini',] },],
    "plain": [{ type: Input, args: ['weui-plain',] },],
    "disabled": [{ type: Input },],
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class ButtonModule {
    /**
     * @return {?}
     */
    static forRoot() {
        return { ngModule: ButtonModule, providers: [ButtonConfig] };
    }
}
ButtonModule.decorators = [
    { type: NgModule, args: [{
                imports: [CommonModule],
                declarations: [ButtonComponent],
                exports: [ButtonComponent]
            },] },
];
/** @nocollapse */
ButtonModule.ctorParameters = () => [];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * 向上查找父节点
 * @param {?} el
 * @param {?} selector
 * @return {?}
 */
function findParent(el, selector) {
    let /** @type {?} */ retEl = null;
    while (el) {
        if (el.matches(selector)) {
            retEl = el;
            break;
        }
        el = el.parentElement;
    }
    return retEl;
}
/**
 * 查找并创建
 * @param {?} el
 * @param {?=} selector
 * @param {?=} tagName
 * @param {?=} className
 * @param {?=} cssText
 * @return {?}
 */
function add(el, selector = '.weui-cell__ft', tagName = 'div', className = 'weui-cell__ft', cssText = '') {
    let /** @type {?} */ ret = el.querySelector(selector);
    if (!ret) {
        ret = document.createElement(tagName);
        ret.className = className;
        if (cssText)
            ret.style.cssText = cssText;
        el.appendChild(ret);
    }
    return ret;
}
/**
 * 移除
 * @param {?} el
 * @param {?} selector
 * @return {?}
 */
function remove(el, selector) {
    const /** @type {?} */ ret = el.querySelector(selector);
    if (ret) {
        el.removeChild(ret);
    }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * 文本框，指令是对文本框格式校验（邮箱、手机、身份证等）、视觉效果的增强而已
 */
class InputDirective {
    /**
     * @param {?} el
     */
    constructor(el) {
        this.el = el;
        /**
         * 是否必填项，**等同于** <intpu required> 的值，当值必填时会有视觉效果
         */
        this.required = 'warn';
        /**
         * 是否自动清除内容中的空格
         */
        this.cleaner = false;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.parentEl = findParent(this.el.nativeElement, '.weui-cell');
        if (!this.parentEl)
            throw new Error('父DOM结构至少必须包含一个.weui-cell');
        // 检查是否有 weui-cell__ft
        this.ftEl = add(this.parentEl);
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
        this._createValidator();
        if (this._onChange)
            this._onChange();
    }
    /**
     * @return {?}
     */
    _createValidator() {
        let /** @type {?} */ regex = null;
        if (this.inputRegex) {
            if (typeof this.inputRegex === 'string') {
                regex = new RegExp(`^${this.inputRegex}$`);
            }
            else {
                regex = this.inputRegex;
            }
        }
        else {
            // 默认行为
            if (this.inputType) {
                switch (this.inputType) {
                    case 'qq':
                    case 'number':
                        regex = /^[0-9]+$/;
                        break;
                    case 'digit':
                        regex = /^[.0-9]+$/;
                        break;
                    case 'tel':
                        regex = /^[-.0-9]+$/;
                        break;
                    case 'email':
                        regex = /^(([^<>()\[\]\\.,;:\s@"]+(\.[^<>()\[\]\\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/;
                        this.cleaner = true;
                        break;
                    case 'mobile':
                        regex = /^1[0-9]{10}$/;
                        this.cleaner = true;
                        break;
                    case 'idcard':
                        // 身份证
                        regex = /^[X0-9]{15,18}$/;
                        this.cleaner = true;
                        break;
                }
            }
        }
        this._validator = (control) => {
            let /** @type {?} */ value = control.value;
            if (value == null || value.length === 0) {
                if (this.required !== undefined)
                    return { 'icon': this.required, 'type': 'required', 'actualValue': value };
                return null;
            }
            if (this.cleaner && value.includes(' ')) {
                value = value.replace(/ /g, '');
                control.setValue(value);
            }
            return regex === null || regex.test(value) ? null : { 'icon': 'warn', 'type': 'regex', 'actualValue': value };
        };
    }
    /**
     * @param {?} fn
     * @return {?}
     */
    registerOnValidatorChange(fn) { this._onChange = fn; }
    /**
     * @param {?} c
     * @return {?}
     */
    validate(c) {
        const /** @type {?} */ ret = this._validator(c);
        if (ret === null) {
            this.parentEl.classList.remove('weui-cell_warn');
            remove(this.ftEl, 'i');
        }
        else {
            remove(this.ftEl, 'i');
            this.parentEl.classList.add('weui-cell_warn');
            const /** @type {?} */ icon = `weui-icon-${ret["icon"]}`;
            add(this.ftEl, '.' + icon, 'i', icon);
        }
        return ret;
    }
}
InputDirective.decorators = [
    { type: Directive, args: [{
                selector: '[weui-input]',
                providers: [{
                        provide: NG_VALIDATORS,
                        useExisting: forwardRef(() => InputDirective),
                        multi: true
                    }]
            },] },
];
/** @nocollapse */
InputDirective.ctorParameters = () => [
    { type: ElementRef, },
];
InputDirective.propDecorators = {
    "inputType": [{ type: Input, args: ['weui-input',] },],
    "inputRegex": [{ type: Input, args: ['weui-regex',] },],
    "required": [{ type: Input, args: ['weui-required',] },],
    "cleaner": [{ type: Input, args: ['weui-cleaner',] },],
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * 获取验证码
 */
class VCodeDirective {
    /**
     * @param {?} el
     */
    constructor(el) {
        this.el = el;
        /**
         * 时长（单位：秒），默认：`60`
         */
        this.seconds = 60;
        /**
         * 倒计时模板，使用 `${num}` 表示当前秒数
         */
        this.tpl = '${num} 秒';
        /**
         * 重新发送提醒文本
         */
        this.error = '重新发送';
        this._disabled = false;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        if (!this.onSend)
            throw new Error('weui-vcode必须传递一个返回值为 `Observable<boolean>` 函数');
        this._cur = this.el.nativeElement.innerHTML;
    }
    /**
     * @return {?}
     */
    _onClick() {
        this._disabled = true;
        this.onSend().subscribe((res) => {
            res ? this.tick() : this.err();
        });
    }
    /**
     * @return {?}
     */
    err() {
        this._disabled = false;
        this.el.nativeElement.innerHTML = this.error;
    }
    /**
     * @return {?}
     */
    tick() {
        let /** @type {?} */ count = this.seconds < 1 ? 1 : this.seconds;
        this.setText(count);
        this._t = setInterval(() => {
            if (--count <= 0) {
                this._disabled = false;
                this.el.nativeElement.innerHTML = this._cur;
                this.destroy();
            }
            else
                this.setText(count);
        }, 1000);
    }
    /**
     * @param {?} num
     * @return {?}
     */
    setText(num) {
        this.el.nativeElement.innerHTML = this.tpl.replace(/\${num}/, num.toString());
    }
    /**
     * @return {?}
     */
    destroy() {
        if (this._t) {
            clearInterval(this._t);
            this._t = null;
        }
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        this.destroy();
    }
}
VCodeDirective.decorators = [
    { type: Directive, args: [{
                selector: '[weui-vcode]',
                host: {
                    '(click)': '_onClick()',
                    '[disabled]': '_disabled'
                }
            },] },
];
/** @nocollapse */
VCodeDirective.ctorParameters = () => [
    { type: ElementRef, },
];
VCodeDirective.propDecorators = {
    "onSend": [{ type: Input, args: ['weui-vcode',] },],
    "seconds": [{ type: Input, args: ['weui-seconds',] },],
    "tpl": [{ type: Input, args: ['weui-tpl',] },],
    "error": [{ type: Input, args: ['weui-error',] },],
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * 文本域字数统计
 */
class TextareaDirective {
    /**
     * @param {?} el
     */
    constructor(el) {
        this.el = el;
        /**
         * 最大长度，0表示不受限
         */
        this.maxlength = 0;
        /**
         * 中文部分应该算多少个字符，使用 `/[^\x00-\xff]/g` 正则表达式统计中文部分（默认：1个字符）
         */
        this.cn = 1;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.init();
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
        if ('maxlength' in changes) {
            this.init()._onChange(this._value);
        }
    }
    /**
     * @return {?}
     */
    init() {
        const /** @type {?} */ clsName = `weui-textarea-counter`;
        const /** @type {?} */ pel = this.el.nativeElement.parentElement;
        this.maxlength = +this.maxlength;
        if (this.maxlength <= 0) {
            remove(pel, '.' + clsName);
            this._count = null;
        }
        else {
            this._count = add(pel, '.' + clsName, 'div', clsName);
        }
        return this;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    _onChange(value) {
        if (!this._count)
            return;
        value = value || '';
        if (this.cn > 1) {
            value = value.replace(/[^\x00-\xff]/g, '**');
        }
        this._value = value;
        this._count.innerHTML = `${value.length} / ${this.maxlength}`;
    }
}
TextareaDirective.decorators = [
    { type: Directive, args: [{
                selector: '[weui-textarea]',
                host: {
                    '(ngModelChange)': '_onChange($event)'
                }
            },] },
];
/** @nocollapse */
TextareaDirective.ctorParameters = () => [
    { type: ElementRef, },
];
TextareaDirective.propDecorators = {
    "maxlength": [{ type: Input },],
    "cn": [{ type: Input, args: ['weui-cn',] },],
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class ChecklistDirective {
    constructor() {
        this.checked = false;
    }
    /**
     * @param {?} val
     * @return {?}
     */
    set value(val) {
        this._value = val;
        this.checked = this.targetArray.indexOf(val) !== -1;
    }
    /**
     * @param {?} $event
     * @return {?}
     */
    _change($event) {
        if ($event.target.checked) {
            this.targetArray.push(this._value);
        }
        else {
            this.targetArray.splice(this.targetArray.indexOf(this._value), 1);
        }
    }
}
ChecklistDirective.decorators = [
    { type: Directive, args: [{
                selector: '[weui-checklist]',
                host: {
                    '(change)': '_change($event)',
                    '[checked]': 'checked'
                }
            },] },
];
/** @nocollapse */
ChecklistDirective.ctorParameters = () => [];
ChecklistDirective.propDecorators = {
    "targetArray": [{ type: Input, args: ['weui-checklist',] },],
    "value": [{ type: Input, args: ['weui-value',] },],
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class FormModule {
    /**
     * @return {?}
     */
    static forRoot() {
        return { ngModule: FormModule, providers: [] };
    }
}
FormModule.decorators = [
    { type: NgModule, args: [{
                imports: [CommonModule, FormsModule],
                declarations: [
                    InputDirective,
                    VCodeDirective,
                    TextareaDirective,
                    ChecklistDirective
                ],
                exports: [
                    InputDirective,
                    VCodeDirective,
                    TextareaDirective,
                    ChecklistDirective
                ]
            },] },
];
/** @nocollapse */
FormModule.ctorParameters = () => [];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * 滑块指令，支持[(ngModel)]
 */
class SliderDirective {
    /**
     * @param {?} el
     */
    constructor(el) {
        this.el = el;
        this._state = null;
        this._value = 0;
        this.isInit = false;
        /**
         * 允许的最小值，默认：`0`
         */
        this.min = 0;
        /**
         * 允许的最大值，默认：`100`
         */
        this.max = 100;
        /**
         * 步长，默认：`1`
         */
        this.step = 1;
        /**
         * 是否可用
         */
        this.enabled = true;
        /**
         * 值改变时触发
         */
        this.change = new EventEmitter();
        this.onChange = Function.prototype;
        this.onTouched = Function.prototype;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.isInit = true;
        this.trackEl = this.el.nativeElement.querySelector('.weui-slider__track');
        this.handlerEl = this.el.nativeElement.querySelector('.weui-slider__handler');
        if (this.trackEl === null || this.handlerEl === null)
            throw new Error('失效DOM结构');
        this.onTouchStart = this.startHandle.bind(this);
        this.onTouchMove = this.moveHandle.bind(this);
        this.handlerEl.addEventListener('touchstart', this.onTouchStart, false);
        this.handlerEl.addEventListener('touchmove', this.onTouchMove, false);
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        this.handlerEl.removeEventListener('touchstart', this.onTouchStart, false);
        this.handlerEl.removeEventListener('touchmove', this.onTouchMove, false);
    }
    /**
     * @return {?}
     */
    refresh() {
        const /** @type {?} */ el = this.el.nativeElement;
        this._state = {
            enabled: this.enabled,
            left: el.getBoundingClientRect().left,
            size: el.querySelector('.weui-slider__inner').offsetWidth,
            percentage: [0, 0, 0],
            x: 0
        };
        this.max = +this.max;
        this.min = +this.min;
        this.step = +this.step;
        this.setValue(this._value);
        this.layout();
    }
    /**
     * @param {?} value
     * @return {?}
     */
    setValue(value) {
        if (this.max > this.min) {
            this._state.percentage = [100 * (value - this.min) / (this.max - this.min), 0, this.step * 100 / (this.max - this.min)];
        }
        else {
            this._state.percentage = [0, 0, 100];
        }
    }
    /**
     * @return {?}
     */
    layout() {
        this.trackEl.style.width = this._state.percentage[0] + '%';
        this.handlerEl.style.left = this._state.percentage[0] + '%';
    }
    /**
     * @param {?} $event
     * @return {?}
     */
    startHandle($event) {
        if (this._state === null)
            this.refresh();
        this._state.x = ($event.touches[0] || $event.changedTouches[0]).pageX;
    }
    /**
     * @param {?} $event
     * @return {?}
     */
    moveHandle($event) {
        if (!this._state.enabled)
            return false;
        const /** @type {?} */ pageX = ($event.touches[0] || $event.changedTouches[0]).pageX;
        const /** @type {?} */ xDiff = pageX - this._state.x;
        if (xDiff >= 15 || xDiff <= 15) {
            this._state.percentage[0] = this.getPercentage(pageX, $event);
            this.layout();
            this.calculateValue(this._state.percentage[0]);
        }
    }
    /**
     * @param {?} pageX
     * @param {?} $event
     * @return {?}
     */
    getPercentage(pageX, $event) {
        const /** @type {?} */ distanceToSlide = pageX - this._state.left;
        let /** @type {?} */ percentage = distanceToSlide / this._state.size * 100;
        percentage = Math.round(percentage / this._state.percentage[2]) * this._state.percentage[2];
        return Math.max(0, Math.min(100, percentage));
    }
    /**
     * @param {?} percentage
     * @return {?}
     */
    calculateValue(percentage) {
        const /** @type {?} */ rawValue = percentage / 100 * (this.max - this.min);
        // adjustment = this.min
        let /** @type {?} */ value = this.min + Math.round(rawValue / this.step) * this.step;
        if (value < this.min)
            value = this.min;
        else if (value > this.max)
            value = this.max;
        this._value = value;
        this.onChange(this._value);
        this.onTouched();
        this.change.emit(this._value);
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
        if (this.isInit)
            this.refresh();
    }
    /**
     * @param {?} value
     * @return {?}
     */
    writeValue(value) {
        if (value) {
            this._value = +value;
            this.refresh();
            this.calculateValue(this._state.percentage[0]);
        }
    }
    /**
     * @param {?} fn
     * @return {?}
     */
    registerOnChange(fn) { this.onChange = fn; }
    /**
     * @param {?} fn
     * @return {?}
     */
    registerOnTouched(fn) { this.onTouched = fn; }
    /**
     * @param {?} isDisabled
     * @return {?}
     */
    setDisabledState(isDisabled) {
    }
}
SliderDirective.decorators = [
    { type: Directive, args: [{
                selector: '[weui-slider]',
                providers: [{
                        provide: NG_VALUE_ACCESSOR,
                        useExisting: forwardRef(() => SliderDirective),
                        multi: true
                    }]
            },] },
];
/** @nocollapse */
SliderDirective.ctorParameters = () => [
    { type: ElementRef, },
];
SliderDirective.propDecorators = {
    "min": [{ type: Input, args: ['weui-min',] },],
    "max": [{ type: Input, args: ['weui-max',] },],
    "step": [{ type: Input, args: ['weui-step',] },],
    "enabled": [{ type: Input, args: ['weui-enabled',] },],
    "change": [{ type: Output, args: ['weui-change',] },],
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class SliderModule {
    /**
     * @return {?}
     */
    static forRoot() {
        return { ngModule: SliderModule, providers: [] };
    }
}
SliderModule.decorators = [
    { type: NgModule, args: [{
                imports: [CommonModule],
                declarations: [
                    SliderDirective
                ],
                exports: [
                    SliderDirective
                ]
            },] },
];
/** @nocollapse */
SliderModule.ctorParameters = () => [];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * @param {?} node
 * @return {?}
 */
function isElement(node) {
    return !!(node && (node.nodeName || node.prop && node.attr && node.find));
}
/**
 * \@docs-private
 */
class FileLikeObject {
    /**
     * @param {?} fileOrInput
     */
    constructor(fileOrInput) {
        const /** @type {?} */ isInput = isElement(fileOrInput);
        const /** @type {?} */ fakePathOrObject = isInput ? fileOrInput.value : fileOrInput;
        const /** @type {?} */ postfix = typeof fakePathOrObject === 'string' ? 'FakePath' : 'Object';
        const /** @type {?} */ method = '_createFrom' + postfix;
        (/** @type {?} */ (this))[method](fakePathOrObject);
    }
    /**
     * @param {?} path
     * @return {?}
     */
    _createFromFakePath(path) {
        this.lastModifiedDate = void 0;
        this.size = void 0;
        this.type = 'like/' + path.slice(path.lastIndexOf('.') + 1).toLowerCase();
        this.name = path.slice(path.lastIndexOf('/') + path.lastIndexOf('\\') + 2);
    }
    /**
     * @param {?} object
     * @return {?}
     */
    _createFromObject(object) {
        // this.lastModifiedDate = copy(object.lastModifiedDate);
        this.size = object.size;
        this.type = object.type;
        this.name = object.name;
    }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * 文件对象
 */
class FileItem {
    /**
     * @param {?} uploader
     * @param {?} file
     * @param {?} options
     */
    constructor(uploader, file, options) {
        /**
         * 索引
         */
        this.index = 0;
        /**
         * 上传进度
         */
        this.progress = 0;
        /**
         * 准备上传就绪
         */
        this.isReady = false;
        /**
         * 上传中
         */
        this.isUploading = false;
        /**
         * 已上传（不管错误与否都是true）
         */
        this.isUploaded = false;
        /**
         * 上传成功
         */
        this.isSuccess = false;
        /**
         * 用户取消上传
         */
        this.isCancel = false;
        /**
         * 上传失败
         */
        this.isError = false;
        this.uploader = uploader;
        this.setOptions(options);
        this.id = Math.random().toString(36).substring(7);
        this.file = new FileLikeObject(file);
        this._file = file;
    }
    /**
     * @param {?} options
     * @return {?}
     */
    setOptions(options) {
        this.options = Object.assign({}, this.uploader.options, options);
    }
    /**
     * 上传
     * @return {?}
     */
    upload() {
        try {
            this.uploader.uploadItem(this);
        }
        catch (/** @type {?} */ e) {
            this.uploader._onCompleteItem(this, '', 0, {});
            this.uploader._onErrorItem(this, '', 0, {});
        }
    }
    /**
     * 取消上传
     * @return {?}
     */
    cancel() {
        this.uploader.cancelItem(this);
    }
    /**
     * 从队列中移除，当文件正在上传中时会先取消
     * @return {?}
     */
    remove() {
        this.uploader.removeFromQueue(this);
    }
    /**
     * @return {?}
     */
    _prepareToUploading() {
        this.index = this.index || this.uploader._getNextIndex();
        this.isReady = true;
    }
    /**
     * @return {?}
     */
    _onBeforeUpload() {
        this.isReady = true;
        this.isUploading = true;
        this.isUploaded = false;
        this.isSuccess = false;
        this.isCancel = false;
        this.isError = false;
        this.progress = 0;
        if (this.options.onUploadStart)
            this.options.onUploadStart(this);
    }
    /**
     * @param {?} progress
     * @return {?}
     */
    _onProgress(progress) {
        this.progress = progress;
        if (this.options.onUploadProgress)
            this.options.onUploadProgress(this, progress, this.uploader.progress);
    }
    /**
     * @param {?} response
     * @param {?} status
     * @param {?} headers
     * @return {?}
     */
    _onSuccess(response, status, headers) {
        this.isReady = false;
        this.isUploading = false;
        this.isUploaded = true;
        this.isSuccess = true;
        this.isCancel = false;
        this.isError = false;
        this.progress = 100;
        this.index = void 0;
        if (this.options.onUploadSuccess)
            this.options.onUploadSuccess(this, response, status, headers);
    }
    /**
     * @param {?} response
     * @param {?} status
     * @param {?} headers
     * @return {?}
     */
    _onError(response, status, headers) {
        this.isReady = false;
        this.isUploading = false;
        this.isUploaded = true;
        this.isSuccess = false;
        this.isCancel = false;
        this.isError = true;
        this.progress = 0;
        this.index = void 0;
        if (this.options.onUploadError)
            this.options.onUploadError(this, response, status, headers);
    }
    /**
     * @param {?} response
     * @param {?} status
     * @param {?} headers
     * @return {?}
     */
    _onComplete(response, status, headers) {
        if (this.uploader.options.removeAfterUpload) {
            this.remove();
        }
        if (this.options.onUploadComplete)
            this.options.onUploadComplete(this, response, status, headers);
    }
    /**
     * @param {?} response
     * @param {?} status
     * @param {?} headers
     * @return {?}
     */
    _onCancel(response, status, headers) {
        this.isReady = false;
        this.isUploading = false;
        this.isUploaded = false;
        this.isSuccess = false;
        this.isCancel = true;
        this.isError = false;
        this.progress = 0;
        this.index = void 0;
        if (this.options.onUploadCancel)
            this.options.onUploadCancel(this);
    }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class UploaderConfig {
    constructor() {
        /**
         * 发送凭据，默认：`true`
         */
        this.withCredentials = true;
        /**
         * 是否自动上传，默认：`false`
         * 设置为 true 后，不需要手动调用 `upload`，有文件选择即开始上传。
         */
        this.auto = false;
        /**
         * 允许最多上传数量，-1 表示不受限，默认：`-1`
         */
        this.limit = -1;
        /**
         * 限定文件大小（单位：字节），-1 表示不受限，默认：`-1`
         */
        this.size = -1;
    }
}
UploaderConfig.decorators = [
    { type: Injectable },
];
/** @nocollapse */
UploaderConfig.ctorParameters = () => [];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * \@docs-private
 */
class FileType {
    /**
     * @param {?} file
     * @return {?}
     */
    static getMimeClass(file) {
        let /** @type {?} */ mimeClass = 'application';
        if (this.mime_psd.indexOf(file.type) !== -1) {
            mimeClass = 'image';
        }
        else if (file.type.match('image.*')) {
            mimeClass = 'image';
        }
        else if (file.type.match('video.*')) {
            mimeClass = 'video';
        }
        else if (file.type.match('audio.*')) {
            mimeClass = 'audio';
        }
        else if (file.type === 'application/pdf') {
            mimeClass = 'pdf';
        }
        else if (this.mime_compress.indexOf(file.type) !== -1) {
            mimeClass = 'compress';
        }
        else if (this.mime_doc.indexOf(file.type) !== -1) {
            mimeClass = 'doc';
        }
        else if (this.mime_xsl.indexOf(file.type) !== -1) {
            mimeClass = 'xls';
        }
        else if (this.mime_ppt.indexOf(file.type) !== -1) {
            mimeClass = 'ppt';
        }
        if (mimeClass === 'application') {
            mimeClass = this.fileTypeDetection(file.name);
        }
        return mimeClass;
    }
    /**
     * @param {?} inputFilename
     * @return {?}
     */
    static fileTypeDetection(inputFilename) {
        const /** @type {?} */ types = {
            'jpg': 'image',
            'jpeg': 'image',
            'tif': 'image',
            'psd': 'image',
            'bmp': 'image',
            'png': 'image',
            'nef': 'image',
            'tiff': 'image',
            'cr2': 'image',
            'dwg': 'image',
            'cdr': 'image',
            'ai': 'image',
            'indd': 'image',
            'pin': 'image',
            'cdp': 'image',
            'skp': 'image',
            'stp': 'image',
            '3dm': 'image',
            'mp3': 'audio',
            'wav': 'audio',
            'wma': 'audio',
            'mod': 'audio',
            'm4a': 'audio',
            'compress': 'compress',
            'rar': 'compress',
            '7z': 'compress',
            'lz': 'compress',
            'z01': 'compress',
            'pdf': 'pdf',
            'xls': 'xls',
            'xlsx': 'xls',
            'ods': 'xls',
            'mp4': 'video',
            'avi': 'video',
            'wmv': 'video',
            'mpg': 'video',
            'mts': 'video',
            'flv': 'video',
            '3gp': 'video',
            'vob': 'video',
            'm4v': 'video',
            'mpeg': 'video',
            'm2ts': 'video',
            'mov': 'video',
            'doc': 'doc',
            'docx': 'doc',
            'eps': 'doc',
            'txt': 'doc',
            'odt': 'doc',
            'rtf': 'doc',
            'ppt': 'ppt',
            'pptx': 'ppt',
            'pps': 'ppt',
            'ppsx': 'ppt',
            'odp': 'ppt'
        };
        const /** @type {?} */ chunks = inputFilename.split('.');
        if (chunks.length < 2) {
            return 'application';
        }
        const /** @type {?} */ extension = chunks[chunks.length - 1].toLowerCase();
        if (types[extension] === undefined) {
            return 'application';
        }
        else {
            return types[extension];
        }
    }
}
FileType.mime_doc = [
    'application/msword',
    'application/msword',
    'application/vnd.openxmlformats-officedocument.wordprocessingml.document',
    'application/vnd.openxmlformats-officedocument.wordprocessingml.template',
    'application/vnd.ms-word.document.macroEnabled.12',
    'application/vnd.ms-word.template.macroEnabled.12'
];
FileType.mime_xsl = [
    'application/vnd.ms-excel',
    'application/vnd.ms-excel',
    'application/vnd.ms-excel',
    'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet',
    'application/vnd.openxmlformats-officedocument.spreadsheetml.template',
    'application/vnd.ms-excel.sheet.macroEnabled.12',
    'application/vnd.ms-excel.template.macroEnabled.12',
    'application/vnd.ms-excel.addin.macroEnabled.12',
    'application/vnd.ms-excel.sheet.binary.macroEnabled.12'
];
FileType.mime_ppt = [
    'application/vnd.ms-powerpoint',
    'application/vnd.ms-powerpoint',
    'application/vnd.ms-powerpoint',
    'application/vnd.ms-powerpoint',
    'application/vnd.openxmlformats-officedocument.presentationml.presentation',
    'application/vnd.openxmlformats-officedocument.presentationml.template',
    'application/vnd.openxmlformats-officedocument.presentationml.slideshow',
    'application/vnd.ms-powerpoint.addin.macroEnabled.12',
    'application/vnd.ms-powerpoint.presentation.macroEnabled.12',
    'application/vnd.ms-powerpoint.presentation.macroEnabled.12',
    'application/vnd.ms-powerpoint.slideshow.macroEnabled.12'
];
FileType.mime_psd = [
    'image/photoshop',
    'image/x-photoshop',
    'image/psd',
    'application/photoshop',
    'application/psd',
    'zz-application/zz-winassoc-psd'
];
FileType.mime_compress = [
    'application/x-gtar',
    'application/x-gcompress',
    'application/compress',
    'application/x-tar',
    'application/x-rar-compressed',
    'application/octet-stream'
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * 内置HTML5上传组件
 */
class Uploader {
    /**
     * Creates an instance of Uploader.
     * @param {?=} options
     * @param {?=} globalConfig
     */
    constructor(options, globalConfig) {
        this.globalConfig = globalConfig;
        this._queue = [];
        this._progress = 0;
        this._isUploading = false;
        this._nextIndex = 0;
        this.setOptions(options);
    }
    /**
     * 获取当前上传组件配置项
     * @return {?}
     */
    get options() {
        return this._options;
    }
    /**
     * 获取队列中所有文件对象
     * @return {?}
     */
    get queue() {
        return this._queue;
    }
    /**
     * 获取当前总进度
     * @return {?}
     */
    get progress() {
        return this._progress;
    }
    /**
     * 是否上传中
     * @return {?}
     */
    get isUploading() {
        return this._isUploading;
    }
    /**
     * 获取未上传数量
     * @return {?}
     */
    get notUploadedCount() {
        return this.getNotUploadedItems().length;
    }
    /**
     * 获取已上传数量
     * @return {?}
     */
    get uploadedCount() {
        return this._queue.filter((item) => item.isUploaded).length;
    }
    /**
     * @return {?}
     */
    _getNextIndex() {
        return ++this._nextIndex;
    }
    /**
     * 重置选项
     *
     * @param {?} options
     * @param {?=} includeOldQueue 是否包括已存在队列中的文件
     * @return {?}
     */
    setOptions(options, includeOldQueue = true) {
        this._options = Object.assign({
            filters: [],
            disableMultipart: false,
            method: 'POST',
            alias: 'file',
            withCredentials: true,
            auto: false,
            limit: -1,
            size: -1,
            removeAfterUpload: false
        }, this.globalConfig, this._options, options);
        // 数量
        if (this._options.limit !== -1)
            this._options.filters.unshift({ name: 'queueLimit', fn: this._queueLimitFilter });
        // 大小
        if (this._options.size !== -1)
            this._options.filters.unshift({ name: 'fileSize', fn: this._fileSizeFilter });
        // 类型
        if (this._options.types)
            this._options.filters.unshift({ name: 'fileType', fn: this._fileTypeFilter });
        // mime类型
        if (this._options.mimes)
            this._options.filters.unshift({ name: 'mimeType', fn: this._mimeTypeFilter });
        // 对已经存在的队列重置所有配置信息
        if (includeOldQueue) {
            for (let /** @type {?} */ i = 0; i < this._queue.length; i++) {
                this._queue[i].setOptions(this._options);
            }
        }
    }
    /**
     * @return {?}
     */
    _queueLimitFilter() {
        return this._options.limit === undefined || this._queue.length < this._options.limit;
    }
    /**
     * @param {?} item
     * @return {?}
     */
    _fileSizeFilter(item) {
        return !(this._options.size && item.size > this._options.size);
    }
    /**
     * @param {?} item
     * @return {?}
     */
    _mimeTypeFilter(item) {
        return !(this._options.mimes && this._options.mimes.indexOf(item.type) === -1);
    }
    /**
     * @param {?} item
     * @return {?}
     */
    _fileTypeFilter(item) {
        return !(this._options.types && this._options.types.indexOf(FileType.getMimeClass(item)) === -1);
    }
    /**
     * @param {?} file
     * @param {?} filters
     * @param {?} options
     * @return {?}
     */
    _isValidFile(file, filters, options) {
        this._failFilterIndex = -1;
        return !filters.length ? true : filters.every((filter) => {
            this._failFilterIndex++;
            return filter.fn.call(this, file, options);
        });
    }
    /**
     * 过滤器，如果未指定采用内置
     * @param {?} filters
     * @return {?}
     */
    _getFilters(filters) {
        if (!filters)
            return this._options.filters;
        if (Array.isArray(filters))
            return filters;
        if (typeof filters === 'string') {
            const /** @type {?} */ names = filters.match(/[^\s,]+/g);
            return this._options.filters
                .filter((filter) => names.indexOf(filter.name) !== -1);
        }
        return this._options.filters;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    _getIndexOfItem(value) {
        return typeof value === 'number' ? value : this._queue.indexOf(value);
    }
    /**
     * 获取未上传过列表
     * @return {?}
     */
    getNotUploadedItems() {
        return this._queue.filter((item) => !item.isUploaded);
    }
    /**
     * 获取待上传文件
     * @return {?}
     */
    get getReadyItems() {
        return this._queue
            .filter((item) => (item.isReady && !item.isUploading))
            .sort((item1, item2) => item1.index - item2.index);
    }
    /**
     * 将文件放入队列中
     *
     * @param {?} files 文件列表
     * @param {?=} options 强制重新指定新 `options` 内容
     * @param {?=} filters 强制重新指定新 `filters` 内容
     * @return {?}
     */
    addToQueue(files, options, filters) {
        const /** @type {?} */ list = [];
        for (const /** @type {?} */ file of files)
            list.push(file);
        const /** @type {?} */ arrayOfFilters = this._getFilters(filters);
        const /** @type {?} */ count = this._queue.length;
        const /** @type {?} */ addedFileItems = [];
        if (!options) {
            options = this._options;
        }
        list.map((some) => {
            const /** @type {?} */ temp = new FileLikeObject(some);
            if (this._isValidFile(temp, arrayOfFilters, options)) {
                const /** @type {?} */ fileItem = new FileItem(this, some, options);
                addedFileItems.push(fileItem);
                this._queue.push(fileItem);
                if (this._options.onFileQueued)
                    this._options.onFileQueued(fileItem);
            }
            else {
                const /** @type {?} */ filter = arrayOfFilters[this._failFilterIndex];
                if (this._options.onError)
                    this._options.onError(temp, filter, options);
            }
        });
        if (this.queue.length !== count) {
            this._progress = this._getTotalProgress();
        }
        if (this.options.auto) {
            this.uploadAll();
        }
    }
    /**
     * 从队列中移除一个文件
     *
     * @param {?} value FileItem对象或下标
     * @return {?}
     */
    removeFromQueue(value) {
        const /** @type {?} */ index = this._getIndexOfItem(value);
        const /** @type {?} */ item = this._queue[index];
        if (item.isUploading) {
            item.cancel();
        }
        this._queue.splice(index, 1);
        this._progress = this._getTotalProgress();
        if (this._options.onFileDequeued)
            this._options.onFileDequeued(item);
    }
    /**
     * 清空队列
     * @return {?}
     */
    clearQueue() {
        while (this._queue.length) {
            this._queue[0].remove();
        }
        this._progress = 0;
        if (this._options.onFileDequeued)
            this._options.onFileDequeued();
    }
    /**
     * 上传某个文件
     * @param {?} value
     * @return {?}
     */
    uploadItem(value) {
        const /** @type {?} */ index = this._getIndexOfItem(value);
        const /** @type {?} */ item = this._queue[index];
        item._prepareToUploading();
        if (this._isUploading) {
            return;
        }
        this._isUploading = true;
        this._xhrTransport(item);
    }
    /**
     * 取消某个文件
     * @param {?} value
     * @return {?}
     */
    cancelItem(value) {
        const /** @type {?} */ index = this._getIndexOfItem(value);
        const /** @type {?} */ item = this._queue[index];
        if (item && item.isUploading) {
            if (item.options.abortTransport) {
                this._onCancelItem(item, null, null, null);
                this._onCompleteItem(item, null, null, null);
                item.options.abortTransport(item);
            }
            else {
                if (item._xhr)
                    item._xhr.abort();
            }
        }
    }
    /**
     * 上传队列中所有未上传的文件
     * @return {?}
     */
    uploadAll() {
        const /** @type {?} */ items = this.getNotUploadedItems().filter((item) => !item.isUploading);
        if (!items.length) {
            return;
        }
        items.map((item) => item._prepareToUploading());
        if (this._options.onStart)
            this._options.onStart(items[0]);
        items[0].upload();
    }
    /**
     * 取消所有上传中文件
     * @return {?}
     */
    cancelAll() {
        const /** @type {?} */ items = this.getNotUploadedItems();
        items.map((item) => item.cancel());
        if (this._options.onCancel)
            this._options.onCancel();
    }
    /**
     * @return {?}
     */
    _destroy() {
        return void 0;
    }
    /**
     * @param {?} item
     * @return {?}
     */
    _xhrTransport(item) {
        item._onBeforeUpload();
        // 自实现
        if (item.options.uploadTransport) {
            item.options.uploadTransport.apply(this, [item]).subscribe((response) => {
                this._onSuccessItem(item, response, 0, null);
                this._onCompleteItem(item, response, 0, null);
            });
            return this;
        }
        const /** @type {?} */ xhr = item._xhr = new XMLHttpRequest();
        let /** @type {?} */ sendable;
        if (typeof item._file.size !== 'number') {
            throw new TypeError('The file specified is no longer valid');
        }
        if (!this._options.disableMultipart) {
            sendable = new FormData();
            sendable.append(item.options.alias, item._file, item.file.name);
            if (this._options.params !== undefined) {
                Object.keys(this._options.params).forEach((key) => {
                    sendable.append(key, this._options.params[key]);
                });
            }
        }
        else {
            sendable = item._file;
        }
        xhr.upload.onprogress = (event) => {
            const /** @type {?} */ progress = Math.round(event.lengthComputable ? event.loaded * 100 / event.total : 0);
            this._onProgressItem(item, progress);
        };
        xhr.onload = () => {
            const /** @type {?} */ headers = this._parseHeaders(xhr.getAllResponseHeaders());
            const /** @type {?} */ response = this._transformResponse(xhr.response, headers);
            const /** @type {?} */ gist = this._isSuccessCode(xhr.status) ? 'Success' : 'Error';
            const /** @type {?} */ method = '_on' + gist + 'Item';
            (/** @type {?} */ (this))[method](item, response, xhr.status, headers);
            this._onCompleteItem(item, response, xhr.status, headers);
        };
        xhr.onerror = () => {
            const /** @type {?} */ headers = this._parseHeaders(xhr.getAllResponseHeaders());
            const /** @type {?} */ response = this._transformResponse(xhr.response, headers);
            this._onErrorItem(item, response, xhr.status, headers);
            this._onCompleteItem(item, response, xhr.status, headers);
        };
        xhr.onabort = () => {
            const /** @type {?} */ headers = this._parseHeaders(xhr.getAllResponseHeaders());
            const /** @type {?} */ response = this._transformResponse(xhr.response, headers);
            this._onCancelItem(item, response, xhr.status, headers);
            this._onCompleteItem(item, response, xhr.status, headers);
        };
        xhr.open(item.options.method, item.options.url, true);
        xhr.withCredentials = item.options.withCredentials;
        if (item.options.headers && item.options.headers.length > 0) {
            for (const /** @type {?} */ header of item.options.headers) {
                xhr.setRequestHeader(header.name, header.value);
            }
        }
        xhr.send(sendable);
        return this;
    }
    /**
     * @param {?=} value
     * @return {?}
     */
    _getTotalProgress(value = 0) {
        if (this._options.removeAfterUpload) {
            return value;
        }
        const /** @type {?} */ notUploaded = this.getNotUploadedItems().length;
        const /** @type {?} */ uploaded = notUploaded ? this._queue.length - notUploaded : this._queue.length;
        const /** @type {?} */ ratio = 100 / this._queue.length;
        const /** @type {?} */ current = value * ratio / 100;
        return Math.round(uploaded * ratio + current);
    }
    /**
     * @param {?} headers
     * @return {?}
     */
    _parseHeaders(headers) {
        const /** @type {?} */ parsed = {};
        let /** @type {?} */ key;
        let /** @type {?} */ val;
        let /** @type {?} */ i;
        if (!headers) {
            return parsed;
        }
        headers.split('\n').map((line) => {
            i = line.indexOf(':');
            key = line.slice(0, i).trim().toLowerCase();
            val = line.slice(i + 1).trim();
            if (key) {
                parsed[key] = parsed[key] ? parsed[key] + ', ' + val : val;
            }
        });
        return parsed;
    }
    /**
     * @param {?} response
     * @param {?} headers
     * @return {?}
     */
    _transformResponse(response, headers) {
        return response;
    }
    /**
     * @param {?} status
     * @return {?}
     */
    _isSuccessCode(status) {
        return (status >= 200 && status < 300) || status === 304;
    }
    /**
     * @param {?} item
     * @param {?} progress
     * @return {?}
     */
    _onProgressItem(item, progress) {
        const /** @type {?} */ total = this._getTotalProgress(progress);
        this._progress = total;
        item._onProgress(progress);
    }
    /**
     * @param {?} item
     * @param {?} response
     * @param {?} status
     * @param {?} headers
     * @return {?}
     */
    _onErrorItem(item, response, status, headers) {
        item._onError(response, status, headers);
    }
    /**
     * @param {?} item
     * @param {?} response
     * @param {?} status
     * @param {?} headers
     * @return {?}
     */
    _onSuccessItem(item, response, status, headers) {
        item._onSuccess(response, status, headers);
    }
    /**
     * @param {?} item
     * @param {?} response
     * @param {?} status
     * @param {?} headers
     * @return {?}
     */
    _onCancelItem(item, response, status, headers) {
        item._onCancel(response, status, headers);
    }
    /**
     * @param {?} item
     * @param {?} response
     * @param {?} status
     * @param {?} headers
     * @return {?}
     */
    _onCompleteItem(item, response, status, headers) {
        item._onComplete(response, status, headers);
        const /** @type {?} */ nextItem = this.getReadyItems[0];
        this._isUploading = false;
        if (nextItem) {
            nextItem.upload();
            return;
        }
        this._progress = this._getTotalProgress();
        if (this._options.onFinished)
            this._options.onFinished();
    }
}
/** @nocollapse */
Uploader.ctorParameters = () => [
    null,
    { type: UploaderConfig, decorators: [{ type: Inject, args: [UploaderConfig,] }, { type: Optional },] },
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class UploaderFileDirective {
    /**
     * @param {?} element
     */
    constructor(element) {
        this.element = element;
    }
    /**
     * @return {?}
     */
    get _options() {
        return this.uploader.options;
    }
    /**
     * @return {?}
     */
    get _isEmptyAfterSelection() {
        return !!this.element.nativeElement.attributes.multiple;
    }
    /**
     * @return {?}
     */
    _onChange() {
        const /** @type {?} */ files = this.element.nativeElement.files;
        this.uploader.addToQueue(files, this._options);
        if (this._isEmptyAfterSelection) {
            this.element.nativeElement.value = '';
        }
    }
}
UploaderFileDirective.decorators = [
    { type: Directive, args: [{
                selector: '[weui-uploader-file]'
            },] },
];
/** @nocollapse */
UploaderFileDirective.ctorParameters = () => [
    { type: ElementRef, },
];
UploaderFileDirective.propDecorators = {
    "uploader": [{ type: Input, args: ['weui-uploader-file',] },],
    "_onChange": [{ type: HostListener, args: ['change',] },],
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * 检查是否安卓系统
 * @return {?}
 */
function isAndroid() {
    return /android (\d+)/.test(ɵgetDOM().getUserAgent().toLowerCase());
}
/**
 * 检查是否IOS系统
 * @return {?}
 */
function isIOS() {
    return /iPad|iPhone|iPod/.test(ɵgetDOM().getUserAgent());
}
/**
 * 检查File是否为图像文件
 * @param {?} file
 * @return {?}
 */
function isImage(file) {
    if (!(file instanceof window.File))
        return false;
    const /** @type {?} */ type = '|' + file.type.slice(file.type.lastIndexOf('/') + 1) + '|';
    return '|jpg|png|jpeg|bmp|gif|'.indexOf(type) !== -1;
}
/**
 * 生成可预览的图像地址
 * @param {?} file
 * @return {?}
 */
function genImageUrl(file) {
    if (isImage(file))
        return window.URL.createObjectURL(file);
    return '';
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * 创建缩略图
 */
class FileThumbDirective {
    /**
     * @param {?} el
     */
    constructor(el) {
        this.el = el;
    }
    /**
     * @return {?}
     */
    render() {
        const /** @type {?} */ url = genImageUrl(this.file);
        if (!url)
            return;
        this.el.nativeElement.style.backgroundImage = `url(${url})`;
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
        this.render();
    }
}
FileThumbDirective.decorators = [
    { type: Directive, args: [{ selector: '[weui-thumb]' },] },
];
/** @nocollapse */
FileThumbDirective.ctorParameters = () => [
    { type: ElementRef, },
];
FileThumbDirective.propDecorators = {
    "file": [{ type: Input, args: ['weui-thumb',] },],
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class UploaderModule {
    /**
     * @return {?}
     */
    static forRoot() {
        return { ngModule: UploaderModule, providers: [UploaderConfig] };
    }
}
UploaderModule.decorators = [
    { type: NgModule, args: [{
                imports: [CommonModule],
                declarations: [
                    UploaderFileDirective, FileThumbDirective
                ],
                exports: [
                    UploaderFileDirective, FileThumbDirective
                ]
            },] },
];
/** @nocollapse */
UploaderModule.ctorParameters = () => [];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class ActionSheetConfig {
    constructor() {
        /**
         * 样式，默认：`ios`
         */
        this.skin = 'ios';
        /**
         * 取消文本，默认：`取消`
         */
        this.cancel = '取消';
        /**
         * 允许点击背景关闭，默认：`true`
         */
        this.backdrop = true;
    }
}
ActionSheetConfig.decorators = [
    { type: Injectable },
];
/** @nocollapse */
ActionSheetConfig.ctorParameters = () => [];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class ActionSheetComponent {
    /**
     * @param {?} DEF
     */
    constructor(DEF) {
        this.DEF = DEF;
        /**
         * 关闭回调
         */
        this.close = new EventEmitter();
        this._shown = false;
        /**
         * 动画状态码
         */
        this._shownAnt = false;
    }
    /**
     * @return {?}
     */
    get _visibility() {
        return this._shownAnt ? 'show' : 'hide';
    }
    /**
     * 显示，组件载入页面后并不会显示，显示调用 `show()` 并订阅结果。
     * @return {?}
     */
    show() {
        this.config = Object.assign({
            backdrop: true,
            skin: 'auto'
        }, this.DEF, this.config);
        if (this.config.skin === 'auto') {
            this.config.skin = isAndroid() ? 'android' : 'ios';
        }
        this._shown = true;
        setTimeout(() => { this._shownAnt = true; }, 10);
        return Observable$1.create((observer) => {
            this.observer = observer;
        });
    }
    /**
     * 隐藏
     *
     * @param {?=} is_backdrop 是否从背景上点击
     * @return {?}
     */
    hide(is_backdrop) {
        if (is_backdrop === true && this.config.backdrop === false)
            return false;
        this._shownAnt = false;
        setTimeout(() => {
            this._shown = false;
            this.close.emit();
        }, this.config.skin === 'android' ? 200 : 300);
    }
    /**
     * 选择动作
     * @param {?} menu
     * @return {?}
     */
    _onSelect(menu) {
        this.observer.next(menu);
        this.observer.complete();
        this.hide();
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        if (this.observer && this.observer instanceof Subscription$1) {
            (/** @type {?} */ (this.observer)).unsubscribe();
        }
    }
}
ActionSheetComponent.decorators = [
    { type: Component, args: [{
                selector: 'weui-actionsheet',
                template: `
        <div class="weui-mask" [@visibility]="_visibility" (click)="hide(true)"></div>
        <div class="weui-actionsheet" [ngClass]="{'weui-actionsheet_toggle': _shownAnt && config.skin === 'ios'}">
            <div class="weui-actionsheet__title" *ngIf="config.skin === 'ios' && config.title">
                <p class="weui-actionsheet__title-text">{{config.title}}</p>
            </div>
            <div class="weui-actionsheet__menu">
                <div class="weui-actionsheet__cell" *ngFor="let item of menus" (click)="_onSelect(item)">{{item.text}}</div>
            </div>
            <div class="weui-actionsheet__action" *ngIf="config.skin === 'ios' && config.cancel">
                <div class="weui-actionsheet__cell" (click)="hide()">{{config.cancel}}</div>
            </div>
        </div>
    `,
                animations: [trigger('visibility', [
                        state('show', style({ opacity: 1 })),
                        state('hide', style({ opacity: 0 })),
                        transition('hide <=> show', [animate(200)])
                    ])],
                host: {
                    '[hidden]': '!_shown',
                    '[class.weui-skin_android]': 'config.skin === "android"'
                }
            },] },
];
/** @nocollapse */
ActionSheetComponent.ctorParameters = () => [
    { type: ActionSheetConfig, },
];
ActionSheetComponent.propDecorators = {
    "config": [{ type: Input },],
    "menus": [{ type: Input },],
    "close": [{ type: Output },],
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * @abstract
 */
class BaseService {
    /**
     * @param {?} resolver
     * @param {?} applicationRef
     * @param {?} injector
     */
    constructor(resolver, applicationRef, injector) {
        this.resolver = resolver;
        this.applicationRef = applicationRef;
        this.injector = injector;
        this.list = [];
    }
    /**
     * 销毁
     *
     * @param {?=} component 下标（从0开始或组件引用对象），或不指定时，销毁最新一个
     * @return {?}
     */
    destroy(component) {
        if (typeof component === 'number')
            component = this.list[/** @type {?} */ (component)];
        if (!component)
            component = this.list.pop();
        if (component)
            (/** @type {?} */ (component)).destroy();
    }
    /**
     * 销毁所有
     * @return {?}
     */
    destroyAll() {
        for (const /** @type {?} */ component of this.list)
            this.destroy(component);
    }
    /**
     * 动态构建组件
     * @template T
     * @param {?} component
     * @return {?}
     */
    build(component) {
        const /** @type {?} */ componentFactory = this.resolver.resolveComponentFactory(component);
        const /** @type {?} */ componentRef = componentFactory.create(this.injector);
        this.list.push(componentRef);
        const /** @type {?} */ componentRootNode = /** @type {?} */ ((/** @type {?} */ (componentRef.hostView)).rootNodes[0]);
        this.applicationRef.attachView(componentRef.hostView);
        componentRef.onDestroy(() => {
            this.applicationRef.detachView(componentRef.hostView);
        });
        document.body.appendChild(componentRootNode);
        return componentRef;
    }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class ActionSheetService extends BaseService {
    /**
     * @param {?} resolver
     * @param {?} applicationRef
     * @param {?} injector
     */
    constructor(resolver, applicationRef, injector) {
        super(resolver, applicationRef, injector);
    }
    /**
     * 创建一个弹出式菜单并显示
     *
     * @param {?} menus 菜单内容
     * @param {?=} config 配置性（可选）
     * @return {?} 可订阅来获取结果
     */
    show(menus, config = {}) {
        const /** @type {?} */ componentRef = this.build(ActionSheetComponent);
        componentRef.instance.menus = menus;
        if (config)
            componentRef.instance.config = config;
        componentRef.instance.close.subscribe(() => {
            setTimeout(() => {
                this.destroy(componentRef);
            }, 100);
        });
        return componentRef.instance.show();
    }
}
ActionSheetService.decorators = [
    { type: Injectable },
];
/** @nocollapse */
ActionSheetService.ctorParameters = () => [
    { type: ComponentFactoryResolver, },
    { type: ApplicationRef, },
    { type: Injector, },
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class ActionSheetModule {
    /**
     * @return {?}
     */
    static forRoot() {
        return { ngModule: ActionSheetModule, providers: [ActionSheetConfig] };
    }
}
ActionSheetModule.decorators = [
    { type: NgModule, args: [{
                imports: [CommonModule],
                declarations: [ActionSheetComponent],
                exports: [ActionSheetComponent],
                providers: [ActionSheetService],
                entryComponents: [ActionSheetComponent]
            },] },
];
/** @nocollapse */
ActionSheetModule.ctorParameters = () => [];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class MaskComponent {
    constructor() {
        /**
         * 点击是否允许关闭（默认：`false`）
         */
        this.backdrop = false;
        /**
         * 内容方向（默认：`vertical`）
         * + `top`: 顶部居中
         * + `bottom`: 底部居中
         * + `vertical-left`: 垂直居左
         * + `vertical`: 垂直居中
         * + `vertical-right`: 垂直居右
         * + `none`: 无
         */
        this.placement = 'vertical';
        /**
         * 内容背景色
         */
        this.bg = '';
        /**
         * 内容为Loading效果（默认：`false`）
         */
        this.loading = false;
        /**
         * 关闭回调
         */
        this.close = new EventEmitter();
        this._shown = false;
    }
    /**
     * 显示，并返回一个Observable
     * @return {?}
     */
    show() {
        setTimeout(() => {
            this._shown = true;
        });
        return Observable$1.create((observer) => {
            this.observer = observer;
        });
    }
    /**
     * 隐藏
     *
     * @param {?=} is_backdrop 是否手动点击关闭（默认：false）
     * @return {?}
     */
    hide(is_backdrop = false) {
        if (is_backdrop === true && this.backdrop === false)
            return false;
        this._shown = false;
        this.close.emit();
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        if (this.observer && this.observer instanceof Subscription$1) {
            (/** @type {?} */ (this.observer)).unsubscribe();
        }
    }
}
MaskComponent.decorators = [
    { type: Component, args: [{
                selector: 'weui-mask',
                template: `
    <div class="weui-mask" [ngClass]="{'weui-mask__visible': _shown }" (click)="hide(true)">
        <div class="weui-mask__content" [ngClass]="placement !== 'none' ? 'weui-mask__' + placement : ''">
            <div [ngStyle]="{'background-color':bg}">
                <div *ngIf="loading"><i class="weui-loading weui-icon_toast"></i></div>
                <ng-content></ng-content>
            </div>
        </div>
    </div>`
            },] },
];
/** @nocollapse */
MaskComponent.ctorParameters = () => [];
MaskComponent.propDecorators = {
    "backdrop": [{ type: Input },],
    "placement": [{ type: Input },],
    "bg": [{ type: Input },],
    "loading": [{ type: Input },],
    "close": [{ type: Output },],
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class MaskModule {
    /**
     * @return {?}
     */
    static forRoot() {
        return { ngModule: MaskModule, providers: [] };
    }
}
MaskModule.decorators = [
    { type: NgModule, args: [{
                imports: [CommonModule],
                declarations: [MaskComponent],
                exports: [MaskComponent],
                entryComponents: [MaskComponent]
            },] },
];
/** @nocollapse */
MaskModule.ctorParameters = () => [];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class DialogConfig {
    constructor() {
        /**
         * 对话框类型，默认：`default`
         * default：默认文本或HTML格式
         * prompt：可输入对话框
         */
        this.type = 'default';
        /**
         * 样式，默认：`auto`
         */
        this.skin = 'auto';
        /**
         * 取消，返回false，默认：`取消`
         */
        this.cancel = '取消';
        /**
         * 取消按钮类型，默认：`default`
         */
        this.cancelType = 'default';
        /**
         * 确认，返回true，默认：`确认`
         */
        this.confirm = '确认';
        /**
         * 确认按钮类型，默认：`primary`
         */
        this.confirmType = 'primary';
        /**
         * 允许点击背景关闭，默认：`false`
         */
        this.backdrop = false;
    }
}
DialogConfig.decorators = [
    { type: Injectable },
];
/** @nocollapse */
DialogConfig.ctorParameters = () => [];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * 对话框，依赖于 `weui-textarea`、`weui-slider`
 *
 * 关于 `input==='prompt'` 若干细节：
 *  + 对话框内放表单在weui的表现并不是很如意，因此，在对话框增加 `.weui-dialog__prompt` 样式类名，请自行针对性进行一些样式的覆盖，`ngx-dialog` 不提供任何样式的修正。
 *  + 对于录入型表单其校验机制全都是依赖于正则，默认情况下内置 `email`、`url` 两种表单类型的正则。
 */
class DialogComponent {
    /**
     * @param {?} DEF
     */
    constructor(DEF) {
        this.DEF = DEF;
        /**
         * 打开动画结束后回调（唯一参数：对话框实例对象）
         */
        this.open = new EventEmitter();
        /**
         * 关闭动画开始时回调（唯一参数：对话框实例对象）
         */
        this.close = new EventEmitter();
        this._shown = false;
        this._prompError = false;
    }
    /**
     * 对话框配置项
     * @param {?} value
     * @return {?}
     */
    set config(value) {
        const /** @type {?} */ config = Object.assign({
            backdrop: false
        }, this.DEF, value);
        if (config.skin === 'auto') {
            config.skin = isAndroid() ? 'android' : 'ios';
        }
        // 重组btns
        if (!config.btns) {
            config.btns = [];
            if (config.cancel) {
                config.btns.push({ text: config.cancel, type: config.cancelType, value: false });
            }
            if (config.confirm) {
                config.btns.push({ text: config.confirm, type: config.confirmType, value: true });
            }
        }
        // prompt
        if (config.type === 'prompt') {
            // 一些默认校验正则表达式
            if (!config.inputRegex) {
                switch (config.input) {
                    case 'email':
                        config.inputRegex = /^(([^<>()\[\]\\.,;:\s@"]+(\.[^<>()\[\]\\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/;
                        if (!config.inputError)
                            config.inputError = '邮箱格式不正确';
                        break;
                    case 'url':
                        config.inputRegex = /^(https?:\/\/)?([\da-z\.-]+)\.([a-z\.]{2,6})([\/\w \.-]*)*\/?$/;
                        if (!config.inputError)
                            config.inputError = '网址格式不正确';
                        break;
                }
            }
            config.inputOptions = Object.assign([], config.inputOptions);
            config.inputAttributes = Object.assign({
                maxlength: null,
                min: 0,
                max: 100,
                step: 1
            }, config.inputAttributes);
            // 默认值
            let /** @type {?} */ defaultValue = config.inputValue;
            if (config.input === 'checkbox' && !Array.isArray(config.inputValue)) {
                defaultValue = typeof defaultValue !== 'undefined' ? [defaultValue] : [];
            }
            config.inputValue = defaultValue || '';
            this._promptData = config.inputValue;
            if (this._promptData) {
                this._config = config;
                this.promptCheck();
            }
            setTimeout(() => {
                this.setFocus();
            }, 100);
        }
        this._config = config;
    }
    /**
     * @return {?}
     */
    get config() {
        return this._config;
    }
    /**
     * @return {?}
     */
    promptCheck() {
        if (this.config.inputRequired === true) {
            if (this.config.input === 'checkbox' && this._promptData.length === 0) {
                this._prompError = true;
                return false;
            }
            if (!this._promptData) {
                this._prompError = true;
                return false;
            }
        }
        if (this.config.inputRegex && !this.config.inputRegex.test(this._promptData.toString())) {
            this._prompError = true;
            return false;
        }
        this._prompError = false;
        return true;
    }
    /**
     * @return {?}
     */
    setFocus() {
        const /** @type {?} */ containerEl = this.container.nativeElement;
        let /** @type {?} */ firstFormEl = null;
        if (this.config.type === 'prompt') {
            firstFormEl = containerEl.querySelector('input, textarea, select');
        }
        else {
            firstFormEl = containerEl.querySelector('.weui-dialog__btn_primary');
        }
        if (firstFormEl)
            firstFormEl.focus();
    }
    /**
     * @return {?}
     */
    _chanage() {
        this.promptCheck();
    }
    /**
     * @param {?} event
     * @return {?}
     */
    _keyup(event) {
        if (event.keyCode === 13) {
            this._onSelect();
        }
    }
    /**
     * 显示，组件载入页面后并不会显示，显示调用 `show()` 并订阅结果。
     *
     * @return {?} 当 `type==='prompt'` 时会多一 `result` 属性表示结果值
     */
    show() {
        this._shown = true;
        this._prompError = false;
        // 模拟动画结束后回调
        setTimeout(() => {
            this.open.emit(this);
        }, 300);
        return Observable$1.create((observer) => {
            this.observer = observer;
        });
    }
    /**
     * 隐藏
     *
     * @param {?=} is_backdrop 是否从背景上点击
     * @return {?}
     */
    hide(is_backdrop = false) {
        if (is_backdrop === true && this.config.backdrop === false)
            return false;
        this._shown = false;
        this.close.emit(this);
    }
    /**
     * @param {?=} menu
     * @return {?}
     */
    _onSelect(menu) {
        // 未指定时查找 `value===true` 的按钮
        if (!menu && this.config.btns.length > 0) {
            menu = this.config.btns.find(w => w.value === true);
        }
        const /** @type {?} */ ret = menu;
        if (menu.value === true && this._config.type === 'prompt') {
            if (!this.promptCheck())
                return false;
            ret.result = this._promptData;
        }
        this.observer.next(ret);
        this.observer.complete();
        this.hide();
        return false;
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        if (this.observer && this.observer instanceof Subscription$1) {
            (/** @type {?} */ (this.observer)).unsubscribe();
        }
    }
}
DialogComponent.decorators = [
    { type: Component, args: [{
                selector: 'weui-dialog',
                template: `
        <div class="weui-mask" [ngClass]="{'weui-mask__in': _shown}" (click)="hide(true)"></div>
        <div class="weui-dialog" [ngClass]="{'weui-dialog__in': _shown, 'weui-skin_android': config.skin === 'android', 'weui-dialog__prompt': config.type === 'prompt'}" #container>
            <div class="weui-dialog__hd" *ngIf="config.title"><strong class="weui-dialog__title">{{config.title}}</strong></div>
            <div class="weui-dialog__bd" *ngIf="config.content" [innerHTML]="config.content"></div>
            <div class="weui-cells" *ngIf="config.type === 'prompt' && _shown">
                <ng-container [ngSwitch]="config.input">
                    <div *ngSwitchCase="'textarea'" class="weui-cell" [ngClass]="{'weui-cell_warn': _prompError}">
                        <div class="weui-cell__bd">
                            <textarea class="weui-textarea" placeholder="{{config.inputPlaceholder}}"
                                [(ngModel)]="_promptData" name="_promptData" (ngModelChange)="_chanage()"
                                weui-textarea weui-cn="{{config.inputAttributes.cn}}" [maxlength]="config.inputAttributes.maxlength"></textarea>
                        </div>
                    </div>
                    <div *ngSwitchCase="'select'" class="weui-cell weui-cell_select">
                        <div class="weui-cell__bd">
                            <select class="weui-select" [(ngModel)]="_promptData" name="_promptData" (ngModelChange)="_chanage()">
                                <option *ngFor="let i of config.inputOptions" [ngValue]="i">{{i.text}}</option>
                            </select>
                        </div>
                    </div>
                    <div *ngSwitchCase="'radio'" class="weui-cells_radio">
                        <label class="weui-cell weui-check__label" *ngFor="let i of config.inputOptions">
                            <div class="weui-cell__bd">
                                <p>{{i.text}}</p>
                            </div>
                            <div class="weui-cell__ft">
                                <input type="radio" (click)="_promptData=i" [checked]="i==_promptData" (change)="_chanage()" class="weui-check">
                                <span class="weui-icon-checked"></span>
                            </div>
                        </label>
                    </div>
                    <div *ngSwitchCase="'checkbox'" class="weui-cells_checkbox">
                        <label class="weui-cell weui-check__label" *ngFor="let i of config.inputOptions">
                            <div class="weui-cell__hd">
                                <input type="checkbox" class="weui-check" (change)="_chanage()"
                                    [weui-checklist]="_promptData" [weui-value]="i" name="_promptData">
                                <i class="weui-icon-checked"></i>
                            </div>
                            <div class="weui-cell__bd">
                                <p>{{i.text}}</p>
                            </div>
                        </label>
                    </div>
                    <div *ngSwitchCase="'range'" class="weui-slider-box" [(ngModel)]="_promptData" name="_promptData"
                        weui-slider weui-min="{{config.inputAttributes.min}}" weui-max="{{config.inputAttributes.max}}" weui-step="{{config.inputAttributes.step}}">
                        <div class="weui-slider">
                            <div class="weui-slider__inner">
                                <div class="weui-slider__track"></div>
                                <div class="weui-slider__handler"></div>
                            </div>
                        </div>
                        <div class="weui-slider-box__value">{{_promptData}}</div>
                    </div>
                    <div *ngSwitchDefault class="weui-cell" [ngClass]="{'weui-cell_warn': _prompError}">
                        <div class="weui-cell__bd">
                            <input type="{{config.input}}" class="weui-input"
                                placeholder="{{config.inputPlaceholder}}" [(ngModel)]="_promptData" name="_promptData"
                                [maxlength]="config.inputAttributes.maxlength"
                                (ngModelChange)="_chanage()" (keyup)="_keyup($event)">
                        </div>
                        <div class="weui-cell__ft"><i class="weui-icon-warn" *ngIf="_prompError"></i></div>
                    </div>
                </ng-container>
            </div>
            <div class="weui-dialog__error" *ngIf="_prompError">{{config.inputError}}</div>
            <div class="weui-dialog__ft">
                <a href="#" *ngFor="let item of config.btns"
                    class="weui-dialog__btn weui-dialog__btn_{{item.type}}"
                    (click)="_onSelect(item)">{{item.text}}</a>
            </div>
        </div>
    `
            },] },
];
/** @nocollapse */
DialogComponent.ctorParameters = () => [
    { type: DialogConfig, },
];
DialogComponent.propDecorators = {
    "config": [{ type: Input },],
    "open": [{ type: Output },],
    "close": [{ type: Output },],
    "container": [{ type: ViewChild, args: ['container',] },],
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class DialogService extends BaseService {
    /**
     * @param {?} resolver
     * @param {?} applicationRef
     * @param {?} injector
     */
    constructor(resolver, applicationRef, injector) {
        super(resolver, applicationRef, injector);
    }
    /**
     * 创建一个对话框并显示
     *
     * @param {?} data 对话框配置项
     * @return {?} 可订阅来获取结果
     */
    show(data) {
        const /** @type {?} */ componentRef = this.build(DialogComponent);
        componentRef.instance.config = data;
        componentRef.instance.close.subscribe(() => {
            setTimeout(() => {
                this.destroy(componentRef);
            }, 300);
        });
        return componentRef.instance.show();
    }
}
DialogService.decorators = [
    { type: Injectable },
];
/** @nocollapse */
DialogService.ctorParameters = () => [
    { type: ComponentFactoryResolver, },
    { type: ApplicationRef, },
    { type: Injector, },
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class DialogModule {
    /**
     * @return {?}
     */
    static forRoot() {
        return { ngModule: DialogModule, providers: [DialogConfig] };
    }
}
DialogModule.decorators = [
    { type: NgModule, args: [{
                imports: [CommonModule, FormsModule, MaskModule, FormModule, SliderModule],
                declarations: [DialogComponent],
                exports: [DialogComponent],
                providers: [DialogService],
                entryComponents: [DialogComponent]
            },] },
];
/** @nocollapse */
DialogModule.ctorParameters = () => [];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class LoadmoreConfig {
    constructor() {
        /**
         * 类型，默认：`loading`
         */
        this.type = 'loading';
        /**
         * 当type=='loading'时显示的文本，默认：`正在加载`
         */
        this.loadingText = '正在加载';
        /**
         * 当type=='line'时显示的文本，默认：`暂无数据`
         */
        this.lineText = '暂无数据';
    }
}
LoadmoreConfig.decorators = [
    { type: Injectable },
];
/** @nocollapse */
LoadmoreConfig.ctorParameters = () => [];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class LoadmoreComponent {
    /**
     * @param {?} DEF
     */
    constructor(DEF) {
        /**
         * 类型，默认：`loading`
         */
        this.type = 'loading';
        /**
         * 当 `type==='loading'` 时显示的文本，默认：`正在加载`
         */
        this.loadingText = '正在加载';
        /**
         * 当 `type==='line'` 时显示的文本，默认：`暂无数据`
         */
        this.lineText = '暂无数据';
        Object.assign(this, DEF);
    }
}
LoadmoreComponent.decorators = [
    { type: Component, args: [{
                selector: 'weui-loadmore',
                template: `
        <div class="weui-loadmore" [ngClass]="{
            'weui-loadmore_line': type!=='loading',
            'weui-loadmore_dot': type==='dot'
        }">
            <i class="weui-loading" *ngIf="type==='loading'"></i>
            <span class="weui-loadmore__tips">{{type==='dot'?'':type==='line'?lineText:loadingText}}</span>
        </div>
    `
            },] },
];
/** @nocollapse */
LoadmoreComponent.ctorParameters = () => [
    { type: LoadmoreConfig, },
];
LoadmoreComponent.propDecorators = {
    "type": [{ type: Input },],
    "loadingText": [{ type: Input },],
    "lineText": [{ type: Input },],
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class LoadmoreModule {
    /**
     * @return {?}
     */
    static forRoot() {
        return { ngModule: LoadmoreModule, providers: [LoadmoreConfig] };
    }
}
LoadmoreModule.decorators = [
    { type: NgModule, args: [{
                imports: [CommonModule],
                declarations: [LoadmoreComponent],
                exports: [LoadmoreComponent],
                entryComponents: [LoadmoreComponent]
            },] },
];
/** @nocollapse */
LoadmoreModule.ctorParameters = () => [];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class ProgressComponent {
    constructor() {
        this._value = 0;
        /**
         * 是否允许取消，默认：`true`
         */
        this.canCancel = true;
        /**
         * 取消回调
         */
        this.cancel = new EventEmitter();
    }
    /**
     * 默认进度值，取值范围：0-100（单位：%）
     * @param {?} d
     * @return {?}
     */
    set value(d) {
        this._value = Math.max(0, Math.min(100, d));
    }
    /**
     * @return {?}
     */
    _onCancel() {
        if (this.canCancel)
            this.cancel.emit();
        return false;
    }
}
ProgressComponent.decorators = [
    { type: Component, args: [{
                selector: 'weui-progress',
                template: `
        <div class="weui-progress">
            <div class="weui-progress__bar">
                <div class="weui-progress__inner-bar" [style.width]="_value + '%'"></div>
            </div>
            <a href="#" class="weui-progress__opr" *ngIf="canCancel" (click)="_onCancel()">
                <i class="weui-icon-cancel"></i>
            </a>
        </div>
    `
            },] },
];
/** @nocollapse */
ProgressComponent.ctorParameters = () => [];
ProgressComponent.propDecorators = {
    "value": [{ type: Input },],
    "canCancel": [{ type: Input },],
    "cancel": [{ type: Output },],
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class ProgressModule {
    /**
     * @return {?}
     */
    static forRoot() {
        return { ngModule: ProgressModule, providers: [] };
    }
}
ProgressModule.decorators = [
    { type: NgModule, args: [{
                imports: [CommonModule],
                declarations: [ProgressComponent],
                exports: [ProgressComponent],
                entryComponents: [ProgressComponent]
            },] },
];
/** @nocollapse */
ProgressModule.ctorParameters = () => [];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * 数据对象
 * @record
 */

class GalleryComponent {
    constructor() {
        /**
         * 是否允许删除，默认：`true`
         */
        this.canDelete = true;
        /**
         * 删除回调
         */
        this.delete = new EventEmitter();
        /**
         * 隐藏回调
         */
        this.hide = new EventEmitter();
        /**
         * 标记是否显示，支持双向绑定
         */
        this.show = false;
        this.showChange = new EventEmitter();
        this._showd = false;
    }
    /**
     * @return {?}
     */
    get _visibility() {
        return this.show ? 'show' : 'hide';
    }
    /**
     * @return {?}
     */
    _antStart() { if (this.show)
        this._showd = this.show; }
    /**
     * @return {?}
     */
    _antDone() { this._showd = this.show; }
    /**
     * @param {?} item
     * @return {?}
     */
    _onDel(item) {
        if (this.canDelete) {
            this.delete.emit(item);
            this._onHide();
        }
        return false;
    }
    /**
     * @return {?}
     */
    _onHide() {
        this.show = false;
        this.showChange.emit(this.show);
        this.hide.emit();
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
        if ('imgs' in changes)
            this.parseImgs();
    }
    /**
     * @return {?}
     */
    parseImgs() {
        let /** @type {?} */ imgs = this.imgs;
        if (Array.isArray(imgs)) {
            if (imgs.length > 0) {
                if (typeof imgs[0] === 'string') {
                    imgs = (/** @type {?} */ (imgs)).map((url) => {
                        return { url: url };
                    });
                }
                else {
                    imgs = (/** @type {?} */ (imgs)).map((item) => {
                        if (item.file)
                            item.url = genImageUrl(item.file);
                        return item;
                    });
                }
            }
        }
        else {
            if (typeof imgs === 'string')
                imgs = [{ url: imgs }];
            else {
                const /** @type {?} */ imgUrl = genImageUrl(imgs);
                if (imgUrl)
                    imgs = [{ url: imgUrl }];
            }
        }
        // todo: 永远只返回一个
        // 针对未来可能直接上下个
        this._imgs = Object.assign([], imgs && (/** @type {?} */ (imgs)).length > 0 ? imgs.slice(0, 1) : []);
    }
}
GalleryComponent.decorators = [
    { type: Component, args: [{
                selector: 'weui-gallery',
                template: `
        <div *ngIf="_imgs" class="weui-galleries">
            <ng-template ngFor let-item [ngForOf]="_imgs">
                <div class="weui-gallery"
                    [ngStyle]="{'display': _showd ? 'block' : 'none'}"
                    [@visibility]="_visibility"
                    (@visibility.start)="_antStart($event)"
                    (@visibility.done)="_antDone($event)"
                    (click)="_onHide()">
                    <span class="weui-gallery__img"
                        [ngStyle]="{ 'background-image': 'url(' + item?.url + ')'}"></span>
                    <div class="weui-gallery__opr" *ngIf="canDelete">
                        <a href="#" class="weui-gallery__del" (click)="_onDel(item)">
                            <i class="weui-icon-delete weui-icon_gallery-delete"></i>
                        </a>
                    </div>
                </div>
            </ng-template>
        </div>
    `,
                animations: [trigger('visibility', [
                        state('show', style({ opacity: 1 })),
                        state('hide', style({ opacity: 0 })),
                        transition('hide <=> show', [animate(200)])
                    ])]
            },] },
];
/** @nocollapse */
GalleryComponent.ctorParameters = () => [];
GalleryComponent.propDecorators = {
    "imgs": [{ type: Input },],
    "canDelete": [{ type: Input },],
    "delete": [{ type: Output },],
    "hide": [{ type: Output },],
    "show": [{ type: Input },],
    "showChange": [{ type: Output },],
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class GalleryModule {
    /**
     * @return {?}
     */
    static forRoot() {
        return { ngModule: GalleryModule, providers: [] };
    }
}
GalleryModule.decorators = [
    { type: NgModule, args: [{
                imports: [CommonModule],
                declarations: [GalleryComponent],
                exports: [GalleryComponent],
                entryComponents: [GalleryComponent]
            },] },
];
/** @nocollapse */
GalleryModule.ctorParameters = () => [];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class PickerConfig {
    constructor() {
        /**
         * 取消按钮文本，默认：`取消`
         */
        this.cancel = '取消';
        /**
         * 确定按钮文本，默认：`确定`
         */
        this.confirm = '确定';
        /**
         * 允许点击背景关闭，默认：`true`
         */
        this.backdrop = true;
    }
}
PickerConfig.decorators = [
    { type: Injectable },
];
/** @nocollapse */
PickerConfig.ctorParameters = () => [];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class PickerComponent {
    /**
     * @param {?} el
     * @param {?} DEF
     */
    constructor(el, DEF) {
        this.el = el;
        this.DEF = DEF;
        this._text = '';
        this.disabled = false;
        /**
         * 确认后回调当前选择数据（包括已选面板所有数据）
         *
         * `{ value: '10000', items: [ {}, {}, {} ] }`
         */
        this.change = new EventEmitter();
        /**
         * 列变更时回调
         */
        this.groupChange = new EventEmitter();
        /**
         * 取消后回调
         */
        this.cancel = new EventEmitter();
        /**
         * 显示时回调
         */
        this.show = new EventEmitter();
        /**
         * 隐藏后回调
         */
        this.hide = new EventEmitter();
        this._showP = false;
        this._shown = false;
        this.onChange = Function.prototype;
        this.onTouched = Function.prototype;
    }
    /**
     * 当前默认位置，数组的长度必须等同于 groups 长度
     * @param {?} d
     * @return {?}
     */
    set defaultSelect(d) {
        if (d)
            this._selected = d;
    }
    /**
     * 多列数据，以数组的长度来决定几列数据
     * 支持string[]单列数组，单纯只是为了方便
     * @param {?} d
     * @return {?}
     */
    set groups(d) {
        if (!d)
            throw new Error('无效数据源');
        if (d.length > 0) {
            if (typeof d[0] === 'string') {
                d = [
                    (/** @type {?} */ (d)).map((v) => {
                        return { label: v, value: v };
                    })
                ];
            }
        }
        this._groups = /** @type {?} */ (d);
        this._selected = this._selected ? this._selected : Array(d.length).fill(0);
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        if (!this.options)
            this.parseOptions();
    }
    /**
     * @param {?} fh
     * @return {?}
     */
    _onHide(fh) {
        if (!fh && !this.options.backdrop)
            return false;
        this._shown = false;
        setTimeout(() => {
            this._showP = false;
            this.hide.emit();
        }, 300);
        return this;
    }
    /**
     * @return {?}
     */
    _onShow() {
        if (this.disabled)
            return false;
        this._showP = true;
        this._shown = true;
        this.show.emit();
        return this;
    }
    /**
     * @return {?}
     */
    parseOptions() {
        this.options = Object.assign(/** @type {?} */ ({
            type: 'form',
            cancel: '取消',
            confirm: '确定',
            backdrop: true,
            gruopCount: null,
            separator: ' '
        }), this.DEF, this.options);
    }
    /**
     * @return {?}
     */
    getSelecteItem() {
        const /** @type {?} */ res = [];
        this._groups.forEach((items, idx) => {
            const /** @type {?} */ item = items[this._selected[idx]];
            if (item)
                res.push(item);
        });
        return res;
    }
    /**
     * @param {?=} res
     * @return {?}
     */
    _setText(res = null) {
        if (res === null)
            res = this.getSelecteItem();
        if (res.length > 0)
            this._text = res.map((i) => i.label || i.value).join(this.options.separator);
        return this;
    }
    /**
     * @return {?}
     */
    _setDefault() {
        this._selected = [];
        this._groups.forEach((items) => {
            let /** @type {?} */ idx = items.findIndex((i) => i.value === this._value);
            if (idx <= -1)
                idx = 0;
            this._selected.push(idx);
        });
        return this;
    }
    /**
     * @param {?} data
     * @param {?} groupIndex
     * @return {?}
     */
    _onGroupChange(data, groupIndex) {
        this._selected[groupIndex] = data.index;
        this.groupChange.emit({ item: data.item, index: data.index, groupIndex });
    }
    /**
     * @return {?}
     */
    _onCancel() {
        this.cancel.emit();
        this._onHide(true);
        return false;
    }
    /**
     * @return {?}
     */
    _onConfirm() {
        const /** @type {?} */ res = this.getSelecteItem();
        this._setText(res);
        const /** @type {?} */ lastItem = res[res.length - 1] || {};
        const /** @type {?} */ val = lastItem.value || lastItem.label;
        this.onChange(val);
        this.onTouched();
        this.change.emit({ value: val, items: res });
        this._onHide(true);
        return false;
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
        if ('options' in changes) {
            this.parseOptions();
        }
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
    }
    /**
     * @param {?} value
     * @return {?}
     */
    writeValue(value) {
        if (!value)
            this._text = '';
        if (value && value !== this._value) {
            this._value = value;
            // todo：当ngModel传递一个未列表中的值的情况 & 多列时数据对应问题
            this._setDefault()._setText();
        }
    }
    /**
     * @param {?} fn
     * @return {?}
     */
    registerOnChange(fn) { this.onChange = fn; }
    /**
     * @param {?} fn
     * @return {?}
     */
    registerOnTouched(fn) { this.onTouched = fn; }
    /**
     * @param {?} isDisabled
     * @return {?}
     */
    setDisabledState(isDisabled) {
    }
    /**
     * @param {?} $event
     * @return {?}
     */
    _onFocus($event) {
        arguments[0].target.blur();
    }
}
PickerComponent.decorators = [
    { type: Component, args: [{
                selector: 'weui-picker',
                template: `
        <input type="text" class="weui-input" value="{{_text}}" placeholder="{{placeholder}}"
            readonly="readonly" (focus)="_onFocus($event)"
            (click)="_onShow()" [disabled]="disabled" *ngIf="options.type==='form'">
        <div [hidden]="!_showP">
            <div class="weui-mask" (click)="_onHide(false)"
                [ngClass]="{'weui-animate-fade-in': _shown, 'weui-animate-fade-out': !_shown}"></div>
            <div class="weui-picker"
                [ngClass]="{'weui-animate-slide-up': _shown, 'weui-animate-slide-down': !_shown}">
                <div class="weui-picker__hd">
                    <a href="#" class="weui-picker__action" (click)="_onCancel()">{{options.cancel}}</a>
                    <a href="#" class="weui-picker__action" (click)="_onConfirm()">{{options.confirm}}</a>
                </div>
                <div class="weui-picker__bd">
                    <weui-picker-group tappable
                        *ngFor="let items of _groups; let i = index;"
                        [items]="items"
                        [defaultIndex]="_selected[i]"
                        groupIndex="{{i}}" (change)="_onGroupChange($event, i)"></weui-picker-group>
                </div>
            </div>
        </div>
    `,
                providers: [{
                        provide: NG_VALUE_ACCESSOR,
                        useExisting: forwardRef(() => PickerComponent),
                        multi: true
                    }]
            },] },
];
/** @nocollapse */
PickerComponent.ctorParameters = () => [
    { type: ElementRef, },
    { type: PickerConfig, },
];
PickerComponent.propDecorators = {
    "options": [{ type: Input },],
    "defaultSelect": [{ type: Input },],
    "groups": [{ type: Input },],
    "placeholder": [{ type: Input },],
    "disabled": [{ type: Input },],
    "change": [{ type: Output },],
    "groupChange": [{ type: Output },],
    "cancel": [{ type: Output },],
    "show": [{ type: Output },],
    "hide": [{ type: Output },],
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
const getWindowHeight = () => {
    return window.innerHeight;
};
/**
 * 多列选择器组
 */
class PickerGroupComponent {
    constructor() {
        /**
         * 当前默认位置
         */
        this.defaultIndex = -1;
        /**
         * 变更回调
         */
        this.change = new EventEmitter();
        this.defaults = {
            offset: 3,
            // 列表初始化时的偏移量（列表初始化时，选项是聚焦在中间的，通过offset强制往上挪3项，以达到初始选项是为顶部的那项）
            rowHeight: 34,
            // 列表每一行的高度
            bodyHeight: 7 * 34,
            // picker的高度，用于辅助点击滚动的计算
            inertiaTime: 150,
            // 惯性滑动的保持时间，此值直接影响“灵敏度” (单位：ms)
            slideDuration: 300 // 惯性滑动的动画时间，表现为最终可视化的效果
        };
        this._animating = false;
        this._distance = 0;
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
        if ('defaultIndex' in changes) {
            if (this.defaultIndex < 0 || (this.items && this.defaultIndex >= this.items.length))
                this.defaultIndex = 0;
            this._distance = (this.defaults.offset - this.defaultIndex) * this.defaults.rowHeight;
        }
    }
    /**
     * @param {?} e
     * @return {?}
     */
    onTouchStart(e) {
        if (this.items.length <= 1)
            return;
        this.startY = e.changedTouches[0].pageY;
        this.startTime = +new Date();
    }
    /**
     * @param {?} e
     * @return {?}
     */
    onTouchMove(e) {
        if (this.items.length <= 1)
            return;
        const /** @type {?} */ endTime = +new Date();
        this.endY = e.changedTouches[0].pageY;
        // 计算滑动的速度: 距离 / 时间
        const /** @type {?} */ _distance = this.endY - this.startY;
        this.speed = _distance / (endTime - this.startTime);
        // 重新设置开始时间、开始位置
        this.startTime = endTime;
        this.startY = this.endY;
        this._animating = false; // ms
        this._distance += _distance; // 内容移动的距离
        e.preventDefault();
    }
    /**
     * @param {?} event
     * @return {?}
     */
    onTouchEnd(event) {
        if (!this.startY)
            return;
        this.endY = event.changedTouches[0].pageY;
        /**
         * 思路:
         * 根据最后一次touchmove事件的速度(speed)，判断是否执行惯性滑动；
         * 如果speed大于1、小于5，则根据速度乘以惯性滑动的时间(如150ms)，计算出应该滑动的距离；
         * 如果speed大于5，则按照屏幕的高度(减去列表高度的一半)，作为该滑动的距离。
         */
        const /** @type {?} */ _speed = Math.abs(this.speed);
        if (_speed >= 5) {
            const /** @type {?} */ windowY = getWindowHeight() - (this.defaults.bodyHeight / 2);
            this.stop(windowY - this.endY);
        }
        else if (_speed >= 1) {
            const /** @type {?} */ diff = this.speed * this.defaults.inertiaTime; // 滑行 150ms,这里直接影响“灵敏度”
            this.stop(diff);
        }
        else {
            this.stop(0);
        }
        this.startY = null;
    }
    /**
     * @param {?} diff
     * @return {?}
     */
    stop(diff) {
        let /** @type {?} */ dist = this._distance + diff;
        // 移动到最接近的那一行
        dist = Math.round(dist / this.defaults.rowHeight) * this.defaults.rowHeight;
        const /** @type {?} */ max = this._getMax(this.defaults.offset, this.defaults.rowHeight);
        const /** @type {?} */ min = this._getMin(this.defaults.offset, this.defaults.rowHeight, this.items.length);
        // 不要超过最大值或者最小值
        dist = Math.max(Math.min(dist, max), min);
        // 如果是 disabled 的就跳过
        let /** @type {?} */ index = this.defaults.offset - dist / this.defaults.rowHeight;
        while (!!this.items[index] && this.items[index].disabled) {
            diff > 0 ? ++index : --index;
        }
        dist = (this.defaults.offset - index) * this.defaults.rowHeight;
        this._animating = true;
        this._distance = dist; // px
        // 触发选择事件
        this.onChange(this.items[index], index);
    }
    /**
     * @param {?} item
     * @param {?=} index
     * @return {?}
     */
    onChange(item, index = 0) {
        this.change.emit({ item, index });
    }
    /**
     * @param {?} offset
     * @param {?} rowHeight
     * @return {?}
     */
    _getMax(offset, rowHeight) {
        return offset * rowHeight;
    }
    /**
     * @param {?} offset
     * @param {?} rowHeight
     * @param {?} length
     * @return {?}
     */
    _getMin(offset, rowHeight, length) {
        return -(rowHeight * (length - offset - 1));
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
    }
}
PickerGroupComponent.decorators = [
    { type: Component, args: [{
                selector: 'weui-picker-group',
                template: `
        <ng-content></ng-content>
        <div class="weui-picker__mask"></div>
        <div class="weui-picker__indicator"></div>
        <div class="weui-picker__content" [ngStyle]="{
            'transform': 'translate(0,' + _distance + 'px)',
            'transition': _animating ? 'transform .3s' : 'none'
        }">
            <div class="weui-picker__item" *ngFor="let item of items"
                [ngClass]="{'weui-picker__item_disabled': item.disabled}">{{item.label || item.value}}</div>
        </div>
    `,
                host: {
                    '[class.weui-picker__group]': 'true'
                }
            },] },
];
/** @nocollapse */
PickerGroupComponent.ctorParameters = () => [];
PickerGroupComponent.propDecorators = {
    "items": [{ type: Input },],
    "defaultIndex": [{ type: Input },],
    "groupIndex": [{ type: Input },],
    "change": [{ type: Output },],
    "onTouchStart": [{ type: HostListener, args: ['touchstart', ['$event'],] },],
    "onTouchMove": [{ type: HostListener, args: ['touchmove', ['$event'],] },],
    "onTouchEnd": [{ type: HostListener, args: ['touchend', ['$event'],] },],
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
const FORMAT = {
    format: null,
    yu: '年',
    Mu: '月',
    du: '日',
    hu: '时',
    mu: '分'
};
/**
 * 日期时间选择器
 */
class DatePickerComponent {
    /**
     * @param {?} el
     * @param {?} datePipe
     */
    constructor(el, datePipe) {
        this.el = el;
        this.datePipe = datePipe;
        this._groups = [];
        this._selected = [];
        /**
         * 类型
         * + `date-ym` 年月
         * + `date` 日期
         * + `datetime` 日期&时间（不包括秒）
         * + `time` 时间（不包括秒）
         */
        this.type = 'date';
        this._format = Object.assign({}, FORMAT);
        /**
         * 确认后回调
         */
        this.change = new EventEmitter();
        /**
         * 列变更时回调
         */
        this.groupChange = new EventEmitter();
        /**
         * 取消后回调
         */
        this.cancel = new EventEmitter();
        /**
         * 显示时回调
         */
        this.show = new EventEmitter();
        /**
         * 隐藏后回调
         */
        this.hide = new EventEmitter();
        this.initFlag = false;
        this.onChange = Function.prototype;
        this.onTouched = Function.prototype;
    }
    /**
     * 日期格式化代码，实际是采用 DatePipe，所有代码内容和它一样
     * @param {?} v
     * @return {?}
     */
    set format(v) {
        if (typeof v === 'string') {
            this._format = Object.assign(FORMAT, {
                format: v
            });
        }
        else {
            this._format = Object.assign(FORMAT, v);
        }
    }
    /**
     * @return {?}
     */
    genGroups() {
        if (!this._value)
            this._value = new Date();
        this._groups = [];
        this._selected = [];
        if (~this.type.indexOf('date'))
            this.genDateGroups();
        if (~this.type.indexOf('time'))
            this.genDateTimeGroups();
    }
    /**
     * @return {?}
     */
    genDateGroups() {
        const /** @type {?} */ year = this._value.getFullYear(), /** @type {?} */
        month = this._value.getMonth() + 1, /** @type {?} */
        day = this._value.getDate();
        // year
        let /** @type {?} */ _selected = 0, /** @type {?} */
        startYear = year - 10, /** @type {?} */
        endYear = year + 10;
        if (this.min)
            startYear = this.min.getFullYear();
        if (this.max)
            endYear = this.max.getFullYear();
        this._groups.push(Array(endYear - startYear + 1).fill(0).map((v, idx) => {
            const /** @type {?} */ _v = startYear + idx;
            if (_v === year)
                _selected = idx;
            return { label: _v + this._format.yu, value: _v };
        }));
        this._selected.push(_selected);
        // month
        const /** @type {?} */ cy = this._groups[0][_selected].value;
        let /** @type {?} */ startMonth = 1, /** @type {?} */ endMonth = 12;
        if (cy === startYear)
            startMonth = this.min.getMonth() + 1;
        if (cy === endYear)
            endMonth = this.max.getMonth() + 1;
        _selected = 0;
        this._groups.push(Array(endMonth - startMonth + 1).fill(0).map((v, idx) => {
            const /** @type {?} */ _v = startMonth + idx;
            if (_v === month)
                _selected = idx;
            return { label: _v + this._format.Mu, value: _v };
        }));
        this._selected.push(_selected);
        // day
        if (this.type !== 'date-ym') {
            const /** @type {?} */ cm = this._groups[1][_selected].value;
            let /** @type {?} */ startDay = 1, /** @type {?} */ endDay = new Date(year, month, 0).getDate();
            if (cy === startYear && cm === startMonth)
                startDay = this.min.getDate();
            if (cy === endYear && cm === endMonth)
                endDay = this.max.getDate();
            _selected = 0;
            this._groups.push(Array(endDay - startDay + 1).fill(0).map((v, idx) => {
                const /** @type {?} */ _v = startDay + idx;
                if (_v === day)
                    _selected = idx;
                return { label: _v + this._format.du, value: _v };
            }));
            this._selected.push(_selected);
        }
    }
    /**
     * @return {?}
     */
    genDateTimeGroups() {
        const /** @type {?} */ hours = this._value.getHours(), /** @type {?} */
        minutes = this._value.getMinutes();
        // hours
        let /** @type {?} */ _selected = 0;
        this._groups.push(Array(24).fill(0).map((v, idx) => {
            const /** @type {?} */ _v = idx;
            if (_v === hours)
                _selected = idx;
            return { label: _v + this._format.hu, value: _v };
        }));
        this._selected.push(_selected);
        // minutes
        _selected = 0;
        this._groups.push(Array(60).fill(0).map((v, idx) => {
            const /** @type {?} */ _v = idx;
            if (_v === minutes)
                _selected = idx;
            return { label: _v + this._format.mu, value: _v };
        }));
        this._selected.push(_selected);
    }
    /**
     * @return {?}
     */
    genValueBySelected() {
        if (this.type === 'time') {
            const /** @type {?} */ now = new Date();
            this._value = new Date(now.getFullYear(), now.getMonth() + 1, now.getDate(), this._groups[0][this._selected[0]].value, this._groups[1][this._selected[1]].value, 0);
            return this;
        }
        const /** @type {?} */ obj = {
            y: this._groups[0][this._selected[0]].value,
            M: this._groups[1][this._selected[1]].value - 1,
            d: this.type !== 'date-ym' ? this._groups[2][this._selected[2]].value : 1,
            h: 0,
            m: 0,
            s: 0
        };
        if (~this.type.indexOf('time')) {
            obj.h = this._groups[3][this._selected[3]].value;
            obj.m = this._groups[4][this._selected[4]].value;
        }
        this._value = new Date(obj.y, obj.M, obj.d, obj.h, obj.m, obj.s);
        return this;
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        this._groups = null;
    }
    /**
     * @param {?} date
     * @return {?}
     */
    getFormatDate(date) {
        let /** @type {?} */ f = '';
        if (this._format && this._format.format)
            f = this._format.format;
        else {
            switch (this.type) {
                case 'date-ym':
                    f = 'yyyy-MM';
                    break;
                case 'date':
                    f = 'yyyy-MM-dd';
                    break;
                case 'datetime':
                    f = 'yyyy-MM-dd HH:mm:ss';
                    break;
                case 'time':
                    f = 'HH:mm';
                    break;
            }
        }
        return this.datePipe.transform(date, f);
    }
    /**
     * @param {?} data
     * @return {?}
     */
    _onCityChange(data) {
        this.genValueBySelected();
        const /** @type {?} */ retVal = new Date(this._value.getTime());
        this.onChange(retVal);
        this.onTouched();
        data.value = retVal;
        data.formatValue = this.getFormatDate(retVal);
        this._pickerInstance._text = data.formatValue;
        this.change.emit(data);
    }
    /**
     * @param {?} res
     * @return {?}
     */
    _onCityGroupChange(res) {
        this._selected[res.groupIndex] = res.index;
        if (res.groupIndex !== (this._groups.length - 1)) {
            this.genValueBySelected().genGroups();
        }
        this.groupChange.emit(res);
    }
    /**
     * @return {?}
     */
    _onCityCancelChange() {
        this.cancel.emit();
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.initFlag = true;
        this.genGroups();
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
        if (this.initFlag)
            this.genGroups();
    }
    /**
     * 服务于Service，并无实际意义
     * @return {?}
     */
    _triggerShow() {
        this._pickerInstance._onShow();
    }
    /**
     * @return {?}
     */
    _onShow() {
        this.show.emit();
    }
    /**
     * @return {?}
     */
    _onHide() {
        this.hide.emit();
    }
    /**
     * @param {?} value
     * @return {?}
     */
    writeValue(value) {
        if (value)
            this.genGroups();
        this._value = value;
        this._pickerInstance._text = value instanceof Date ? this.getFormatDate(value) : '';
    }
    /**
     * @param {?} fn
     * @return {?}
     */
    registerOnChange(fn) { this.onChange = fn; }
    /**
     * @param {?} fn
     * @return {?}
     */
    registerOnTouched(fn) { this.onTouched = fn; }
    /**
     * @param {?} isDisabled
     * @return {?}
     */
    setDisabledState(isDisabled) {
    }
}
DatePickerComponent.decorators = [
    { type: Component, args: [{
                selector: 'weui-date-picker',
                template: `
    <weui-picker [placeholder]="placeholder"
        [groups]="_groups" [defaultSelect]="_selected" [disabled]="disabled" [options]="options"
        (show)="_onShow()"
        (hide)="_onHide()"
        (change)="_onCityChange($event)"
        (groupChange)="_onCityGroupChange($event)"
        (cancel)="_onCityCancelChange()"></weui-picker>
    `,
                providers: [
                    DatePipe, {
                        provide: NG_VALUE_ACCESSOR,
                        useExisting: forwardRef(() => DatePickerComponent),
                        multi: true
                    }
                ]
            },] },
];
/** @nocollapse */
DatePickerComponent.ctorParameters = () => [
    { type: ElementRef, },
    { type: DatePipe, },
];
DatePickerComponent.propDecorators = {
    "_pickerInstance": [{ type: ViewChild, args: [PickerComponent,] },],
    "min": [{ type: Input },],
    "max": [{ type: Input },],
    "type": [{ type: Input },],
    "format": [{ type: Input },],
    "options": [{ type: Input },],
    "placeholder": [{ type: Input },],
    "disabled": [{ type: Input },],
    "change": [{ type: Output },],
    "groupChange": [{ type: Output },],
    "cancel": [{ type: Output },],
    "show": [{ type: Output },],
    "hide": [{ type: Output },],
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * 城市选择器（并不包含城市数据，可以参考示例中的数据格式）
 */
class CityPickerComponent {
    constructor() {
        this._groups = [];
        this._selected = [];
        this.dataMap = { label: 'name', value: 'code', items: 'sub' };
        /**
         * 确认后回调当前选择数据（包括已选面板所有数据）
         *
         * `{ value: '10000', items: [ {}, {}, {} ] }`
         */
        this.change = new EventEmitter();
        /**
         * 列变更时回调
         */
        this.groupChange = new EventEmitter();
        /**
         * 取消后回调
         */
        this.cancel = new EventEmitter();
        /**
         * 显示时回调
         */
        this.show = new EventEmitter();
        /**
         * 隐藏后回调
         */
        this.hide = new EventEmitter();
        this.onChange = Function.prototype;
        this.onTouched = Function.prototype;
    }
    /**
     * 城市数据，可以参考示例中的数据格式
     * @param {?} d
     * @return {?}
     */
    set data(d) {
        this._tmpData = d;
        this.parseData(this._tmpData, this.dataMap.items, this._selected);
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        this._tmpData = null;
        this._groups = null;
    }
    /**
     * @param {?} data
     * @param {?} subKey
     * @param {?=} selected
     * @param {?=} group
     * @param {?=} newselected
     * @return {?}
     */
    parseData(data, subKey, selected = [], group = [], newselected = []) {
        let /** @type {?} */ _selected = 0;
        if (Array.isArray(selected) && selected.length > 0) {
            const /** @type {?} */ _selectedClone = selected.slice(0);
            _selected = _selectedClone.shift();
            selected = _selectedClone;
        }
        if (typeof data[_selected] === 'undefined') {
            _selected = 0;
        }
        newselected.push(_selected);
        const /** @type {?} */ item = data[_selected];
        const /** @type {?} */ _group = JSON.parse(JSON.stringify(data));
        _group.forEach((g) => {
            delete g[subKey];
            g.label = g[this.dataMap.label];
            g.value = g[this.dataMap.value];
        });
        group.push(_group);
        if (typeof item[subKey] !== 'undefined' && Array.isArray(item[subKey])) {
            return this.parseData(item[subKey], subKey, selected, group, newselected);
        }
        else {
            this._groups = group;
            this._selected = newselected;
            return { groups: group, newselected };
        }
    }
    /**
     * 将值转换成位置
     * @param {?} data
     * @param {?} subKey
     * @param {?=} dept
     * @param {?=} newSelected
     * @return {?}
     */
    valueToSelect(data, subKey, dept = 1, newSelected = []) {
        const /** @type {?} */ code = (this._value.substr(0, dept * 2) + '0000').substr(0, 6);
        let /** @type {?} */ _selected = data.findIndex((w) => w[this.dataMap.value] === code);
        if (_selected <= -1) {
            _selected = 0;
        }
        newSelected.push(_selected);
        const /** @type {?} */ item = data[_selected];
        if (typeof item[subKey] !== 'undefined' && Array.isArray(item[subKey])) {
            return this.valueToSelect(item[subKey], subKey, ++dept, newSelected);
        }
        else {
            this._selected = newSelected;
            setTimeout(() => {
                this._pickerInstance._setText();
            }, 100);
            return newSelected;
        }
    }
    /**
     * @param {?} data
     * @return {?}
     */
    _onCityChange(data) {
        this.onChange(data.value);
        this.onTouched();
        this.change.emit(data);
    }
    /**
     * @param {?} res
     * @return {?}
     */
    _onCityGroupChange(res) {
        this._selected[res.groupIndex] = res.index;
        if (res.groupIndex !== 2)
            this.parseData(this._tmpData, this.dataMap.items, this._selected);
        this.groupChange.emit(res);
    }
    /**
     * @return {?}
     */
    _onCityCancelChange() {
        this.cancel.emit();
    }
    /**
     * 服务于Service，并无实际意义
     * @return {?}
     */
    _triggerShow() {
        this._pickerInstance._onShow();
    }
    /**
     * @return {?}
     */
    _onShow() {
        this.show.emit();
    }
    /**
     * @return {?}
     */
    _onHide() {
        this.hide.emit();
    }
    /**
     * @param {?} value
     * @return {?}
     */
    writeValue(value) {
        if (!value) {
            this._pickerInstance._text = '';
            return;
        }
        this._value = value;
        if (this._value && this._value.length === 6) {
            this.valueToSelect(this._tmpData, this.dataMap.items, 1);
            this.parseData(this._tmpData, this.dataMap.items, this._selected);
        }
    }
    /**
     * @param {?} fn
     * @return {?}
     */
    registerOnChange(fn) { this.onChange = fn; }
    /**
     * @param {?} fn
     * @return {?}
     */
    registerOnTouched(fn) { this.onTouched = fn; }
    /**
     * @param {?} isDisabled
     * @return {?}
     */
    setDisabledState(isDisabled) {
    }
}
CityPickerComponent.decorators = [
    { type: Component, args: [{
                selector: 'weui-city-picker',
                template: `
    <weui-picker [placeholder]="placeholder"
        [groups]="_groups" [defaultSelect]="_selected" [disabled]="disabled" [options]="options"
        (show)="_onShow()"
        (hide)="_onHide()"
        (change)="_onCityChange($event)"
        (groupChange)="_onCityGroupChange($event)"
        (cancel)="_onCityCancelChange()"></weui-picker>
    `,
                providers: [{
                        provide: NG_VALUE_ACCESSOR,
                        useExisting: forwardRef(() => CityPickerComponent),
                        multi: true
                    }]
            },] },
];
/** @nocollapse */
CityPickerComponent.ctorParameters = () => [];
CityPickerComponent.propDecorators = {
    "_pickerInstance": [{ type: ViewChild, args: [PickerComponent,] },],
    "dataMap": [{ type: Input },],
    "data": [{ type: Input },],
    "options": [{ type: Input },],
    "placeholder": [{ type: Input },],
    "disabled": [{ type: Input },],
    "change": [{ type: Output },],
    "groupChange": [{ type: Output },],
    "cancel": [{ type: Output },],
    "show": [{ type: Output },],
    "hide": [{ type: Output },],
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * 多列选择器Service，可直接通过Class构造选择器
 */
class PickerService extends BaseService {
    /**
     * @param {?} resolver
     * @param {?} applicationRef
     * @param {?} injector
     */
    constructor(resolver, applicationRef, injector) {
        super(resolver, applicationRef, injector);
    }
    /**
     * 构建一个多列选择器并显示
     *
     * @param {?} data 数据源
     * @param {?=} value 默认值（限单列时会根据值自动解析，而对多列使用defaultSelect自行解析）
     * @param {?=} defaultSelect 当前默认位置，数组的长度必须等同于 groups 长度
     * @param {?=} options 配置项
     * @return {?} 务必订阅结果才会显示。
     */
    show(data, value, defaultSelect, options) {
        const /** @type {?} */ componentRef = this.build(PickerComponent);
        // 通过Service打开的强制设置为 `default` 以免出现 `input`
        options = Object.assign({}, options, { type: 'default' });
        componentRef.instance.options = options;
        if (defaultSelect)
            componentRef.instance.defaultSelect = defaultSelect;
        componentRef.instance.groups = data;
        if (value) {
            setTimeout(() => {
                componentRef.instance.writeValue(value);
            }, 100);
        }
        componentRef.instance.hide.subscribe(() => {
            setTimeout(() => {
                this.destroy(componentRef);
            }, 100);
        });
        componentRef.instance._onShow();
        return componentRef.instance.change;
    }
    /**
     * 构建一个城市选择器并显示
     *
     * @param {?} data 城市数据，可以参考示例中的数据格式
     * @param {?=} value
     * @param {?=} dataMap
     * @param {?=} options 配置项
     * @return {?} 务必订阅结果才会显示。
     */
    showCity(data, value, dataMap, options) {
        const /** @type {?} */ componentRef = this.build(CityPickerComponent);
        if (dataMap)
            componentRef.instance.dataMap = dataMap;
        // 通过Service打开的强制设置为 `default` 以免出现 `input`
        options = Object.assign({}, options, { type: 'default' });
        componentRef.instance.options = options;
        componentRef.instance.data = data;
        if (value) {
            setTimeout(() => {
                componentRef.instance.writeValue(value);
            }, 100);
        }
        componentRef.instance.hide.subscribe(() => {
            setTimeout(() => {
                this.destroy(componentRef);
            }, 100);
        });
        setTimeout(() => {
            componentRef.instance._triggerShow();
        }, 200);
        return componentRef.instance.change;
    }
    /**
     * 构建一个日期时间选择器并显示
     *
     * @param {?=} type
     * @param {?=} format
     * @param {?=} value
     * @param {?=} min
     * @param {?=} max
     * @param {?=} options
     * @return {?} 务必订阅结果才会显示。
     */
    showDateTime(type, format, value, min, max, options) {
        const /** @type {?} */ componentRef = this.build(DatePickerComponent);
        // 通过Service打开的强制设置为 `default` 以免出现 `input`
        options = Object.assign({}, options, { type: 'default' });
        componentRef.instance.options = options;
        if (type)
            componentRef.instance.type = type;
        if (format)
            componentRef.instance.format = format;
        if (min)
            componentRef.instance.min = min;
        if (max)
            componentRef.instance.max = max;
        if (value) {
            setTimeout(() => {
                componentRef.instance.writeValue(value);
            }, 100);
        }
        componentRef.instance.hide.subscribe(() => {
            setTimeout(() => {
                this.destroy(componentRef);
            }, 100);
        });
        setTimeout(() => {
            componentRef.instance.ngOnChanges(null);
            componentRef.instance._triggerShow();
        }, 200);
        return componentRef.instance.change;
    }
}
PickerService.decorators = [
    { type: Injectable },
];
/** @nocollapse */
PickerService.ctorParameters = () => [
    { type: ComponentFactoryResolver, },
    { type: ApplicationRef, },
    { type: Injector, },
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class PickerModule {
    /**
     * @return {?}
     */
    static forRoot() {
        return { ngModule: PickerModule, providers: [PickerConfig] };
    }
}
PickerModule.decorators = [
    { type: NgModule, args: [{
                imports: [CommonModule],
                declarations: [PickerComponent, PickerGroupComponent, DatePickerComponent, CityPickerComponent],
                exports: [PickerComponent, PickerGroupComponent, DatePickerComponent, CityPickerComponent],
                providers: [PickerService],
                entryComponents: [PickerComponent, PickerGroupComponent, DatePickerComponent, CityPickerComponent]
            },] },
];
/** @nocollapse */
PickerModule.ctorParameters = () => [];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class SearchBarConfig {
    constructor() {
        /**
         * 占位符，默认：`搜索`
         */
        this.placeholder = '搜索';
        /**
         * 取消按键文字，默认：`取消`
         */
        this.cancelText = '取消';
        /**
         * 去抖时长（单位：ms），默认：`300`
         */
        this.debounceTime = 300;
    }
}
SearchBarConfig.decorators = [
    { type: Injectable },
];
/** @nocollapse */
SearchBarConfig.ctorParameters = () => [];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class SearchBarComponent {
    /**
     * @param {?} DEF
     */
    constructor(DEF) {
        this._q = '';
        /**
         * 搜索回调
         */
        this.search = new EventEmitter();
        /**
         * 取消回调
         */
        this.cancel = new EventEmitter();
        /**
         * 清空回调
         */
        this.clear = new EventEmitter();
        /**
         * 提交回调（指的是键盘回车后）
         */
        this.submit = new EventEmitter();
        this._focus = false;
        this._subject = new Subject$1();
        Object.assign(this, DEF);
    }
    /**
     * @param {?} _value
     * @return {?}
     */
    set value(_value) {
        this._q = _value;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this._sub = this._subject
            .pipe(debounceTime(this.debounceTime), distinctUntilChanged())
            .subscribe((q) => {
            this.search.emit(q);
        });
    }
    /**
     * @return {?}
     */
    _doFocus() {
        this._term.nativeElement.focus();
    }
    /**
     * @return {?}
     */
    _onBlur() {
        if (this._q === '')
            this._focus = false;
    }
    /**
     * @return {?}
     */
    _onSearch() {
        this._subject.next(this._q);
    }
    /**
     * @return {?}
     */
    _onCancel() {
        this._q = '';
        this._onBlur();
        this._subject.next('');
        this.cancel.emit();
    }
    /**
     * @return {?}
     */
    _onClear() {
        this._q = '';
        this._doFocus();
        this._subject.next('');
        this.clear.emit();
    }
    /**
     * @param {?} e
     * @return {?}
     */
    _onSubmit(e) {
        e.preventDefault();
        e.stopPropagation();
        this._subject.next(this._q);
        this.submit.emit(this._q);
        return false;
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        if (this._sub)
            this._sub.unsubscribe();
    }
}
SearchBarComponent.decorators = [
    { type: Component, args: [{
                selector: 'weui-searchbar',
                template: `
        <div class="weui-search-bar" [ngClass]="{'weui-search-bar_focusing': _focus}">
            <form class="weui-search-bar__form" (ngSubmit)="_onSubmit($event)">
                <div class="weui-search-bar__box">
                    <i class="weui-icon-search"></i>
                    <input #term type="search" autocomplete="off" name="q" class="weui-search-bar__input"
                        [placeholder]="placeholder" [(ngModel)]="_q" (ngModelChange)="_onSearch()"
                        (focus)="_focus=true" (blur)="_onBlur()" />
                    <a href="javascript:" class="weui-icon-clear" (click)="_onClear()"></a>
                </div>
                <label class="weui-search-bar__label" (click)="_doFocus()">
                    <i class="weui-icon-search"></i>
                    <span>{{placeholder}}</span>
                </label>
            </form>
            <a href="javascript:" class="weui-search-bar__cancel-btn" (click)="_onCancel()">{{cancelText}}</a>
        </div>
    `
            },] },
];
/** @nocollapse */
SearchBarComponent.ctorParameters = () => [
    { type: SearchBarConfig, },
];
SearchBarComponent.propDecorators = {
    "value": [{ type: Input },],
    "placeholder": [{ type: Input },],
    "cancelText": [{ type: Input },],
    "debounceTime": [{ type: Input },],
    "search": [{ type: Output },],
    "cancel": [{ type: Output },],
    "clear": [{ type: Output },],
    "submit": [{ type: Output },],
    "_term": [{ type: ViewChild, args: ['term',] },],
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class SearchBarModule {
    /**
     * @return {?}
     */
    static forRoot() {
        return { ngModule: SearchBarModule, providers: [SearchBarConfig] };
    }
}
SearchBarModule.decorators = [
    { type: NgModule, args: [{
                imports: [CommonModule, FormsModule],
                declarations: [SearchBarComponent],
                exports: [SearchBarComponent],
                entryComponents: [SearchBarComponent]
            },] },
];
/** @nocollapse */
SearchBarModule.ctorParameters = () => [];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * \@docs-private
 */
class BarComponent {
    constructor() {
        this.tabs = [];
    }
    /**
     * @param {?} tab
     * @return {?}
     */
    add(tab) {
        this.tabs.push(tab);
        tab.active = this.tabs.length === 1 && tab.active !== false;
    }
    /**
     * @param {?} tab
     * @return {?}
     */
    remove(tab) {
        const /** @type {?} */ index = this.tabs.indexOf(tab);
        if (index === -1 || this.isDestroyed) {
            return;
        }
        // Select a new tab if the tab to be removed is selected and not destroyed
        if (tab.active && this.hasAvailableTabs(index)) {
            const /** @type {?} */ newActiveIndex = this.getClosestTabIndex(index);
            this.tabs[newActiveIndex].active = true;
        }
        tab.removed.emit(tab);
        this.tabs.splice(index, 1);
    }
    /**
     * @param {?} index
     * @return {?}
     */
    getClosestTabIndex(index) {
        const /** @type {?} */ tabsLength = this.tabs.length;
        if (!tabsLength) {
            return -1;
        }
        for (let /** @type {?} */ step = 1; step <= tabsLength; step += 1) {
            const /** @type {?} */ prevIndex = index - step;
            const /** @type {?} */ nextIndex = index + step;
            if (this.tabs[prevIndex] && !this.tabs[prevIndex].disabled) {
                return prevIndex;
            }
            if (this.tabs[nextIndex] && !this.tabs[nextIndex].disabled) {
                return nextIndex;
            }
        }
        return -1;
    }
    /**
     * @param {?} index
     * @return {?}
     */
    hasAvailableTabs(index) {
        const /** @type {?} */ tabsLength = this.tabs.length;
        if (!tabsLength) {
            return false;
        }
        for (let /** @type {?} */ i = 0; i < tabsLength; i += 1) {
            if (!this.tabs[i].disabled && i !== index) {
                return true;
            }
        }
        return false;
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        this.isDestroyed = true;
    }
}
BarComponent.decorators = [
    { type: Component, args: [{
                selector: 'weui-bar-component',
                template: ``
            },] },
];
/** @nocollapse */
BarComponent.ctorParameters = () => [];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class TabDirective {
    /**
     * @param {?} tab
     */
    constructor(tab) {
        /**
         * 当tab激活时触发
         */
        this.select = new EventEmitter();
        /**
         * 当tab无效时触发
         */
        this.deselect = new EventEmitter();
        /**
         * 当tab移除时触发
         */
        this.removed = new EventEmitter();
        this._tabComp = tab;
        this._tabComp.add(this);
    }
    /**
     * 激活
     * @return {?}
     */
    get active() {
        return this._active;
    }
    /**
     * @param {?} active
     * @return {?}
     */
    set active(active) {
        if (this.disabled && active || !active) {
            if (!active) {
                this._active = active;
            }
            this.deselect.emit(this);
            return;
        }
        this._active = active;
        this.select.emit(this);
        this._tabComp.tabs.forEach((tab) => {
            if (tab !== this) {
                tab.active = false;
            }
        });
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        this._tabComp.remove(this);
    }
}
TabDirective.decorators = [
    { type: Directive, args: [{ selector: 'weui-tab, [weui-tab]' },] },
];
/** @nocollapse */
TabDirective.ctorParameters = () => [
    { type: BarComponent, },
];
TabDirective.propDecorators = {
    "heading": [{ type: Input },],
    "disabled": [{ type: Input },],
    "icon": [{ type: Input },],
    "badge": [{ type: Input },],
    "select": [{ type: Output },],
    "deselect": [{ type: Output },],
    "removed": [{ type: Output },],
    "active": [{ type: HostBinding, args: ['class.active',] }, { type: Input },],
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * 顶部选项卡
 */
class NavbarComponent extends BarComponent {
    constructor() {
        super();
    }
}
NavbarComponent.decorators = [
    { type: Component, args: [{
                selector: 'weui-navbar',
                template: `
    <div class="weui-navbar">
        <div class="weui-navbar__item"
            [ngClass]="{'weui-bar__item_on': item.active}"
            [class.disabled]="item.disabled"
            *ngFor="let item of tabs" (click)="item.active=true">{{item.heading}}</div>
    </div>
    <div class="weui-tab__panel"><ng-content></ng-content></div>
    `,
                providers: [{ provide: BarComponent, useExisting: forwardRef(() => NavbarComponent) }],
                host: {
                    '[class.weui-tab]': 'true'
                }
            },] },
];
/** @nocollapse */
NavbarComponent.ctorParameters = () => [];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * 底部选项卡
 */
class TabbarComponent extends BarComponent {
    constructor() {
        super();
    }
}
TabbarComponent.decorators = [
    { type: Component, args: [{
                selector: 'weui-tabbar',
                template: `
    <div class="weui-tab__panel"><ng-content></ng-content></div>
    <div class="weui-tabbar">
        <div class="weui-tabbar__item" [ngClass]="{'weui-bar__item_on': item.active}"
            *ngFor="let item of tabs" (click)="item.active=true">
            <div style="display: inline-block;position: relative;">
                <div class="weui-tabbar__icon" [innerHTML]="item.icon"></div>
                <span class="weui-badge" style="position: absolute;top: -2px;right: -13px;" *ngIf="item.badge && item.badge !== 'dot'">{{item.badge}}</span>
                <span class="weui-badge weui-badge_dot" style="position: absolute;top: 0;right: -6px;" *ngIf="item.badge && item.badge === 'dot'"></span>
            </div>
            <p class="weui-tabbar__label">{{item.heading}}</p>
        </div>
    </div>
    `,
                providers: [{ provide: BarComponent, useExisting: forwardRef(() => TabbarComponent) }],
                host: {
                    '[class.weui-tab]': 'true'
                }
            },] },
];
/** @nocollapse */
TabbarComponent.ctorParameters = () => [];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class TabModule {
    /**
     * @return {?}
     */
    static forRoot() {
        return { ngModule: TabModule, providers: [] };
    }
}
TabModule.decorators = [
    { type: NgModule, args: [{
                imports: [CommonModule, FormsModule],
                declarations: [TabDirective, NavbarComponent, TabbarComponent, BarComponent],
                exports: [TabDirective, NavbarComponent, TabbarComponent]
            },] },
];
/** @nocollapse */
TabModule.ctorParameters = () => [];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class ToastConfig {
    constructor() {
        /**
         * 成功配置项
         */
        this.success = { text: '已完成', icon: 'weui-icon-success-no-circle', time: 2000 };
        /**
         * 加载中配置项
         */
        this.loading = { text: '加载中…', icon: 'weui-loading', time: 2000 };
    }
}
ToastConfig.decorators = [
    { type: Injectable },
];
/** @nocollapse */
ToastConfig.ctorParameters = () => [];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class ToastComponent {
    /**
     * @param {?} DEF
     */
    constructor(DEF) {
        this.DEF = DEF;
        /**
         * 显示时长后自动关闭（单位：ms），0 表示永久，默认：`2000`
         */
        this.time = 2000;
        /**
         * 隐藏后回调
         */
        this.hide = new EventEmitter();
        this._showd = false;
        this.type = 'success';
    }
    /**
     * 类型
     * @param {?} _t
     * @return {?}
     */
    set type(_t) {
        Object.assign(this, this.DEF[_t]);
    }
    /**
     * \@docs-private
     * @return {?}
     */
    onShow() {
        this._showd = true;
        if (this.time > 0) {
            this.timer = setTimeout(() => {
                this.onHide();
            }, this.time);
        }
        return this;
    }
    /**
     * \@docs-private
     * @return {?}
     */
    onHide() {
        this._showd = false;
        this.hide.emit();
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        if (this.timer) {
            clearTimeout(this.timer);
            this.timer = null;
        }
    }
}
ToastComponent.decorators = [
    { type: Component, args: [{
                selector: 'weui-toast',
                template: `
        <div class="weui-mask_transparent"></div>
        <div class="weui-toast">
            <i class="{{icon}} weui-icon_toast"></i>
            <p class="weui-toast__content">{{text}}</p>
        </div>
    `,
                host: {
                    '[hidden]': '!_showd'
                }
            },] },
];
/** @nocollapse */
ToastComponent.ctorParameters = () => [
    { type: ToastConfig, },
];
ToastComponent.propDecorators = {
    "type": [{ type: Input },],
    "text": [{ type: Input },],
    "icon": [{ type: Input },],
    "time": [{ type: Input },],
    "hide": [{ type: Output },],
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class ToastService extends BaseService {
    /**
     * @param {?} resolver
     * @param {?} applicationRef
     * @param {?} injector
     */
    constructor(resolver, applicationRef, injector) {
        super(resolver, applicationRef, injector);
    }
    /**
     * 构建toast并显示
     *
     * @param {?=} text
     * @param {?=} time
     * @param {?=} icon
     * @param {?=} type
     * @return {?}
     */
    show(text, time, icon, type) {
        const /** @type {?} */ componentRef = this.build(ToastComponent);
        if (type)
            componentRef.instance.type = type;
        if (text)
            componentRef.instance.text = text;
        if (icon)
            componentRef.instance.icon = icon;
        if (time)
            componentRef.instance.time = time;
        componentRef.instance.hide.subscribe(() => {
            setTimeout(() => {
                componentRef.destroy();
            }, 300);
        });
        return componentRef.instance.onShow();
    }
    /**
     * 关闭最新toast
     * @return {?}
     */
    hide() {
        this.destroy();
    }
    /**
     * 构建成功toast并显示
     *
     * @param {?=} text
     * @param {?=} time
     * @param {?=} icon
     * @return {?}
     */
    success(text, time, icon) {
        return this.show(text, time, icon, 'success');
    }
    /**
     * 构建加载中toast并显示
     *
     * @param {?=} text
     * @param {?=} time
     * @param {?=} icon
     * @return {?}
     */
    loading(text, time, icon) {
        return this.show(text, time, icon, 'loading');
    }
}
ToastService.decorators = [
    { type: Injectable },
];
/** @nocollapse */
ToastService.ctorParameters = () => [
    { type: ComponentFactoryResolver, },
    { type: ApplicationRef, },
    { type: Injector, },
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class ToastModule {
    /**
     * @return {?}
     */
    static forRoot() {
        return { ngModule: ToastModule, providers: [ToastConfig] };
    }
}
ToastModule.decorators = [
    { type: NgModule, args: [{
                imports: [CommonModule],
                declarations: [ToastComponent],
                exports: [ToastComponent],
                providers: [ToastService],
                entryComponents: [ToastComponent]
            },] },
];
/** @nocollapse */
ToastModule.ctorParameters = () => [];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class ToptipsComponent {
    constructor() {
        /**
         * 显示时长后自动关闭（单位：ms），默认：`2000`
         */
        this.time = 2000;
        /**
         * 隐藏后回调
         */
        this.hide = new EventEmitter();
        this._classMap = {};
        this._showd = false;
    }
    /**
     * 类型
     * @param {?} _type
     * @return {?}
     */
    set type(_type) {
        this._type = _type;
        this.setClassMap();
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.setClassMap();
    }
    /**
     * @return {?}
     */
    setClassMap() {
        this._classMap = {
            [`weui-toptips_${this._type}`]: true
        };
    }
    /**
     * @return {?}
     */
    onShow() {
        this.destroy();
        this._showd = true;
        this.timer = setTimeout(() => {
            this.onHide();
        }, this.time);
        return this;
    }
    /**
     * @return {?}
     */
    onHide() {
        this._showd = false;
        this.hide.emit();
    }
    /**
     * @return {?}
     */
    destroy() {
        if (this.timer) {
            clearTimeout(this.timer);
            this.timer = null;
        }
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        this.destroy();
    }
}
ToptipsComponent.decorators = [
    { type: Component, args: [{
                selector: 'weui-toptips',
                template: `
    <div class="weui-toptips" style="display:block" [ngClass]="_classMap">{{text}}<ng-content></ng-content></div>`,
                host: {
                    '[hidden]': '!_showd'
                }
            },] },
];
/** @nocollapse */
ToptipsComponent.ctorParameters = () => [];
ToptipsComponent.propDecorators = {
    "text": [{ type: Input },],
    "time": [{ type: Input },],
    "hide": [{ type: Output },],
    "type": [{ type: Input },],
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class ToptipsService extends BaseService {
    /**
     * @param {?} resolver
     * @param {?} applicationRef
     * @param {?} injector
     */
    constructor(resolver, applicationRef, injector) {
        super(resolver, applicationRef, injector);
    }
    /**
     * 构建一个Toptips并显示
     *
     * @param {?} text 文本
     * @param {?} type 类型
     * @param {?=} time
     * @return {?}
     */
    show(text, type, time = 2000) {
        const /** @type {?} */ componentRef = this.build(ToptipsComponent);
        if (type)
            componentRef.instance.type = type;
        if (text)
            componentRef.instance.text = text;
        componentRef.instance.time = time;
        componentRef.instance.hide.subscribe(() => {
            setTimeout(() => {
                this.destroy(componentRef);
            }, 100);
        });
        return componentRef.instance.onShow();
    }
    /**
     * 构建一个Warn Toptips并显示
     *
     * @param {?} text 文本
     * @param {?=} time 显示时长后自动关闭（单位：ms）
     * @return {?}
     */
    warn(text, time = 2000) {
        return this.show(text, 'warn', time);
    }
    /**
     * 构建一个Info Toptips并显示
     *
     * @param {?} text 文本
     * @param {?=} time 显示时长后自动关闭（单位：ms）
     * @return {?}
     */
    info(text, time = 2000) {
        return this.show(text, 'info', time);
    }
    /**
     * 构建一个Primary Toptips并显示
     *
     * @param {?} text 文本
     * @param {?=} time 显示时长后自动关闭（单位：ms）
     * @return {?}
     */
    primary(text, time = 2000) {
        return this.show(text, 'primary', time);
    }
    /**
     * 构建一个Success Toptips并显示
     *
     * @param {?} text 文本
     * @param {?=} time 显示时长后自动关闭（单位：ms）
     * @return {?}
     */
    success(text, time = 2000) {
        return this.show(text, 'primary', time);
    }
    /**
     * 构建一个Default Toptips并显示
     *
     * @param {?} text 文本
     * @param {?=} time 显示时长后自动关闭（单位：ms）
     * @return {?}
     */
    default(text, time = 2000) {
        return this.show(text, 'default', time);
    }
}
ToptipsService.decorators = [
    { type: Injectable },
];
/** @nocollapse */
ToptipsService.ctorParameters = () => [
    { type: ComponentFactoryResolver, },
    { type: ApplicationRef, },
    { type: Injector, },
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class ToptipsModule {
    /**
     * @return {?}
     */
    static forRoot() {
        return { ngModule: ToptipsModule, providers: [] };
    }
}
ToptipsModule.decorators = [
    { type: NgModule, args: [{
                imports: [CommonModule],
                declarations: [ToptipsComponent],
                exports: [ToptipsComponent],
                providers: [ToptipsService],
                entryComponents: [ToptipsComponent]
            },] },
];
/** @nocollapse */
ToptipsModule.ctorParameters = () => [];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class PopupConfig {
    constructor() {
        /**
         * 是否全屏，默认：`false`
         */
        this.is_full = false;
        /**
         * 取消按钮文本，默认：`取消`
         */
        this.cancel = '取消';
        /**
         * 确定按钮文本，默认：`确定`
         */
        this.confirm = '确定';
        /**
         * 允许点击背景关闭，默认：`true`
         */
        this.backdrop = true;
    }
}
PopupConfig.decorators = [
    { type: Injectable },
];
/** @nocollapse */
PopupConfig.ctorParameters = () => [];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class PopupComponent {
    /**
     * @param {?} DEF
     */
    constructor(DEF) {
        this.DEF = DEF;
        /**
         * 取消回调
         */
        this.cancel = new EventEmitter();
        /**
         * 确认回调
         */
        this.confirm = new EventEmitter();
        this.shown = false;
        this._shownAnt = false;
    }
    /**
     * @return {?}
     */
    get _visibility() {
        return this._shownAnt ? 'show' : 'hide';
    }
    /**
     * @return {?}
     */
    parseConfig() {
        this.config = Object.assign({}, this.DEF, this.config);
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.parseConfig();
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
        if ('config' in changes)
            this.parseConfig();
    }
    /**
     * 显示，并支持订阅结果，如果点击取消值为false，反之 true
     * @return {?}
     */
    show() {
        this.shown = true;
        setTimeout(() => { this._shownAnt = true; }, 10);
        return Observable$1.create((observer) => {
            this.observer = observer;
        });
    }
    /**
     * 隐藏
     *
     * @param {?=} is_backdrop
     * @return {?}
     */
    hide(is_backdrop) {
        if (is_backdrop === true && this.config.backdrop === false)
            return false;
        this._shownAnt = false;
        setTimeout(() => {
            this.shown = false;
        }, 300);
    }
    /**
     * 关闭，等同 `hide()` 效果
     * @return {?}
     */
    close() {
        this.hide(false);
    }
    /**
     * @return {?}
     */
    _onCancel() {
        this.cancel.emit();
        this.hide(false);
        if (this.observer) {
            this.observer.next(false);
            this.observer.complete();
        }
        return false;
    }
    /**
     * @return {?}
     */
    _onConfirm() {
        this.confirm.emit();
        this.hide(false);
        if (this.observer) {
            this.observer.next(true);
            this.observer.complete();
        }
        return false;
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        if (this.observer && this.observer instanceof Subscription$1) {
            (/** @type {?} */ (this.observer)).unsubscribe();
        }
    }
}
PopupComponent.decorators = [
    { type: Component, args: [{
                selector: 'weui-popup',
                template: `
        <div class="weui-mask" [@visibility]="_visibility" (click)="hide(true)"></div>
        <div class="weui-popup" [ngClass]="{'weui-popup_toggle': _shownAnt}">
            <div class="weui-popup__hd" *ngIf="!config.is_full">
                <a href="#" class="weui-popup__action" (click)="_onCancel()">{{config.cancel}}</a>
                <a href="#" class="weui-popup__action" (click)="_onConfirm()">{{config.confirm}}</a>
            </div>
            <div [ngClass]="{'weui-popup_full': config.is_full }">
                <ng-content></ng-content>
            </div>
        </div>
    `,
                animations: [trigger('visibility', [
                        state('show', style({ opacity: 1 })),
                        state('hide', style({ opacity: 0 })),
                        transition('hide <=> show', [animate(200)])
                    ])],
                host: {
                    '[hidden]': '!shown'
                }
            },] },
];
/** @nocollapse */
PopupComponent.ctorParameters = () => [
    { type: PopupConfig, },
];
PopupComponent.propDecorators = {
    "config": [{ type: Input },],
    "cancel": [{ type: Output },],
    "confirm": [{ type: Output },],
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class PopupModule {
    /**
     * @return {?}
     */
    static forRoot() {
        return { ngModule: PopupModule, providers: [PopupConfig] };
    }
}
PopupModule.decorators = [
    { type: NgModule, args: [{
                imports: [CommonModule],
                declarations: [PopupComponent],
                exports: [PopupComponent],
                entryComponents: [PopupComponent]
            },] },
];
/** @nocollapse */
PopupModule.ctorParameters = () => [];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class PTRConfig {
    constructor() {
        /**
         * 是否使用默认icon样式，默认：`false`
         */
        this.customIcon = false;
        /**
         * 下拉icon，支持HTML
         */
        this.pullIcon = '<i class="weui-icon-download"></i>';
        /**
         * 加载中icon，支持HTML
         */
        this.loadingIcon = '<i class="weui-loading"></i>';
        /**
         * 加载成功icon，支持HTML
         */
        this.successIcon = '<i class="weui-icon-success"></i>';
        /**
         * 下拉刷新容器高度（单位：px），默认：`100`
         */
        this.height = 100;
        /**
         * 下拉范围有效（单位：%），默认：`80`
         */
        this.treshold = 80;
    }
}
PTRConfig.decorators = [
    { type: Injectable },
];
/** @nocollapse */
PTRConfig.ctorParameters = () => [];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class PTRComponent {
    /**
     * @param {?} el
     * @param {?} DEF
     */
    constructor(el, DEF) {
        this.el = el;
        this.DEF = DEF;
        this.ogY = 0;
        this.loading = false;
        this.touching = false;
        this._animating = false;
        this.initScrollTop = 0;
        this._pullPercent = 0;
        /**
         * 是否禁止
         */
        this.disabled = false;
        /**
         * 下拉滚动时回调，返回一个0-100%的参数
         */
        this.scroll = new EventEmitter();
        /**
         * 刷新回调
         */
        this.refresh = new EventEmitter();
    }
    /**
     * 设置最后更新标签
     *
     * @param {?} label 标签内容（支持HTML）
     * @return {?}
     */
    setLastUpdatedLabel(label) {
        this._lastLabel = label;
    }
    /**
     * 设置刷新成功
     *
     * @param {?=} lastUpdatedLabel
     * @return {?}
     */
    setFinished(lastUpdatedLabel) {
        this._pullPercent = 0;
        this.loading = false;
        this._animating = true;
        if (!this.touching) {
            setTimeout(() => {
                this._animating = false;
                if (lastUpdatedLabel)
                    this.setLastUpdatedLabel(lastUpdatedLabel);
            }, 350);
        }
    }
    /**
     * @param {?} $event
     * @return {?}
     */
    onTouchStart($event) {
        if (this.disabled || this.touching || this.loading)
            return;
        this.touching = true;
        this.touchId = $event.targetTouches[0].identifier;
        this.ogY = this._pullPercent === 0 ? $event.targetTouches[0].pageY : $event.targetTouches[0].pageY - this._pullPercent;
        this.initScrollTop = this.contentEl.scrollTop;
        this._animating = false;
    }
    /**
     * @param {?} $event
     * @return {?}
     */
    onTouchMove($event) {
        if (this.disabled || !this.touching || this.loading)
            return;
        if ($event.targetTouches[0].identifier !== this.touchId)
            return;
        const /** @type {?} */ pageY = $event.targetTouches[0].pageY;
        const /** @type {?} */ diffY = pageY - this.ogY;
        // if it's scroll
        if (diffY < 0)
            return;
        // if it's not at top
        if (this.contentEl.scrollTop > 0)
            return;
        $event.preventDefault();
        // let diffY = Math.abs(this.ogY - pageY);
        this._pullPercent = (diffY - this.initScrollTop) > 100 ? 100 : (diffY - this.initScrollTop);
        this.scroll.emit(this._pullPercent);
    }
    /**
     * @param {?} $event
     * @return {?}
     */
    onTouchEnd($event) {
        if (this.disabled || !this.touching || this.loading)
            return;
        let /** @type {?} */ _pullPercent = this._pullPercent;
        let /** @type {?} */ loading = false;
        if (_pullPercent >= this.config.treshold) {
            loading = true;
        }
        else {
            _pullPercent = 0;
        }
        this.touching = false;
        this.ogY = 0;
        this.touchId = undefined;
        this.initScrollTop = 0;
        this._animating = loading;
        this._pullPercent = _pullPercent;
        this.loading = loading;
        if (loading)
            this.refresh.emit(this);
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.parseConfig();
        this.contentEl = this.el.nativeElement.querySelector('.weui-ptr__content');
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
        if ('config' in changes)
            this.parseConfig();
    }
    /**
     * @return {?}
     */
    parseConfig() {
        this.config = Object.assign({}, this.DEF, this.config);
        const /** @type {?} */ el = this.el.nativeElement;
        this.loaderEl = el.querySelector('.weui-ptr__loader');
        this.iconEl = el.querySelector('.weui-ptr__icon');
    }
}
PTRComponent.decorators = [
    { type: Component, args: [{
                selector: 'weui-ptr',
                template: `
        <div class="weui-ptr__loader"
            [ngStyle]="{
                'height.px': config.height,
                'margin-top.px': -config.height + (_pullPercent / (100 / config.height)),
                'transition': _animating ? 'all .5s' : 'none'
            }">
            <div style="flex: 1 1 0%; padding: 5px;" *ngIf="!config.customIcon">
                <span [innerHTML]="_pullPercent !== 100 ? config.pullIcon : loading ? config.loadingIcon : config.successIcon" class="weui-ptr__icon" style="display:inline-block"
                    [ngStyle]="{
                        'transform': 'rotate(' + -(_pullPercent !== 100 ? _pullPercent * 1.8 : 0) + 'deg)',
                        'color': _pullPercent !== 100 ? '#5f5f5f' : '#1AAD19'
                    }"></span>
                <p *ngIf="_lastLabel" class="weui-ptr__label">{{_lastLabel}}</p>
            </div>
            <ng-content select="[loader]"></ng-content>
        </div>
        <div class="weui-ptr__content"><ng-content></ng-content></div>
    `,
                host: {
                    '[class.weui-ptr]': 'true'
                }
            },] },
];
/** @nocollapse */
PTRComponent.ctorParameters = () => [
    { type: ElementRef, },
    { type: PTRConfig, },
];
PTRComponent.propDecorators = {
    "config": [{ type: Input },],
    "disabled": [{ type: Input },],
    "scroll": [{ type: Output },],
    "refresh": [{ type: Output },],
    "onTouchStart": [{ type: HostListener, args: ['touchstart', ['$event'],] },],
    "onTouchMove": [{ type: HostListener, args: ['touchmove', ['$event'],] },],
    "onTouchEnd": [{ type: HostListener, args: ['touchend', ['$event'],] }, { type: HostListener, args: ['touchcancel', ['$event'],] },],
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class PTRModule {
    /**
     * @return {?}
     */
    static forRoot() {
        return { ngModule: PTRModule, providers: [PTRConfig] };
    }
}
PTRModule.decorators = [
    { type: NgModule, args: [{
                imports: [CommonModule],
                declarations: [PTRComponent],
                exports: [PTRComponent],
                entryComponents: [PTRComponent]
            },] },
];
/** @nocollapse */
PTRModule.ctorParameters = () => [];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class InfiniteLoaderConfig {
    constructor() {
        /**
         * 容器高度，默认：`100vh`
         */
        this.height = '100vh';
        /**
         * 滚动至x%时触发加载，默认：75%
         */
        this.percent = 75;
        /**
         * 加载中文本（支持HTML），默认：weui-loadmore 组件
         */
        this.loading = '<div class="weui-loadmore"><i class="weui-loading"></i><span class="weui-loadmore__tips">加载中…</span></div>';
        /**
         * 完成所有数据加载文本（支持HTML），默认：weui-loadmore 组件
         */
        this.finished = '<div class="weui-loadmore weui-loadmore_line"><span class="weui-loadmore__tips">已加载完毕</span></div>';
        /**
         * 滚动节流时长（单位：ms），默认：`100`
         */
        this.throttle = 100;
    }
}
InfiniteLoaderConfig.decorators = [
    { type: Injectable },
];
/** @nocollapse */
InfiniteLoaderConfig.ctorParameters = () => [];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class InfiniteLoaderComponent {
    /**
     * @param {?} el
     * @param {?} zone
     * @param {?} DEF
     */
    constructor(el, zone, DEF) {
        this.el = el;
        this.zone = zone;
        this.DEF = DEF;
        this.didScroll = false;
        this.scrollEvent = null;
        this.scrollTime = null;
        this._loading = false;
        this._finished = false;
        /**
         * 加载更多回调
         */
        this.loadmore = new EventEmitter();
    }
    /**
     * 设置本次加载完成
     * @return {?}
     */
    resolveLoading() {
        this._loading = false;
        this._finished = false;
    }
    /**
     * 设置结束
     * @return {?}
     */
    setFinished() {
        this._loading = false;
        this._finished = true;
    }
    /**
     * 设置重新开始
     * @return {?}
     */
    restart() {
        this._finished = false;
    }
    /**
     * @return {?}
     */
    _onScroll() {
        if (this._loading || this._finished)
            return;
        const /** @type {?} */ target = this.scrollEvent.target;
        const /** @type {?} */ scrollPercent = Math.floor(((target.scrollTop + target.clientHeight) / target.scrollHeight) * 100);
        if (scrollPercent > this.config.percent) {
            this._loading = true;
            this.loadmore.emit(this);
        }
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.parseConfig();
        this.scrollTime = setInterval(() => {
            if (this.didScroll) {
                this.didScroll = false;
                this._onScroll();
            }
        }, this.config.throttle);
        this.disposeScroller = FromEventObservable$1.create(this.el.nativeElement.querySelector('.weui-infiniteloader__content'), 'scroll')
            .subscribe(($event) => {
            this.scrollEvent = $event;
            this.didScroll = true;
        });
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
        if ('config' in changes)
            this.parseConfig();
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        if (this.scrollTime)
            clearTimeout(this.scrollTime);
        if (this.disposeScroller)
            this.disposeScroller.unsubscribe();
    }
    /**
     * @return {?}
     */
    parseConfig() {
        this.config = Object.assign({}, this.DEF, this.config);
    }
}
InfiniteLoaderComponent.decorators = [
    { type: Component, args: [{
                selector: 'weui-infiniteloader',
                template: `
        <div class="weui-infiniteloader__content">
            <ng-content></ng-content>
            <div *ngIf="_loading || _finished">
                <div *ngIf="_loading" [innerHTML]="config.loading"></div>
                <div *ngIf="_finished" [innerHTML]="config.finished"></div>
            </div>
        </div>
    `,
                host: {
                    '[class.weui-infiniteloader]': 'true',
                    '[style.height]': 'config.height'
                }
            },] },
];
/** @nocollapse */
InfiniteLoaderComponent.ctorParameters = () => [
    { type: ElementRef, },
    { type: NgZone, },
    { type: InfiniteLoaderConfig, },
];
InfiniteLoaderComponent.propDecorators = {
    "config": [{ type: Input },],
    "loadmore": [{ type: Output },],
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class InfiniteLoaderModule {
    /**
     * @return {?}
     */
    static forRoot() {
        return { ngModule: InfiniteLoaderModule, providers: [InfiniteLoaderConfig] };
    }
}
InfiniteLoaderModule.decorators = [
    { type: NgModule, args: [{
                imports: [CommonModule],
                declarations: [InfiniteLoaderComponent],
                exports: [InfiniteLoaderComponent],
                entryComponents: [InfiniteLoaderComponent]
            },] },
];
/** @nocollapse */
InfiniteLoaderModule.ctorParameters = () => [];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class SidebarConfig {
    constructor() {
        /**
         * 位置方向，默认：`left`
         */
        this.position = 'left';
        /**
         * 类型，默认：`slide`
         * - over: 不覆盖
         * - slide：侧边移动
         */
        this.mode = 'slide';
        /**
         * 允许点击背景关闭，默认：`true`
         */
        this.backdrop = true;
    }
}
SidebarConfig.decorators = [
    { type: Injectable },
];
/** @nocollapse */
SidebarConfig.ctorParameters = () => [];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * \@docs-private
 */
class SidebarService {
    constructor() {
        this._openObserver = new Subject$1();
        this._closeObserver = new Subject$1();
    }
    /**
     * @return {?}
     */
    open() {
        this._openObserver.next();
    }
    /**
     * @return {?}
     */
    close() {
        this._closeObserver.next();
    }
    /**
     * @param {?} fn
     * @return {?}
     */
    onOpen(fn) {
        return this._openObserver.subscribe(fn);
    }
    /**
     * @param {?} fn
     * @return {?}
     */
    onClose(fn) {
        return this._closeObserver.subscribe(fn);
    }
}
SidebarService.decorators = [
    { type: Injectable },
];
/** @nocollapse */
SidebarService.ctorParameters = () => [];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * 侧边栏
 */
class SidebarComponent {
    /**
     * @param {?} _sidebarService
     * @param {?} config
     */
    constructor(_sidebarService, config) {
        this._sidebarService = _sidebarService;
        /**
         * 状态，true表示打开，false表示关闭
         */
        this.status = false;
        this.statusChange = new EventEmitter();
        /**
         * 位置方向，默认：`left`
         */
        this.position = 'left';
        /**
         * 类型，默认：`slide`
         * - over: 不覆盖
         * - slide：侧边移动
         */
        this.mode = 'slide';
        /**
         * 允许点击背景关闭，默认：`true`
         */
        this.backdrop = true;
        /**
         * 打开前回调
         */
        this.openStart = new EventEmitter();
        /**
         * 打开后回调
         */
        this.opened = new EventEmitter();
        /**
         * 关闭前回调
         */
        this.closeStart = new EventEmitter();
        /**
         * 关闭后回调
         */
        this.closed = new EventEmitter();
        /**
         * 模式变更通知
         */
        this.modeChange = new EventEmitter();
        /**
         * 位置变更通知
         */
        this.positionChange = new EventEmitter();
        this._rerender = new EventEmitter();
        this._clickEvent = 'click';
        this._onClickOutsideAttached = false;
        this._anting = false;
        Object.assign(this, config);
        if (isIOS() && 'ontouchstart' in window) {
            this._clickEvent = 'touchstart';
        }
        this.open = this.open.bind(this);
        this.close = this.close.bind(this);
        this._onClickOutside = this._onClickOutside.bind(this);
        this._openSub = this._sidebarService.onOpen(this.open);
        this._closeSub = this._sidebarService.onClose(this.close);
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
        if ('status' in changes && !this._anting) {
            if (changes['status'].currentValue) {
                this.open();
            }
            else {
                this.close();
            }
            if (changes['status'].firstChange)
                this._anting = false;
        }
        if ('mode' in changes) {
            this.modeChange.emit(changes['mode'].currentValue);
        }
        if ('position' in changes) {
            this.positionChange.emit(changes['position'].currentValue);
        }
        if ('backdrop' in changes) {
            this._initCloseListeners();
        }
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        this._destroyCloseListeners();
        if (this._openSub) {
            this._openSub.unsubscribe();
        }
        if (this._closeSub) {
            this._closeSub.unsubscribe();
        }
    }
    /**
     * 打开侧边栏
     * @return {?}
     */
    open() {
        this._anting = true;
        this.status = true;
        this.statusChange.emit(true);
        this.openStart.emit();
        this.closeAnt();
    }
    /**
     * 关闭侧边栏
     * @return {?}
     */
    close() {
        this._anting = true;
        this.status = false;
        this.statusChange.emit(false);
        this.closeStart.emit();
        this.closeAnt();
    }
    /**
     * 手动触发容器的重新渲染
     * @return {?}
     */
    _triggerRerender() {
        this._rerender.emit();
    }
    /**
     * @return {?}
     */
    _getStyle() {
        let /** @type {?} */ transformStyle = 'none';
        const /** @type {?} */ marginStyle = {};
        const /** @type {?} */ isSlideMode = this.mode === 'slide';
        if (!this.status || isSlideMode) {
            transformStyle = `translate${(this.position === 'left' || this.position === 'right') ? 'X' : 'Y'}`;
            const /** @type {?} */ isLeftOrTop = this.position === 'left' || this.position === 'top';
            const /** @type {?} */ translateAmt = `${isLeftOrTop ? '-' : ''}100%`;
            transformStyle += `(${translateAmt})`;
        }
        return /** @type {?} */ (Object.assign(marginStyle, {
            webkitTransform: transformStyle,
            transform: transformStyle
        }));
    }
    /**
     * @return {?}
     */
    closeAnt() {
        setTimeout(() => {
            this._anting = false;
            if (this.status) {
                this._initCloseListeners();
                this.opened.emit();
            }
            else {
                this._destroyCloseListeners();
                this.closed.emit();
            }
        }, 300);
    }
    /**
     * @return {?}
     */
    _initCloseListeners() {
        if (this.status && this.backdrop) {
            setTimeout(() => {
                if (this.backdrop && !this._onClickOutsideAttached) {
                    document.addEventListener(this._clickEvent, this._onClickOutside);
                    this._onClickOutsideAttached = true;
                }
            });
        }
    }
    /**
     * @return {?}
     */
    _destroyCloseListeners() {
        if (this._onClickOutsideAttached) {
            document.removeEventListener(this._clickEvent, this._onClickOutside);
            this._onClickOutsideAttached = false;
        }
    }
    /**
     * @param {?} e
     * @return {?}
     */
    _onClickOutside(e) {
        if (this._onClickOutsideAttached && this._elSidebar && !this._elSidebar.nativeElement.contains(e.target)) {
            this.close();
        }
    }
    /**
     * 获取侧边栏容器高度
     * @return {?}
     */
    get _height() {
        return this._elSidebar.nativeElement ? this._elSidebar.nativeElement.offsetHeight : 0;
    }
    /**
     * 获取侧边栏容器宽度
     * @return {?}
     */
    get _width() {
        return this._elSidebar.nativeElement ? this._elSidebar.nativeElement.offsetWidth : 0;
    }
}
SidebarComponent.decorators = [
    { type: Component, args: [{
                selector: 'weui-sidebar',
                template: `
    <aside #sidebar
      role="complementary"
      [attr.aria-hidden]="!status"
      [attr.aria-label]="ariaLabel"
      class="weui-sidebar weui-sidebar__{{status ? 'opened' : 'closed'}} weui-sidebar__{{position}} weui-sidebar__{{mode}}"
      [class.weui-sidebar__inert]="!status"
      [ngClass]="sidebarClass"
      [ngStyle]="_getStyle()">
      <ng-content></ng-content>
    </aside>
    `,
                changeDetection: ChangeDetectionStrategy.OnPush
            },] },
];
/** @nocollapse */
SidebarComponent.ctorParameters = () => [
    { type: SidebarService, },
    { type: SidebarConfig, },
];
SidebarComponent.propDecorators = {
    "status": [{ type: Input },],
    "statusChange": [{ type: Output },],
    "position": [{ type: Input },],
    "mode": [{ type: Input },],
    "backdrop": [{ type: Input },],
    "sidebarClass": [{ type: Input },],
    "ariaLabel": [{ type: Input },],
    "openStart": [{ type: Output },],
    "opened": [{ type: Output },],
    "closeStart": [{ type: Output },],
    "closed": [{ type: Output },],
    "modeChange": [{ type: Output },],
    "positionChange": [{ type: Output },],
    "_rerender": [{ type: Output },],
    "_elSidebar": [{ type: ViewChild, args: ['sidebar',] },],
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * 侧边栏容器
 */
class SidebarContainerComponent {
    /**
     * @param {?} _ref
     * @param {?} _el
     */
    constructor(_ref, _el) {
        this._ref = _ref;
        this._el = _el;
        this._showBackdrop = false;
        this._showBackdropChange = new EventEmitter();
        this.orgOverflowX = '';
    }
    /**
     * @return {?}
     */
    ngAfterContentInit() {
        this._onToggle();
        this._subscribe();
        this._sidebars.changes.subscribe(() => {
            this._unsubscribe();
            this._subscribe();
        });
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
        if ('_showBackdrop' in changes) {
            this._showBackdropChange.emit(changes['_showBackdrop'].currentValue);
        }
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        const /** @type {?} */ $body = document.querySelector('body');
        this.orgOverflowX = $body.style.overflowX;
        $body.style.overflowX = 'hidden';
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        this._unsubscribe();
        document.querySelector('body').style.overflowX = this.orgOverflowX;
    }
    /**
     * @return {?}
     */
    _getStyles() {
        if (this._sidebars) {
            this._sidebars.forEach((sidebar) => {
                if (!sidebar) {
                    return;
                }
                if (sidebar.mode === 'slide') {
                    let /** @type {?} */ transformStyle = null;
                    if (sidebar.status) {
                        const /** @type {?} */ isLeftOrTop = sidebar.position === 'left' || sidebar.position === 'top';
                        const /** @type {?} */ isLeftOrRight = sidebar.position === 'left' || sidebar.position === 'right';
                        const /** @type {?} */ transformDir = isLeftOrRight ? 'X' : 'Y';
                        const /** @type {?} */ transformAmt = `${isLeftOrTop ? '' : '-'}${isLeftOrRight ? sidebar._width : sidebar._height}`;
                        transformStyle = `translate${transformDir}(${transformAmt}px)`;
                    }
                    this._el.nativeElement.style.transform = transformStyle;
                }
            });
        }
        return /** @type {?} */ ({
            margin: `0px 0px 0px 0px`
        });
    }
    /**
     * @param {?} $event
     * @return {?}
     */
    _onBackdropClicked($event) {
        $event.preventDefault();
        $event.stopPropagation();
        this._sidebars.forEach((sidebar) => {
            if (sidebar.status && sidebar.backdrop) {
                sidebar.close();
            }
        });
        return false;
    }
    /**
     * @return {?}
     */
    _subscribe() {
        if (this._sidebars) {
            this._sidebars.forEach((sidebar) => {
                if (!sidebar) {
                    return;
                }
                sidebar.openStart.subscribe(() => this._onToggle());
                sidebar.opened.subscribe(() => this._markForCheck());
                sidebar.closeStart.subscribe(() => this._onToggle());
                sidebar.closed.subscribe(() => this._markForCheck());
                sidebar.modeChange.subscribe(() => this._markForCheck());
                sidebar.positionChange.subscribe(() => this._markForCheck());
                sidebar._rerender.subscribe(() => this._markForCheck());
            });
        }
    }
    /**
     * @return {?}
     */
    _unsubscribe() {
        if (this._sidebars) {
            this._sidebars.forEach((sidebar) => {
                if (!sidebar) {
                    return;
                }
                sidebar.openStart.unsubscribe();
                sidebar.opened.unsubscribe();
                sidebar.closeStart.unsubscribe();
                sidebar.closed.unsubscribe();
                sidebar.modeChange.unsubscribe();
                sidebar.positionChange.unsubscribe();
                sidebar._rerender.unsubscribe();
            });
        }
    }
    /**
     * 状态变更时重新计算样式
     * @return {?}
     */
    _markForCheck() {
        this._ref.markForCheck();
    }
    /**
     * @return {?}
     */
    _onToggle() {
        if (this._sidebars) {
            let /** @type {?} */ hasOpen = false;
            const /** @type {?} */ _sidebars = this._sidebars.toArray();
            for (let /** @type {?} */ i = 0; i < _sidebars.length; i++) {
                const /** @type {?} */ sidebar = _sidebars[i];
                if (sidebar.status) {
                    hasOpen = true;
                    break;
                }
            }
            this._showBackdrop = hasOpen;
            this._showBackdropChange.emit(hasOpen);
        }
        this._markForCheck();
    }
}
SidebarContainerComponent.decorators = [
    { type: Component, args: [{
                selector: 'weui-sidebar-container',
                template: `
        <ng-content select="weui-sidebar"></ng-content>
        <div *ngIf="_showBackdrop" aria-hidden="true" class="weui-mask" (click)="_onBackdropClicked($event)"></div>
        <div class="weui-sidebar__content" [ngStyle]="_getStyles()">
            <ng-content></ng-content>
        </div>
    `,
                changeDetection: ChangeDetectionStrategy.OnPush
            },] },
];
/** @nocollapse */
SidebarContainerComponent.ctorParameters = () => [
    { type: ChangeDetectorRef, },
    { type: ElementRef, },
];
SidebarContainerComponent.propDecorators = {
    "_sidebars": [{ type: ContentChildren, args: [SidebarComponent,] },],
    "_showBackdrop": [{ type: Input },],
    "_showBackdropChange": [{ type: Output },],
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * 关闭侧边栏指令
 */
class CloseSidebarDirective {
    /**
     * @param {?} _sidebarService
     */
    constructor(_sidebarService) {
        this._sidebarService = _sidebarService;
    }
    /**
     * @return {?}
     */
    _onClick() {
        this._sidebarService.close();
    }
}
CloseSidebarDirective.decorators = [
    { type: Directive, args: [{ selector: '[closeSidebar]' },] },
];
/** @nocollapse */
CloseSidebarDirective.ctorParameters = () => [
    { type: SidebarService, },
];
CloseSidebarDirective.propDecorators = {
    "_onClick": [{ type: HostListener, args: ['click',] },],
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class SidebarModule {
    /**
     * @return {?}
     */
    static forRoot() {
        return { ngModule: SidebarModule, providers: [SidebarConfig] };
    }
}
SidebarModule.decorators = [
    { type: NgModule, args: [{
                imports: [CommonModule],
                declarations: [SidebarContainerComponent, SidebarComponent, CloseSidebarDirective],
                exports: [SidebarContainerComponent, SidebarComponent, CloseSidebarDirective],
                providers: [SidebarService]
            },] },
];
/** @nocollapse */
SidebarModule.ctorParameters = () => [];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class SwiperConfig {
    constructor() {
        /**
         * 等同于swiper[参数项](http://idangero.us/swiper/api/)
         */
        this.options = {
            loop: true,
            pagination: '.swiper-pagination'
        };
    }
}
SwiperConfig.decorators = [
    { type: Injectable },
];
/** @nocollapse */
SwiperConfig.ctorParameters = () => [];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class SwiperComponent {
    /**
     * @param {?} el
     * @param {?} zone
     * @param {?} DEF
     */
    constructor(el, zone, DEF) {
        this.el = el;
        this.zone = zone;
        this.DEF = DEF;
    }
    /**
     * @return {?}
     */
    initOptions() {
        this.options = Object.assign({}, this.DEF.options, this.options);
    }
    /**
     * @return {?}
     */
    init() {
        this.destroy();
        this.zone.runOutsideAngular(() => {
            this.swiper = new Swiper(this.containerEl, this.options);
        });
    }
    /**
     * @return {?}
     */
    destroy() {
        if (this.containerEl) {
            ['horizontal', 'vertical'].forEach(v => {
                this.containerEl.classList.remove('swiper-container-' + v);
            });
        }
        if (this.swiper) {
            this.zone.runOutsideAngular(() => {
                this.swiper.destroy(true, false);
                this.swiper = null;
            });
        }
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        if (!this.options)
            this.initOptions();
        this.containerEl = this.el.nativeElement.querySelector('.swiper-container');
        if (!this.containerEl)
            throw new Error('组件内容的HTML跟swiper所需要的DOM结构必须完全一样。');
    }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
        this.init();
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
        if ('options' in changes) {
            this.initOptions();
            if (!changes['options'].firstChange) {
                this.init();
            }
        }
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        this.destroy();
    }
}
SwiperComponent.decorators = [
    { type: Component, args: [{
                selector: 'weui-swiper',
                template: `<ng-content></ng-content>`
            },] },
];
/** @nocollapse */
SwiperComponent.ctorParameters = () => [
    { type: ElementRef, },
    { type: NgZone, },
    { type: SwiperConfig, },
];
SwiperComponent.propDecorators = {
    "options": [{ type: Input },],
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class SwiperModule {
    /**
     * @return {?}
     */
    static forRoot() {
        return { ngModule: SwiperModule, providers: [SwiperConfig] };
    }
}
SwiperModule.decorators = [
    { type: NgModule, args: [{
                imports: [CommonModule, FormsModule],
                declarations: [SwiperComponent],
                exports: [SwiperComponent],
                providers: [SwiperConfig]
            },] },
];
/** @nocollapse */
SwiperModule.ctorParameters = () => [];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class ChartG2Directive {
    /**
     * @param {?} el
     * @param {?} zone
     */
    constructor(el, zone) {
        this.el = el;
        this.zone = zone;
        this.initFlag = false;
    }
    /**
     * chart实例对象
     * @return {?}
     */
    get chart() {
        return this._chart;
    }
    /**
     * GM对象
     * @return {?}
     */
    get GM() {
        return GM;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.initFlag = true;
        this.buildChart();
    }
    /**
     * @return {?}
     */
    buildChart() {
        const /** @type {?} */ object = {
            el: this.el.nativeElement
        };
        if (this.margin)
            object.margin = this.margin;
        this.zone.runOutsideAngular(() => {
            this._chart = new GM.Chart(object);
        });
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
        if (this.initFlag) {
            if ('margin' in changes && !changes['margin'].firstChange) {
                this.buildChart();
            }
        }
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        if (this._chart) {
            this.zone.runOutsideAngular(() => {
                // fixed: TypeError: Cannot read property 'stop' of null
                try {
                    this._chart.destroy();
                }
                catch (/** @type {?} */ e) {
                    console.warn(e);
                }
            });
        }
    }
}
ChartG2Directive.decorators = [
    { type: Directive, args: [{ selector: 'canvas[weui-chart-g2]', exportAs: 'chart-g2' },] },
];
/** @nocollapse */
ChartG2Directive.ctorParameters = () => [
    { type: ElementRef, },
    { type: NgZone, },
];
ChartG2Directive.propDecorators = {
    "margin": [{ type: Input },],
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class ChartG2Module {
    /**
     * @return {?}
     */
    static forRoot() {
        return { ngModule: ChartG2Module, providers: [] };
    }
}
ChartG2Module.decorators = [
    { type: NgModule, args: [{
                imports: [CommonModule],
                declarations: [ChartG2Directive],
                exports: [ChartG2Directive]
            },] },
];
/** @nocollapse */
ChartG2Module.ctorParameters = () => [];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class LoaderService {
    /**
     * @param {?} doc
     */
    constructor(doc) {
        this.doc = doc;
        this.list = {};
    }
    /**
     * @param {?} paths
     * @return {?}
     */
    load(paths) {
        return new Promise((resolve, reject) => {
            const /** @type {?} */ promises = [];
            if (!Array.isArray(paths))
                paths = [paths];
            (/** @type {?} */ (paths)).forEach(path => {
                if (path.endsWith('.css')) {
                    promises.push(this.loadCss(path));
                }
                else {
                    promises.push(this.loadScript(path));
                }
            });
            Promise.all(promises).then(res => {
                resolve(true);
            }).catch(err => {
                resolve(false);
            });
        });
    }
    /**
     * @param {?} path
     * @return {?}
     */
    loadScript(path) {
        return new Promise((resolve, reject) => {
            if (this.list[path] === true) {
                resolve(/** @type {?} */ ({
                    path: path,
                    loaded: true,
                    status: 'Loaded'
                }));
                return;
            }
            this.list[path] = true;
            const /** @type {?} */ node = this.doc.createElement('script');
            node.type = 'text/javascript';
            node.src = path;
            node.charset = 'utf-8';
            node.defer = true;
            node.onload = () => {
                resolve(/** @type {?} */ ({
                    path: path,
                    loaded: true,
                    status: 'Loaded'
                }));
            };
            node.onerror = (error) => resolve(/** @type {?} */ ({
                path: path,
                loaded: false,
                status: 'Loaded'
            }));
            this.doc.getElementsByTagName('head')[0].appendChild(node);
        });
    }
    /**
     * @param {?} path
     * @return {?}
     */
    loadCss(path) {
        return new Promise((resolve, reject) => {
            if (this.list[path] === true) {
                resolve(/** @type {?} */ ({
                    path: path,
                    loaded: true,
                    status: 'Loaded'
                }));
                return;
            }
            this.list[path] = true;
            const /** @type {?} */ node = this.doc.createElement('link');
            node.rel = 'stylesheet';
            node.type = 'text/css';
            node.href = path;
            this.doc.getElementsByTagName('head')[0].appendChild(node);
            resolve(/** @type {?} */ ({
                path: path,
                loaded: true,
                status: 'Loaded'
            }));
        });
    }
}
LoaderService.decorators = [
    { type: Injectable },
];
/** @nocollapse */
LoaderService.ctorParameters = () => [
    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] },] },
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class JWeiXinService {
    /**
     * @param {?} load
     */
    constructor(load) {
        this.load = load;
    }
    /**
     * 懒加载jweixin.js
     *
     * @param {?=} jweixinUrl 默认：//res.wx.qq.com/open/js/jweixin-1.2.0.js
     * @return {?}
     */
    get(jweixinUrl) {
        return new Promise((resolve, reject) => {
            this.load.loadScript(jweixinUrl || '//res.wx.qq.com/open/js/jweixin-1.2.0.js').then((res) => {
                resolve(res.loaded === true);
            }).catch(() => {
                resolve(false);
            });
        });
    }
}
JWeiXinService.decorators = [
    { type: Injectable },
];
/** @nocollapse */
JWeiXinService.ctorParameters = () => [
    { type: LoaderService, },
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class JWeiXinModule {
    /**
     * @return {?}
     */
    static forRoot() {
        return { ngModule: JWeiXinModule, providers: [] };
    }
}
JWeiXinModule.decorators = [
    { type: NgModule, args: [{
                providers: [JWeiXinService, LoaderService]
            },] },
];
/** @nocollapse */
JWeiXinModule.ctorParameters = () => [];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class AccordionConfig {
    constructor() {
        /**
         * 是否可折叠，`false` 表示保持只有一个可折叠，`true` 表示所有都允许，默认：`false`
         */
        this.collapsible = false;
        /**
         * 自动展开第一次，默认：`true`
         */
        this.activeFirst = true;
        /**
         * 动画类型，`none` 无动画，`slide` 滑动，默认：`slide`
         */
        this.animate = 'slide';
    }
}
AccordionConfig.decorators = [
    { type: Injectable },
];
/** @nocollapse */
AccordionConfig.ctorParameters = () => [];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class AccordionComponent {
    /**
     * @param {?} config
     */
    constructor(config) {
        /**
         * 是否可折叠，`true` 表示同时所有都允许展开，`false` 表示同时只允许一个展开，默认：`false`
         */
        this.collapsible = false;
        /**
         * 自动展开第一次，默认：`true`
         */
        this.activeFirst = true;
        /**
         * 动画类型，`none` 无动画，`slide` 滑动，默认：`slide`
         */
        this._animate = 'slide';
        /**
         * 展开时回调，参数为面板下标。
         */
        this.select = new EventEmitter();
        this.panels = [];
        Object.assign(this, config);
    }
    /**
     * @param {?} item
     * @return {?}
     */
    _add(item) {
        this.panels.push(item);
        if (this.panels.length === 1 && this.activeFirst)
            item.active = true;
    }
    /**
     * @param {?} item
     * @return {?}
     */
    _remove(item) {
        this.panels.splice(this.panels.indexOf(item), 1);
    }
    /**
     * @param {?} item
     * @return {?}
     */
    _index(item) {
        return this.panels.indexOf(item);
    }
    /**
     * @param {?} cur
     * @return {?}
     */
    _closeOthers(cur) {
        if (this.collapsible)
            return;
        this.panels.forEach(panel => {
            if (!panel.disabled && panel !== cur)
                panel.active = false;
        });
    }
}
AccordionComponent.decorators = [
    { type: Component, args: [{
                selector: 'weui-accordion',
                template: `<ng-content></ng-content>`,
                host: {
                    '[attr.aria-multiselectable]': 'closeOthers'
                }
            },] },
];
/** @nocollapse */
AccordionComponent.ctorParameters = () => [
    { type: AccordionConfig, },
];
AccordionComponent.propDecorators = {
    "collapsible": [{ type: Input },],
    "activeFirst": [{ type: Input },],
    "_animate": [{ type: Input },],
    "select": [{ type: Output },],
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class AccordionPanelComponent {
    /**
     * @param {?} accordion
     */
    constructor(accordion) {
        this.accordion = accordion;
        /**
         * 是否禁止
         */
        this.disabled = false;
        this._active = false;
    }
    /**
     * 是否展开
     * @return {?}
     */
    get active() {
        return this._active;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set active(value) {
        this._active = value;
        if (value)
            this.accordion._closeOthers(this);
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.accordion._add(this);
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        this.accordion._remove(this);
    }
    /**
     * @param {?} event
     * @return {?}
     */
    _toggle(event) {
        if (!this.disabled) {
            this.active = !this.active;
            this.accordion.select.emit(this.accordion._index(this));
        }
    }
}
AccordionPanelComponent.decorators = [
    { type: Component, args: [{
                selector: 'weui-accordion-panel',
                template: `
    <div role="tab" (click)="_toggle($event)"><ng-content select="[heading]"></ng-content></div>
    <div role="tabpanel" class="weui-accordion-content"><ng-content></ng-content></div>
    `,
                host: {
                    '[class.weui-accordion-panel-disabled]': 'disabled',
                    '[class.weui-accordion-active]': 'active'
                }
            },] },
];
/** @nocollapse */
AccordionPanelComponent.ctorParameters = () => [
    { type: AccordionComponent, decorators: [{ type: Inject, args: [AccordionComponent,] },] },
];
AccordionPanelComponent.propDecorators = {
    "disabled": [{ type: Input },],
    "active": [{ type: Input },],
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class AccordionModule {
    /**
     * @return {?}
     */
    static forRoot() {
        return { ngModule: AccordionModule, providers: [AccordionConfig] };
    }
}
AccordionModule.decorators = [
    { type: NgModule, args: [{
                imports: [CommonModule],
                declarations: [AccordionPanelComponent, AccordionComponent],
                exports: [AccordionPanelComponent, AccordionComponent],
                providers: []
            },] },
];
/** @nocollapse */
AccordionModule.ctorParameters = () => [];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class RatingConfig {
    constructor() {
        /**
         * 图标数量（默认：5个）
         */
        this.max = 5;
        /**
         * 样式名
         */
        this.cls = '';
        /**
         * 未选中图标，默认：`weui-icon-circle`
         */
        this.stateOff = 'weui-icon-circle';
        /**
         * 选中图标，默认：`weui-icon-success`
         */
        this.stateOn = 'weui-icon-success';
        /**
         * 自定义图标，当存在时 `max`、`stateOff`、`stateOn` 失效
         */
        this.states = [];
        /**
         * 图标 `title` 属性值，默认以 `1` 开始的索引值
         */
        this.titles = [];
    }
}
RatingConfig.decorators = [
    { type: Injectable },
];
/** @nocollapse */
RatingConfig.ctorParameters = () => [];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class RatingComponent {
    /**
     * @param {?} DEF
     */
    constructor(DEF) {
        this.DEF = DEF;
        /**
         * 是否只读模式，默认：`false`
         */
        this.readonly = false;
        /**
         * 选中后回调，参数：选中值
         */
        this.selected = new EventEmitter();
        this._class = '';
        this.onChange = Function.prototype;
        this.onTouched = Function.prototype;
    }
    /**
     * @param {?} cog
     * @return {?}
     */
    _setConfig(cog) {
        const /** @type {?} */ _c = Object.assign({
            states: []
        }, this.DEF, cog);
        this._class = _c.cls || '';
        const /** @type {?} */ count = _c.states.length || _c.max;
        this._range = Array(count).fill(0).map((v, i) => {
            return Object.assign({
                index: i,
                on: _c.stateOn,
                off: _c.stateOff,
                title: _c.titles[i] || i + 1
            }, _c.states[i] || {});
        });
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
        if (changes["config"]) {
            this._setConfig(changes["config"].currentValue);
        }
    }
    /**
     * @param {?} value
     * @return {?}
     */
    _rate(value) {
        if (!this.readonly && value >= 0 && value <= this._range.length) {
            this.writeValue(value);
            this.onChange(value);
        }
    }
    /**
     * @param {?} _value
     * @return {?}
     */
    writeValue(_value) {
        if (_value % 1 !== _value) {
            this._value = Math.round(_value);
            this._preValue = _value;
            return;
        }
        this._preValue = _value;
        this._value = _value;
    }
    /**
     * @param {?} fn
     * @return {?}
     */
    registerOnChange(fn) { this.onChange = fn; }
    /**
     * @param {?} fn
     * @return {?}
     */
    registerOnTouched(fn) { this.onTouched = fn; }
    /**
     * @param {?} isDisabled
     * @return {?}
     */
    setDisabledState(isDisabled) {
    }
}
RatingComponent.decorators = [
    { type: Component, args: [{
                selector: 'weui-rating',
                template: `
        <span class="weui-rating__container{{_class ? ' ' + _class : ''}}" tabindex="0"
            role="slider" aria-valuemin="0" [attr.aria-valuemax]="_range.length" [attr.aria-valuenow]="_value">
            <ng-template ngFor let-r [ngForOf]="_range" let-index="index">
                <span class="sr-only">({{ index < _value ? '*' : ' ' }})</span>
                <i (click)="_rate(index + 1)" [ngClass]="index < _value ? r.on : r.off" [title]="r.title" ></i>
            </ng-template>
        </span>
    `,
                providers: [{
                        provide: NG_VALUE_ACCESSOR,
                        useExisting: forwardRef(() => RatingComponent),
                        multi: true
                    }]
            },] },
];
/** @nocollapse */
RatingComponent.ctorParameters = () => [
    { type: RatingConfig, },
];
RatingComponent.propDecorators = {
    "config": [{ type: Input },],
    "readonly": [{ type: Input },],
    "selected": [{ type: Output },],
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class RatingModule {
    /**
     * @return {?}
     */
    static forRoot() {
        return { ngModule: RatingModule, providers: [RatingConfig] };
    }
}
RatingModule.decorators = [
    { type: NgModule, args: [{
                imports: [CommonModule],
                declarations: [RatingComponent],
                exports: [RatingComponent],
                entryComponents: [RatingComponent]
            },] },
];
/** @nocollapse */
RatingModule.ctorParameters = () => [];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * Stepper 步进器，支持 `[(ngModel)]`
 */
class StepperComponent {
    constructor() {
        /**
         * 最小值
         */
        this.min = -Infinity;
        /**
         * 最大值
         */
        this.max = Infinity;
        /**
         * 禁用
         */
        this.disabled = false;
        /**
         * 变更时回调
         */
        this.change = new EventEmitter();
        this._step = 1;
        this._precisionStep = 0;
        this._precisionFactor = 1;
        this._disabledMinus = false;
        this._disabledPlus = false;
        this.onChange = Function.prototype;
        this.onTouched = Function.prototype;
    }
    /**
     * 步长，可以为小数
     * @return {?}
     */
    get step() { return this._step; }
    /**
     * @param {?} value
     * @return {?}
     */
    set step(value) {
        this._step = value;
        const /** @type {?} */ stepString = value.toString();
        if (stepString.indexOf('e-') >= 0) {
            this._precisionStep = parseInt(stepString.slice(stepString.indexOf('e-')), 10);
        }
        if (stepString.indexOf('.') >= 0) {
            this._precisionStep = stepString.length - stepString.indexOf('.') - 1;
        }
        this._precisionFactor = Math.pow(10, this._precisionStep);
    }
    /**
     * @return {?}
     */
    get value() { return this._value; }
    /**
     * @param {?} value
     * @return {?}
     */
    set value(value) {
        if (isNaN(value) || value === this.value)
            return;
        value = +value;
        if (value > this.max) {
            this._value = this.max;
            this.onChange(this.max);
        }
        else if (value < this.min) {
            this._value = this.min;
            this.onChange(this.min);
        }
        else {
            this._value = value;
            this._checkDisabled();
        }
    }
    /**
     * @return {?}
     */
    _checkDisabled() {
        this._disabledPlus = this.disabled || !((this.value + this.step) <= this.max);
        this._disabledMinus = this.disabled || !((this.value - this.step) >= this.min);
        return this;
    }
    /**
     * @return {?}
     */
    _notify() {
        this.change.emit(this.value);
        this.onChange(this.value);
    }
    /**
     * @return {?}
     */
    _plus() {
        if (this.value === undefined)
            this.value = this.max || 0;
        this._checkDisabled();
        if (this._disabledPlus)
            return;
        this.value = this._toPrecisionAsStep((this._precisionFactor * this.value + this._precisionFactor * this.step) / this._precisionFactor);
        this._checkDisabled()._notify();
    }
    /**
     * @return {?}
     */
    _minus() {
        if (this.value === undefined)
            this.value = this.min || 0;
        this._checkDisabled();
        if (this._disabledMinus)
            return;
        this.value = this._toPrecisionAsStep((this._precisionFactor * this.value - this._precisionFactor * this.step) / this._precisionFactor);
        this._checkDisabled()._notify();
    }
    /**
     * @return {?}
     */
    _blur() {
        const /** @type {?} */ el = this._inputNumber.nativeElement;
        this.value = +el.value;
        el.value = this.value;
        this._checkDisabled()._notify();
    }
    /**
     * @param {?} num
     * @return {?}
     */
    _toPrecisionAsStep(num) {
        if (isNaN(num) || num === '') {
            return num;
        }
        return Number(Number(num).toFixed(this._precisionStep));
    }
    /**
     * @param {?} value
     * @return {?}
     */
    writeValue(value) {
        this.value = value;
        this._checkDisabled();
    }
    /**
     * @param {?} fn
     * @return {?}
     */
    registerOnChange(fn) { this.onChange = fn; }
    /**
     * @param {?} fn
     * @return {?}
     */
    registerOnTouched(fn) { this.onTouched = fn; }
    /**
     * @param {?} isDisabled
     * @return {?}
     */
    setDisabledState(isDisabled) {
    }
}
StepperComponent.decorators = [
    { type: Component, args: [{
                selector: 'weui-stepper',
                template: `
    <span class="minus" [ngClass]="{'disabled':_disabledMinus}" (click)="_minus()"><em>-</em></span>
    <div class="input">
        <input type="tel" #inputNumber [(ngModel)]="value" (blur)="_blur()"
            [disabled]="disabled"
            [attr.min]="min"
            [attr.max]="max"
            [attr.step]="_step"
            autocomplete="off">
    </div>
    <span class="plus" [ngClass]="{'disabled':_disabledPlus}" (click)="_plus()"><em>+</em></span>
    `,
                providers: [{
                        provide: NG_VALUE_ACCESSOR,
                        useExisting: forwardRef(() => StepperComponent),
                        multi: true
                    }]
            },] },
];
/** @nocollapse */
StepperComponent.ctorParameters = () => [];
StepperComponent.propDecorators = {
    "min": [{ type: Input },],
    "max": [{ type: Input },],
    "disabled": [{ type: Input }, { type: HostBinding, args: ['class.disabled',] },],
    "change": [{ type: Output },],
    "_inputNumber": [{ type: ViewChild, args: ['inputNumber',] },],
    "step": [{ type: Input },],
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class StepperModule {
    /**
     * @return {?}
     */
    static forRoot() {
        return { ngModule: StepperModule, providers: [] };
    }
}
StepperModule.decorators = [
    { type: NgModule, args: [{
                imports: [CommonModule, FormsModule],
                declarations: [
                    StepperComponent
                ],
                exports: [
                    StepperComponent
                ]
            },] },
];
/** @nocollapse */
StepperModule.ctorParameters = () => [];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class PaginationConfig {
    constructor() {
        /**
         * 形态，可选 `button`,`pointer`，默认：`button`
         */
        this.mode = 'button';
        /**
         * 是否隐藏数值，默认：`false`
         */
        this.simple = false;
        /**
         * 小号按钮，默认：`true`
         */
        this.mini = true;
        /**
         * 上一页文本（支持HTML），默认：`上一页`
         */
        this.prevText = '上一页';
        /**
         * 下一页文本（支持HTML），默认：`下一步`
         */
        this.nextText = '下一步';
    }
}
PaginationConfig.decorators = [
    { type: Injectable },
];
/** @nocollapse */
PaginationConfig.ctorParameters = () => [];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class PaginationComponent {
    /**
     * @param {?} cog
     */
    constructor(cog) {
        this._ptArr = [];
        /**
         * 当前索引
         */
        this.current = 0;
        /**
         * 数据总数
         */
        this.total = 0;
        /**
         * 小号按钮，默认：`true`
         */
        this.mini = true;
        /**
         * 分页触发的回调函数
         */
        this.change = new EventEmitter();
        this._prevDisabled = false;
        this._nextDisabled = false;
        Object.assign(this, cog);
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
        if (this.mode === 'pointer')
            this._ptArr = Array(this.total).fill(1).map((v, i) => v + i);
        this._checkDisabled();
    }
    /**
     * @return {?}
     */
    _checkDisabled() {
        if (this.mode === 'pointer')
            return;
        this._prevDisabled = this.current <= 1;
        this._nextDisabled = this.current >= this.total;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    _goto(value) {
        if (value === -1 && this._prevDisabled)
            return false;
        if (value === 1 && this._nextDisabled)
            return false;
        this.current += value;
        this._checkDisabled();
        this.change.emit(this.current);
    }
}
PaginationComponent.decorators = [
    { type: Component, args: [{
                selector: 'weui-pagination',
                template: `
    <ng-template [ngIf]="mode==='button'">
        <div class="weui-pagination__item weui-pagination__prev">
            <a weui-button (click)="_goto(-1)" weui-plain [weui-mini]="mini" weui-type="default" [disabled]="_prevDisabled" [innerHTML]="prevText"></a>
        </div>
        <div class="weui-pagination__item weui-pagination__num" *ngIf="!simple">{{current}}/{{total}}</div>
        <div class="weui-pagination__item weui-pagination__next">
            <a weui-button (click)="_goto(1)" weui-plain [weui-mini]="mini" weui-type="default" [disabled]="_nextDisabled" [innerHTML]="nextText"></a>
        </div>
    </ng-template>
    <div class="weui-pagination__item weui-pagination__num" *ngIf="mode==='pointer'">
        <div *ngFor="let i of _ptArr" class="weui-pagination__dot" [class.weui-pagination__dot-active]="current === i"><span></span></div>
    </div>
    `,
                host: {
                    'class': 'weui-pagination'
                }
            },] },
];
/** @nocollapse */
PaginationComponent.ctorParameters = () => [
    { type: PaginationConfig, },
];
PaginationComponent.propDecorators = {
    "mode": [{ type: Input },],
    "current": [{ type: Input },],
    "total": [{ type: Input },],
    "simple": [{ type: Input },],
    "mini": [{ type: Input },],
    "prevText": [{ type: Input },],
    "nextText": [{ type: Input },],
    "change": [{ type: Output },],
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class PaginationModule {
    /**
     * @return {?}
     */
    static forRoot() {
        return { ngModule: PaginationModule, providers: [PaginationConfig] };
    }
}
PaginationModule.decorators = [
    { type: NgModule, args: [{
                imports: [CommonModule, ButtonModule.forRoot()],
                declarations: [
                    PaginationComponent
                ],
                exports: [
                    PaginationComponent
                ]
            },] },
];
/** @nocollapse */
PaginationModule.ctorParameters = () => [];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
const MODULES = [
    CellModule, ButtonModule, FormModule, SliderModule, UploaderModule, ActionSheetModule,
    DialogModule, LoadmoreModule, ProgressModule, GalleryModule, PickerModule, SearchBarModule,
    TabModule, ToastModule, ToptipsModule, PopupModule, PTRModule, InfiniteLoaderModule,
    SidebarModule, SwiperModule, ChartG2Module, JWeiXinModule, AccordionModule, MaskModule,
    RatingModule, StepperModule, PaginationModule
];
class WeUiRootModule {
}
WeUiRootModule.decorators = [
    { type: NgModule, args: [{
                imports: [
                    CellModule.forRoot(), ButtonModule.forRoot(), FormModule.forRoot(), SliderModule.forRoot(), UploaderModule.forRoot(), ActionSheetModule.forRoot(),
                    DialogModule.forRoot(), LoadmoreModule.forRoot(), ProgressModule.forRoot(), GalleryModule.forRoot(), PickerModule.forRoot(), SearchBarModule.forRoot(),
                    TabModule.forRoot(), ToastModule.forRoot(), ToptipsModule.forRoot(), PopupModule.forRoot(), PTRModule.forRoot(), InfiniteLoaderModule.forRoot(),
                    SidebarModule.forRoot(), SwiperModule.forRoot(), ChartG2Module.forRoot(), JWeiXinModule.forRoot(), AccordionModule.forRoot(), MaskModule.forRoot(),
                    RatingModule.forRoot(), StepperModule.forRoot(), PaginationModule.forRoot()
                ],
                exports: MODULES
            },] },
];
/** @nocollapse */
WeUiRootModule.ctorParameters = () => [];
class WeUiModule {
    /**
     * @return {?}
     */
    static forRoot() {
        return { ngModule: WeUiRootModule };
    }
}
WeUiModule.decorators = [
    { type: NgModule, args: [{ exports: MODULES },] },
];
/** @nocollapse */
WeUiModule.ctorParameters = () => [];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * Generated bundle index. Do not edit.
 */

export { WeUiRootModule, WeUiModule, SwipeDirective, CellModule, ButtonComponent, ButtonModule, ButtonConfig, InputDirective, ChecklistDirective, VCodeDirective, TextareaDirective, FormModule, SliderDirective, SliderModule, UploaderModule, FileLikeObject, FileItem, FileType, UploaderConfig, Uploader, UploaderFileDirective, FileThumbDirective, ActionSheetService, ActionSheetComponent, ActionSheetConfig, ActionSheetModule, DialogService, DialogComponent, DialogConfig, DialogModule, LoadmoreComponent, LoadmoreConfig, LoadmoreModule, ProgressComponent, ProgressModule, GalleryComponent, GalleryModule, PickerConfig, PickerGroupComponent, PickerComponent, CityPickerComponent, DatePickerComponent, PickerService, PickerModule, SearchBarComponent, SearchBarConfig, SearchBarModule, TabDirective, BarComponent, NavbarComponent, TabbarComponent, TabModule, ToastService, ToastComponent, ToastConfig, ToastModule, ToptipsComponent, ToptipsService, ToptipsModule, PopupComponent, PopupConfig, PopupModule, PTRComponent, PTRConfig, PTRModule, InfiniteLoaderConfig, InfiniteLoaderComponent, InfiniteLoaderModule, SidebarComponent, CloseSidebarDirective, SidebarContainerComponent, SidebarConfig, SidebarService, SidebarModule, SwiperConfig, SwiperComponent, SwiperModule, ChartG2Directive, ChartG2Module, JWeiXinService, JWeiXinModule, AccordionPanelComponent, AccordionComponent, AccordionConfig, AccordionModule, MaskComponent, MaskModule, RatingConfig, RatingComponent, RatingModule, StepperComponent, StepperModule, PaginationConfig, PaginationComponent, PaginationModule, AccordionPanelComponent as ɵdc, AccordionComponent as ɵdd, AccordionConfig as ɵde, AccordionModule as ɵdb, ActionSheetComponent as ɵr, ActionSheetConfig as ɵs, ActionSheetModule as ɵq, ActionSheetService as ɵt, ButtonComponent as ɵd, ButtonConfig as ɵe, ButtonModule as ɵc, CellModule as ɵa, SwipeDirective as ɵb, ChartG2Directive as ɵcx, ChartG2Module as ɵcw, DialogComponent as ɵy, DialogConfig as ɵz, DialogModule as ɵv, DialogService as ɵba, ChecklistDirective as ɵj, FormModule as ɵf, InputDirective as ɵg, TextareaDirective as ɵi, VCodeDirective as ɵh, GalleryComponent as ɵbh, GalleryModule as ɵbg, InfiniteLoaderComponent as ɵcl, InfiniteLoaderConfig as ɵcm, InfiniteLoaderModule as ɵck, JWeiXinModule as ɵcy, JWeiXinService as ɵcz, LoadmoreComponent as ɵbc, LoadmoreConfig as ɵbd, LoadmoreModule as ɵbb, MaskComponent as ɵx, MaskModule as ɵw, PaginationComponent as ɵdl, PaginationConfig as ɵdm, PaginationModule as ɵdk, CityPickerComponent as ɵbn, DatePickerComponent as ɵbm, PickerGroupComponent as ɵbl, PickerComponent as ɵbj, PickerConfig as ɵbk, PickerModule as ɵbi, PickerService as ɵbo, PopupComponent as ɵcf, PopupConfig as ɵcg, PopupModule as ɵce, ProgressComponent as ɵbf, ProgressModule as ɵbe, PTRComponent as ɵci, PTRConfig as ɵcj, PTRModule as ɵch, RatingComponent as ɵdg, RatingConfig as ɵdh, RatingModule as ɵdf, SearchBarComponent as ɵbq, SearchBarConfig as ɵbr, SearchBarModule as ɵbp, CloseSidebarDirective as ɵcs, SidebarContainerComponent as ɵco, SidebarComponent as ɵcp, SidebarConfig as ɵcr, SidebarModule as ɵcn, SidebarService as ɵcq, SliderDirective as ɵl, SliderModule as ɵk, StepperComponent as ɵdj, StepperModule as ɵdi, SwiperComponent as ɵcu, SwiperConfig as ɵcv, SwiperModule as ɵct, BarComponent as ɵbu, NavbarComponent as ɵbv, TabDirective as ɵbt, TabModule as ɵbs, TabbarComponent as ɵbw, ToastComponent as ɵby, ToastConfig as ɵbz, ToastModule as ɵbx, ToastService as ɵca, ToptipsComponent as ɵcc, ToptipsModule as ɵcb, ToptipsService as ɵcd, FileThumbDirective as ɵo, UploaderConfig as ɵp, UploaderFileDirective as ɵn, UploaderModule as ɵm, BaseService as ɵu, LoaderService as ɵda };
//# sourceMappingURL=weui.js.map
